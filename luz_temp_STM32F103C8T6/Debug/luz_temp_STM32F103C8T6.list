
luz_temp_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006750  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08006a70  08006a70  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a70  08006a70  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a74  08006a74  00016a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200000fc  08006b74  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006b74  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014466  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348b  00000000  00000000  0003458b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00038e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017108  00000000  00000000  0003a030  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000116b0  00000000  00000000  00051138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ba22  00000000  00000000  000627e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de20a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b0  00000000  00000000  000de288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	08006844 	.word	0x08006844

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	08006844 	.word	0x08006844

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	889b      	ldrh	r3, [r3, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f002 fffa 	bl	800366e <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000680:	2311      	movs	r3, #17
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	79db      	ldrb	r3, [r3, #7]
 8000688:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800068a:	2303      	movs	r3, #3
 800068c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f107 0208 	add.w	r2, r7, #8
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fe77 	bl	800338c <HAL_GPIO_Init>
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	79db      	ldrb	r3, [r3, #7]
 80006ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe58 	bl	800338c <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80006ee:	4aad      	ldr	r2, [pc, #692]	; (80009a4 <DHT_getData+0x2c0>)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000708:	84fb      	strh	r3, [r7, #38]	; 0x26
 800070a:	e002      	b.n	8000712 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000712:	f002 f975 	bl	8002a00 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000720:	429a      	cmp	r2, r3
 8000722:	d212      	bcs.n	800074a <DHT_getData+0x66>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00e      	beq.n	800074a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	61bb      	str	r3, [r7, #24]
		return data;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	461a      	mov	r2, r3
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000744:	e882 0003 	stmia.w	r2, {r0, r1}
 8000748:	e161      	b.n	8000a0e <DHT_getData+0x32a>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800074a:	f002 f959 	bl	8002a00 <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	f7ff ff7c 	bl	8000654 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f002 ff81 	bl	800366e <HAL_GPIO_WritePin>
	Delay(18);
 800076c:	2012      	movs	r0, #18
 800076e:	f002 f951 	bl	8002a14 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	889b      	ldrh	r3, [r3, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f002 ff76 	bl	800366e <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	f7ff ff8f 	bl	80006a6 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800078e:	e019      	b.n	80007c4 <DHT_getData+0xe0>
		timeout++;
 8000790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000798:	f242 7210 	movw	r2, #10000	; 0x2710
 800079c:	4293      	cmp	r3, r2
 800079e:	d911      	bls.n	80007c4 <DHT_getData+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007a8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007b0:	60da      	str	r2, [r3, #12]

			return data;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007be:	e882 0003 	stmia.w	r2, {r0, r1}
 80007c2:	e124      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f002 ff36 	bl	8003640 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d0da      	beq.n	8000790 <DHT_getData+0xac>
		}
	}
	timeout = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80007de:	e019      	b.n	8000814 <DHT_getData+0x130>
		timeout++;
 80007e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e2:	3301      	adds	r3, #1
 80007e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80007e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d911      	bls.n	8000814 <DHT_getData+0x130>
 80007f0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007f8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000800:	60da      	str	r2, [r3, #12]

			return data;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000812:	e0fc      	b.n	8000a0e <DHT_getData+0x32a>
	while(!getLine()) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f002 ff0e 	bl	8003640 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d1da      	bne.n	80007e0 <DHT_getData+0xfc>
		}
	}
	timeout = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800082e:	e011      	b.n	8000854 <DHT_getData+0x170>
		timeout++;
 8000830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000832:	3301      	adds	r3, #1
 8000834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000838:	f242 7210 	movw	r2, #10000	; 0x2710
 800083c:	4293      	cmp	r3, r2
 800083e:	d909      	bls.n	8000854 <DHT_getData+0x170>
 8000840:	b662      	cpsie	i
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800084e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000852:	e0dc      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f002 feee 	bl	8003640 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d0e2      	beq.n	8000830 <DHT_getData+0x14c>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800087a:	e05b      	b.n	8000934 <DHT_getData+0x250>
		for(uint8_t b = 7; b != 255; b--) {
 800087c:	2307      	movs	r3, #7
 800087e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000882:	e04e      	b.n	8000922 <DHT_getData+0x23e>
			uint16_t hT = 0, lT = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	843b      	strh	r3, [r7, #32]
 8000888:	2300      	movs	r3, #0
 800088a:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800088c:	e002      	b.n	8000894 <DHT_getData+0x1b0>
 800088e:	8bfb      	ldrh	r3, [r7, #30]
 8000890:	3301      	adds	r3, #1
 8000892:	83fb      	strh	r3, [r7, #30]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f002 fece 	bl	8003640 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d004      	beq.n	80008b4 <DHT_getData+0x1d0>
 80008aa:	8bfb      	ldrh	r3, [r7, #30]
 80008ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d1ec      	bne.n	800088e <DHT_getData+0x1aa>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 80008b8:	e002      	b.n	80008c0 <DHT_getData+0x1dc>
 80008ba:	8c3b      	ldrh	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	843b      	strh	r3, [r7, #32]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f002 feb8 	bl	8003640 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <DHT_getData+0x1fc>
 80008d6:	8c3b      	ldrh	r3, [r7, #32]
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	4293      	cmp	r3, r2
 80008de:	d1ec      	bne.n	80008ba <DHT_getData+0x1d6>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80008e0:	8c3a      	ldrh	r2, [r7, #32]
 80008e2:	8bfb      	ldrh	r3, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d917      	bls.n	8000918 <DHT_getData+0x234>
 80008e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008f0:	4413      	add	r3, r2
 80008f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000912:	440b      	add	r3, r1
 8000914:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 8000918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800091c:	3b01      	subs	r3, #1
 800091e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000922:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d1ac      	bne.n	8000884 <DHT_getData+0x1a0>
	for(uint8_t a = 0; a < 5; a++) {
 800092a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092e:	3301      	adds	r3, #1
 8000930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000938:	2b04      	cmp	r3, #4
 800093a:	d99f      	bls.n	800087c <DHT_getData+0x198>
 800093c:	b662      	cpsie	i
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800093e:	7b3a      	ldrb	r2, [r7, #12]
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	4413      	add	r3, r2
 8000944:	b2da      	uxtb	r2, r3
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	4413      	add	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	7c3b      	ldrb	r3, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d14c      	bne.n	80009f2 <DHT_getData+0x30e>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d138      	bne.n	80009d2 <DHT_getData+0x2ee>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	7b7a      	ldrb	r2, [r7, #13]
 8000966:	4313      	orrs	r3, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fca9 	bl	80002c0 <__aeabi_i2f>
 800096e:	4603      	mov	r3, r0
 8000970:	490d      	ldr	r1, [pc, #52]	; (80009a8 <DHT_getData+0x2c4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fcf8 	bl	8000368 <__aeabi_fmul>
 8000978:	4603      	mov	r3, r0
 800097a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	db13      	blt.n	80009ac <DHT_getData+0x2c8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	4313      	orrs	r3, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc97 	bl	80002c0 <__aeabi_i2f>
 8000992:	4603      	mov	r3, r0
 8000994:	4904      	ldr	r1, [pc, #16]	; (80009a8 <DHT_getData+0x2c4>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fce6 	bl	8000368 <__aeabi_fmul>
 800099c:	4603      	mov	r3, r0
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	e017      	b.n	80009d2 <DHT_getData+0x2ee>
 80009a2:	bf00      	nop
 80009a4:	0800685c 	.word	0x0800685c
 80009a8:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4313      	orrs	r3, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc7e 	bl	80002c0 <__aeabi_i2f>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <DHT_getData+0x334>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fccd 	bl	8000368 <__aeabi_fmul>
 80009ce:	4603      	mov	r3, r0
 80009d0:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	799b      	ldrb	r3, [r3, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <DHT_getData+0x30e>
			data.hum = (float)rawData[0];
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fc6b 	bl	80002b8 <__aeabi_ui2f>
 80009e2:	4603      	mov	r3, r0
 80009e4:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc65 	bl	80002b8 <__aeabi_ui2f>
 80009ee:	4603      	mov	r3, r0
 80009f0:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	461a      	mov	r2, r3
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	bdcccccd 	.word	0xbdcccccd

08000a1c <init_botonera>:

static uint8_t read_input, last_input, fall_input, rise_input;
static uint8_t write_output = 0xFF;


void init_botonera (I2C_HandleTypeDef* i2c_handler, uint8_t i2c_address){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]

	pcf8574_init(i2c_handler, i2c_address);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f8d9 	bl	8000be4 <pcf8574_init>

	//lectura inicial
	flag_sinBotones = HAL_I2C_Master_Receive(i2c_handler, i2c_address << 1, &read_input, 1, 100);
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <init_botonera+0x4c>)
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f003 f852 	bl	8003aec <HAL_I2C_Master_Receive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <init_botonera+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	last_input = read_input;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <init_botonera+0x4c>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <init_botonera+0x54>)
 8000a56:	701a      	strb	r2, [r3, #0]

	pcf8574_writePort(0xFF); //weak pullup para todos los pines
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	f000 f8f3 	bl	8000c44 <pcf8574_writePort>
} //fin init_botonera()
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000118 	.word	0x20000118
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000119 	.word	0x20000119

08000a74 <lecturaTeclas>:


void lecturaTeclas(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if (flag_sinBotones != HAL_OK) return;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <lecturaTeclas+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d106      	bne.n	8000a8e <lecturaTeclas+0x1a>
	read_input = pcf8574_readPort();
 8000a80:	f000 f8c8 	bl	8000c14 <pcf8574_readPort>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <lecturaTeclas+0x24>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e000      	b.n	8000a90 <lecturaTeclas+0x1c>
	if (flag_sinBotones != HAL_OK) return;
 8000a8e:	bf00      	nop
} //fin lecturaTeclas()
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000118 	.word	0x20000118

08000a9c <update_teclas>:

void update_teclas (void){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

	fall_input = last_input & ~read_input;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <update_teclas+0x48>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	b25a      	sxtb	r2, r3
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <update_teclas+0x4c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <update_teclas+0x50>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	rise_input = ~last_input & read_input;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <update_teclas+0x4c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <update_teclas+0x48>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4013      	ands	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <update_teclas+0x54>)
 8000ad2:	701a      	strb	r2, [r3, #0]

	last_input = read_input;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <update_teclas+0x48>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <update_teclas+0x4c>)
 8000ada:	701a      	strb	r2, [r3, #0]

} //fin update_teclas()
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	20000119 	.word	0x20000119
 8000aec:	2000011a 	.word	0x2000011a
 8000af0:	2000011b 	.word	0x2000011b

08000af4 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]

	if (flag_sinBotones != 0) return HIGH_L;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <getStatBoton+0x6c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <getStatBoton+0x16>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e024      	b.n	8000b54 <getStatBoton+0x60>

	if ( (fall_input & (1 << b)) != 0)
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <getStatBoton+0x70>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	fa42 f303 	asr.w	r3, r2, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <getStatBoton+0x2e>
		return FALL;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e018      	b.n	8000b54 <getStatBoton+0x60>

	if ( (rise_input & (1 << b)) != 0)
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <getStatBoton+0x74>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	fa42 f303 	asr.w	r3, r2, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <getStatBoton+0x46>
		return RISE;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e00c      	b.n	8000b54 <getStatBoton+0x60>

	if ( (read_input & (1 << b)) != 0)
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <getStatBoton+0x78>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	fa42 f303 	asr.w	r3, r2, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <getStatBoton+0x5e>
		return HIGH_L;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <getStatBoton+0x60>

	return LOW_L;
 8000b52:	2300      	movs	r3, #0
} //fin getStatBoton()
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000011a 	.word	0x2000011a
 8000b68:	2000011b 	.word	0x2000011b
 8000b6c:	20000118 	.word	0x20000118

08000b70 <setOutput>:
uint8_t detectaAlgunBoton (void){
	return 0;
} //fin detectaAgunBoton()


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <setOutput+0x30>
		write_output |= (uint8_t)(1 << (s + 6));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3306      	adds	r3, #6
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <setOutput+0x58>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <setOutput+0x58>)
 8000b9c:	701a      	strb	r2, [r3, #0]
		return;
 8000b9e:	e00f      	b.n	8000bc0 <setOutput+0x50>
	}else{
		write_output &= ~( (uint8_t)(1 << (s + 6)) );
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <setOutput+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <setOutput+0x58>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	} //fin if val

} //fin setOutput()
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000001 	.word	0x20000001

08000bcc <update_outputs>:

void update_outputs (void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	pcf8574_writePort(write_output);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <update_outputs+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f835 	bl	8000c44 <pcf8574_writePort>

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000001 	.word	0x20000001

08000be4 <pcf8574_init>:
#include "PCF8574_lfs.h"

static I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t addressPCF8574; //(0x20)<<1 // change this according to ur setup

void pcf8574_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <pcf8574_init+0x28>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
	addressPCF8574 = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <pcf8574_init+0x2c>)
 8000bfe:	701a      	strb	r2, [r3, #0]
} //fin pcf8574_init()
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000011c 	.word	0x2000011c
 8000c10:	20000170 	.word	0x20000170

08000c14 <pcf8574_readPort>:

uint8_t pcf8574_readPort (void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
	uint8_t reg;
	HAL_I2C_Master_Receive(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <pcf8574_readPort+0x28>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <pcf8574_readPort+0x2c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	1dfa      	adds	r2, r7, #7
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f002 ff5e 	bl	8003aec <HAL_I2C_Master_Receive>
	return reg;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
} //fin pcf8574_readInputs()
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000011c 	.word	0x2000011c
 8000c40:	20000170 	.word	0x20000170

08000c44 <pcf8574_writePort>:

void pcf8574_writePort (uint8_t reg){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <pcf8574_writePort+0x28>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <pcf8574_writePort+0x2c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	1dfa      	adds	r2, r7, #7
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f002 fe46 	bl	80038f0 <HAL_I2C_Master_Transmit>
} //fin pcf8574_writeOutputs
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000011c 	.word	0x2000011c
 8000c70:	20000170 	.word	0x20000170

08000c74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c86:	4a19      	ldr	r2, [pc, #100]	; (8000cec <MX_ADC1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cb2:	f001 fed1 	bl	8002a58 <HAL_ADC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 fd4e 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cd2:	f002 f853 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cdc:	f000 fd3e 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001a4 	.word	0x200001a4
 8000cec:	40012400 	.word	0x40012400

08000cf0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <MX_ADC2_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d1a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d2e:	f001 fe93 	bl	8002a58 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f000 fd10 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d4e:	f002 f815 	bl	8002d7c <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d58:	f000 fd00 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000174 	.word	0x20000174
 8000d68:	40012800 	.word	0x40012800

08000d6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_ADC_MspInit+0xbc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d122      	bne.n	8000dd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000dcc:	f002 fade 	bl	800338c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dd0:	e026      	b.n	8000e20 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d121      	bne.n	8000e20 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000e1c:	f002 fab6 	bl	800338c <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40012800 	.word	0x40012800

08000e38 <init_sensores>:
DHT_data datosDHT;
uint8_t flag_LDR = 0;
uint8_t acum_umbral = 0;


void init_sensores (ADC_HandleTypeDef* handler_adc){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	hadc = handler_adc;
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <init_sensores+0x18>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]

}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	200001e0 	.word	0x200001e0

08000e54 <update_DHT>:


void update_DHT (void){
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	datosDHT = DHT_getData(&sensorDHT);
 8000e5a:	4c08      	ldr	r4, [pc, #32]	; (8000e7c <update_DHT+0x28>)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <update_DHT+0x2c>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc3f 	bl	80006e4 <DHT_getData>
 8000e66:	4622      	mov	r2, r4
 8000e68:	463b      	mov	r3, r7
 8000e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e6e:	e882 0003 	stmia.w	r2, {r0, r1}
} //fin update_temp()
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001d4 	.word	0x200001d4
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <get_datosDHT>:


DHT_data get_datosDHT (void){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	return datosDHT;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <get_datosDHT+0x20>)
 8000e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e94:	e883 0003 	stmia.w	r3, {r0, r1}
} //fin get_datosDHT()
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200001d4 	.word	0x200001d4

08000ea8 <update_ldr>:


void update_ldr (void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	lecturaLDR = HAL_ADC_GetValue(hadc);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <update_ldr+0x20>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 ff57 	bl	8002d64 <HAL_ADC_GetValue>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <update_ldr+0x24>)
 8000eba:	601a      	str	r2, [r3, #0]
	flag_LDR = 1;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <update_ldr+0x28>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
} //fin if update_ldr()
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001e0 	.word	0x200001e0
 8000ecc:	20000120 	.word	0x20000120
 8000ed0:	20000125 	.word	0x20000125

08000ed4 <get_ldr>:


uint32_t get_ldr (void){
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	return lecturaLDR;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <get_ldr+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
} //fin get_ldr()
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000120 	.word	0x20000120

08000ee8 <get_umbralLDR>:


uint32_t get_umbralLDR (uint8_t u){
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	if (u != 0) return umbralMaxLDR;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <get_umbralLDR+0x16>
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <get_umbralLDR+0x24>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	e001      	b.n	8000f02 <get_umbralLDR+0x1a>
	return umbralMinLDR;
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <get_umbralLDR+0x28>)
 8000f00:	681b      	ldr	r3, [r3, #0]
} //fin get_umbralLDR
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	20000008 	.word	0x20000008

08000f14 <set_umbralLDR>:


void set_umbralLDR (uint8_t u, uint32_t val){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
	if (u != 0){
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <set_umbralLDR+0x1a>
		umbralMaxLDR = val;
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <set_umbralLDR+0x28>)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6013      	str	r3, [r2, #0]
		return;
 8000f2c:	e002      	b.n	8000f34 <set_umbralLDR+0x20>
	}

	umbralMinLDR = val;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <set_umbralLDR+0x2c>)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	6013      	str	r3, [r2, #0]
} //fin set_umbralLDR
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	20000008 	.word	0x20000008

08000f44 <set_modoLuz>:


void set_modoLuz (uint8_t val){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
	modoAuto = val;
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <set_modoLuz+0x30>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7013      	strb	r3, [r2, #0]
	setOutput(OUT_MODO, !modoAuto); //LOGICA NEGATIVA
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <set_modoLuz+0x30>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4619      	mov	r1, r3
 8000f64:	2001      	movs	r0, #1
 8000f66:	f7ff fe03 	bl	8000b70 <setOutput>
} //fin set_modoLuz()
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000124 	.word	0x20000124

08000f78 <get_modoLuz>:


uint8_t get_modoLuz (void){
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	return modoAuto;
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <get_modoLuz+0x10>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
} //fin get_modoLuz()
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000124 	.word	0x20000124

08000f8c <check_luzAuto>:

void check_luzAuto (void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	switch (modoAuto) {
 8000f90:	4b59      	ldr	r3, [pc, #356]	; (80010f8 <check_luzAuto+0x16c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <check_luzAuto+0x12>
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d02e      	beq.n	8000ffa <check_luzAuto+0x6e>
			} //fin switch estadoRele

			flag_LDR = 0;
		break;
		default:
		break;
 8000f9c:	e0aa      	b.n	80010f4 <check_luzAuto+0x168>
			if (getStatBoton(IN_MODO) == FALL){
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f7ff fda8 	bl	8000af4 <getStatBoton>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d105      	bne.n	8000fb6 <check_luzAuto+0x2a>
				set_modoLuz(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff ffca 	bl	8000f44 <set_modoLuz>
				refresh_infoModo();
 8000fb0:	f001 fa54 	bl	800245c <refresh_infoModo>
				break;
 8000fb4:	e09e      	b.n	80010f4 <check_luzAuto+0x168>
			if (getStatBoton(IN_LUZ) == FALL){
 8000fb6:	2004      	movs	r0, #4
 8000fb8:	f7ff fd9c 	bl	8000af4 <getStatBoton>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	f040 8097 	bne.w	80010f2 <check_luzAuto+0x166>
				estadoRele = !estadoRele;
 8000fc4:	4b4d      	ldr	r3, [pc, #308]	; (80010fc <check_luzAuto+0x170>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	bf0c      	ite	eq
 8000fcc:	2301      	moveq	r3, #1
 8000fce:	2300      	movne	r3, #0
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <check_luzAuto+0x170>)
 8000fd6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA NEGATIVA
 8000fd8:	4b48      	ldr	r3, [pc, #288]	; (80010fc <check_luzAuto+0x170>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe2:	4847      	ldr	r0, [pc, #284]	; (8001100 <check_luzAuto+0x174>)
 8000fe4:	f002 fb43 	bl	800366e <HAL_GPIO_WritePin>
				setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <check_luzAuto+0x170>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f7ff fdbe 	bl	8000b70 <setOutput>
				refresh_infoModo();
 8000ff4:	f001 fa32 	bl	800245c <refresh_infoModo>
		break;
 8000ff8:	e07b      	b.n	80010f2 <check_luzAuto+0x166>
			if (getStatBoton(IN_MODO) == FALL){
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff fd7a 	bl	8000af4 <getStatBoton>
 8001000:	4603      	mov	r3, r0
 8001002:	2b02      	cmp	r3, #2
 8001004:	d105      	bne.n	8001012 <check_luzAuto+0x86>
				set_modoLuz(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ff9c 	bl	8000f44 <set_modoLuz>
				refresh_infoModo();
 800100c:	f001 fa26 	bl	800245c <refresh_infoModo>
				break;
 8001010:	e070      	b.n	80010f4 <check_luzAuto+0x168>
			switch (estadoRele){ //LOGICA NEGATIVA
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <check_luzAuto+0x170>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d031      	beq.n	800107e <check_luzAuto+0xf2>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d000      	beq.n	8001020 <check_luzAuto+0x94>
				break;
 800101e:	e064      	b.n	80010ea <check_luzAuto+0x15e>
					if (!flag_LDR) break;
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <check_luzAuto+0x178>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d059      	beq.n	80010dc <check_luzAuto+0x150>
					if (lecturaLDR < umbralMinLDR){
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <check_luzAuto+0x17c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b37      	ldr	r3, [pc, #220]	; (800110c <check_luzAuto+0x180>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d206      	bcs.n	8001042 <check_luzAuto+0xb6>
						acum_umbral++;
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <check_luzAuto+0x184>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b34      	ldr	r3, [pc, #208]	; (8001110 <check_luzAuto+0x184>)
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e002      	b.n	8001048 <check_luzAuto+0xbc>
						acum_umbral = 0;
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <check_luzAuto+0x184>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
					if (acum_umbral > 2){ //3 segundos por debajo del umbral
 8001048:	4b31      	ldr	r3, [pc, #196]	; (8001110 <check_luzAuto+0x184>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d947      	bls.n	80010e0 <check_luzAuto+0x154>
						estadoRele = 0;
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <check_luzAuto+0x170>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele);
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <check_luzAuto+0x170>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001060:	4827      	ldr	r0, [pc, #156]	; (8001100 <check_luzAuto+0x174>)
 8001062:	f002 fb04 	bl	800366e <HAL_GPIO_WritePin>
						setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <check_luzAuto+0x170>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff fd7f 	bl	8000b70 <setOutput>
						refresh_infoModo();
 8001072:	f001 f9f3 	bl	800245c <refresh_infoModo>
						acum_umbral = 0;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <check_luzAuto+0x184>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
						break;
 800107c:	e035      	b.n	80010ea <check_luzAuto+0x15e>
					if (!flag_LDR) break;
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <check_luzAuto+0x178>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d02e      	beq.n	80010e4 <check_luzAuto+0x158>
					if (lecturaLDR > umbralMaxLDR){
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <check_luzAuto+0x17c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <check_luzAuto+0x188>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	429a      	cmp	r2, r3
 8001090:	d906      	bls.n	80010a0 <check_luzAuto+0x114>
						acum_umbral++;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <check_luzAuto+0x184>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <check_luzAuto+0x184>)
 800109c:	701a      	strb	r2, [r3, #0]
 800109e:	e002      	b.n	80010a6 <check_luzAuto+0x11a>
						acum_umbral = 0;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <check_luzAuto+0x184>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]
					if (acum_umbral > 2){ //3 segundos por encima del umbral
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <check_luzAuto+0x184>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d91c      	bls.n	80010e8 <check_luzAuto+0x15c>
						estadoRele = 1;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <check_luzAuto+0x170>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele);
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <check_luzAuto+0x170>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <check_luzAuto+0x174>)
 80010c0:	f002 fad5 	bl	800366e <HAL_GPIO_WritePin>
						setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <check_luzAuto+0x170>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fd50 	bl	8000b70 <setOutput>
						refresh_infoModo();
 80010d0:	f001 f9c4 	bl	800245c <refresh_infoModo>
						acum_umbral = 0;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <check_luzAuto+0x184>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
						break;
 80010da:	e006      	b.n	80010ea <check_luzAuto+0x15e>
					if (!flag_LDR) break;
 80010dc:	bf00      	nop
 80010de:	e004      	b.n	80010ea <check_luzAuto+0x15e>
				break;
 80010e0:	bf00      	nop
 80010e2:	e002      	b.n	80010ea <check_luzAuto+0x15e>
					if (!flag_LDR) break;
 80010e4:	bf00      	nop
 80010e6:	e000      	b.n	80010ea <check_luzAuto+0x15e>
				break;
 80010e8:	bf00      	nop
			flag_LDR = 0;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <check_luzAuto+0x178>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
		break;
 80010f0:	e000      	b.n	80010f4 <check_luzAuto+0x168>
		break;
 80010f2:	bf00      	nop
	} //fin switch modoAuto
} //fin check_luzAuto()
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000124 	.word	0x20000124
 80010fc:	200001dc 	.word	0x200001dc
 8001100:	40010c00 	.word	0x40010c00
 8001104:	20000125 	.word	0x20000125
 8001108:	20000120 	.word	0x20000120
 800110c:	20000008 	.word	0x20000008
 8001110:	20000126 	.word	0x20000126
 8001114:	20000004 	.word	0x20000004

08001118 <getStat_rele>:


uint8_t getStat_rele (void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return estadoRele;
 800111c:	4b02      	ldr	r3, [pc, #8]	; (8001128 <getStat_rele+0x10>)
 800111e:	781b      	ldrb	r3, [r3, #0]
} //fin get_rele ()
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200001dc 	.word	0x200001dc

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b2e      	ldr	r3, [pc, #184]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <MX_GPIO_Init+0xd0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_GPIO_Init+0xd0>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <MX_GPIO_Init+0xd0>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a21      	ldr	r2, [pc, #132]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_GPIO_Init+0xd0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_GPIO_Init+0xd0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_GPIO_Init+0xd0>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_GPIO_Init+0xd0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	4816      	ldr	r0, [pc, #88]	; (8001200 <MX_GPIO_Init+0xd4>)
 80011a8:	f002 fa61 	bl	800366e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <MX_GPIO_Init+0xd8>)
 80011b4:	f002 fa5b 	bl	800366e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	4619      	mov	r1, r3
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_GPIO_Init+0xd4>)
 80011d2:	f002 f8db 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_rele_Pin;
 80011d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_rele_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_GPIO_Init+0xd8>)
 80011f0:	f002 f8cc 	bl	800338c <HAL_GPIO_Init>

}
 80011f4:	bf00      	nop
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011000 	.word	0x40011000
 8001204:	40010c00 	.word	0x40010c00

08001208 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f002 fa2b 	bl	80036a0 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 fa84 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200001e4 	.word	0x200001e4
 800125c:	40005400 	.word	0x40005400
 8001260:	00061a80 	.word	0x00061a80

08001264 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <HAL_I2C_MspInit+0x70>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d123      	bne.n	80012cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129c:	23c0      	movs	r3, #192	; 0xc0
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	2312      	movs	r3, #18
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <HAL_I2C_MspInit+0x78>)
 80012b0:	f002 f86c 	bl	800338c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 80012ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012be:	61d3      	str	r3, [r2, #28]
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_I2C_MspInit+0x74>)
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005400 	.word	0x40005400
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010c00 	.word	0x40010c00

080012e0 <lcd_send_cmd>:

I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t SLAVE_ADDRESS_LCD; //(0x3F)<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f023 030f 	bic.w	r3, r3, #15
 80012f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	f043 030c 	orr.w	r3, r3, #12
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800130c:	7bbb      	ldrb	r3, [r7, #14]
 800130e:	f043 030c 	orr.w	r3, r3, #12
 8001312:	b2db      	uxtb	r3, r3
 8001314:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b2db      	uxtb	r3, r3
 800131e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <lcd_send_cmd+0x60>)
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <lcd_send_cmd+0x64>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b299      	uxth	r1, r3
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	2364      	movs	r3, #100	; 0x64
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2304      	movs	r3, #4
 8001334:	f002 fadc 	bl	80038f0 <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000023c 	.word	0x2000023c
 8001344:	20000238 	.word	0x20000238

08001348 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	f043 030d 	orr.w	r3, r3, #13
 8001366:	b2db      	uxtb	r3, r3
 8001368:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	f043 0309 	orr.w	r3, r3, #9
 8001370:	b2db      	uxtb	r3, r3
 8001372:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	f043 030d 	orr.w	r3, r3, #13
 800137a:	b2db      	uxtb	r3, r3
 800137c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800137e:	7bbb      	ldrb	r3, [r7, #14]
 8001380:	f043 0309 	orr.w	r3, r3, #9
 8001384:	b2db      	uxtb	r3, r3
 8001386:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <lcd_send_data+0x60>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <lcd_send_data+0x64>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b299      	uxth	r1, r3
 8001392:	f107 0208 	add.w	r2, r7, #8
 8001396:	2364      	movs	r3, #100	; 0x64
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2304      	movs	r3, #4
 800139c:	f002 faa8 	bl	80038f0 <HAL_I2C_Master_Transmit>
}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000023c 	.word	0x2000023c
 80013ac:	20000238 	.word	0x20000238

080013b0 <lcd_clear>:

void lcd_clear (void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80013b6:	2080      	movs	r0, #128	; 0x80
 80013b8:	f7ff ff92 	bl	80012e0 <lcd_send_cmd>
	for (int i=0; i<80; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	e005      	b.n	80013ce <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80013c2:	2020      	movs	r0, #32
 80013c4:	f7ff ffc0 	bl	8001348 <lcd_send_data>
	for (int i=0; i<80; i++)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b4f      	cmp	r3, #79	; 0x4f
 80013d2:	ddf6      	ble.n	80013c2 <lcd_clear+0x12>
	}
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <lcd_put_cur>:

void lcd_put_cur(int x, int y)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    switch (y){
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d82b      	bhi.n	8001444 <lcd_put_cur+0x68>
 80013ec:	a201      	add	r2, pc, #4	; (adr r2, 80013f4 <lcd_put_cur+0x18>)
 80013ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f2:	bf00      	nop
 80013f4:	08001405 	.word	0x08001405
 80013f8:	08001415 	.word	0x08001415
 80013fc:	08001425 	.word	0x08001425
 8001400:	08001435 	.word	0x08001435
    	case 0:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	3b80      	subs	r3, #128	; 0x80
 800140a:	b2db      	uxtb	r3, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff67 	bl	80012e0 <lcd_send_cmd>
    	break;
 8001412:	e017      	b.n	8001444 <lcd_put_cur+0x68>
    	case 1:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3b40      	subs	r3, #64	; 0x40
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5f 	bl	80012e0 <lcd_send_cmd>
    	break;
 8001422:	e00f      	b.n	8001444 <lcd_put_cur+0x68>
    	case 2:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	3b6c      	subs	r3, #108	; 0x6c
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff57 	bl	80012e0 <lcd_send_cmd>
    	break;
 8001432:	e007      	b.n	8001444 <lcd_put_cur+0x68>
    	case 3:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3b2c      	subs	r3, #44	; 0x2c
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff4f 	bl	80012e0 <lcd_send_cmd>
    	break;
 8001442:	bf00      	nop
    }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8001458:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <lcd_init+0x98>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <lcd_init+0x9c>)
 8001466:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001468:	2032      	movs	r0, #50	; 0x32
 800146a:	f001 fad3 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x30);
 800146e:	2030      	movs	r0, #48	; 0x30
 8001470:	f7ff ff36 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001474:	2005      	movs	r0, #5
 8001476:	f001 facd 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x30);
 800147a:	2030      	movs	r0, #48	; 0x30
 800147c:	f7ff ff30 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001480:	2001      	movs	r0, #1
 8001482:	f001 fac7 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001486:	2030      	movs	r0, #48	; 0x30
 8001488:	f7ff ff2a 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f001 fac1 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001492:	2020      	movs	r0, #32
 8001494:	f7ff ff24 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f001 fabb 	bl	8002a14 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800149e:	2028      	movs	r0, #40	; 0x28
 80014a0:	f7ff ff1e 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 fab5 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80014aa:	2008      	movs	r0, #8
 80014ac:	f7ff ff18 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(1);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f001 faaf 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80014b6:	2001      	movs	r0, #1
 80014b8:	f7ff ff12 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f001 faa9 	bl	8002a14 <HAL_Delay>
	HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f001 faa6 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80014c8:	2006      	movs	r0, #6
 80014ca:	f7ff ff09 	bl	80012e0 <lcd_send_cmd>
	HAL_Delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f001 faa0 	bl	8002a14 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80014d4:	200c      	movs	r0, #12
 80014d6:	f7ff ff03 	bl	80012e0 <lcd_send_cmd>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000023c 	.word	0x2000023c
 80014e8:	20000238 	.word	0x20000238

080014ec <lcd_send_string>:

void lcd_send_string (char *str)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80014f4:	e006      	b.n	8001504 <lcd_send_string+0x18>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff22 	bl	8001348 <lcd_send_data>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f4      	bne.n	80014f6 <lcd_send_string+0xa>
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <lcd_CustomChar_create>:


void lcd_CustomChar_create(uint8_t location, uint8_t charmap[]) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
	location <<= 3;
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	71fb      	strb	r3, [r7, #7]

	lcd_send_cmd (0x40 | (location & 0x38) );
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800152e:	b25b      	sxtb	r3, r3
 8001530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001534:	b25b      	sxtb	r3, r3
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fed1 	bl	80012e0 <lcd_send_cmd>
	for (int i=0; i<8; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e009      	b.n	8001558 <lcd_CustomChar_create+0x44>
		lcd_send_data(charmap[i]);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fefb 	bl	8001348 <lcd_send_data>
	for (int i=0; i<8; i++) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b07      	cmp	r3, #7
 800155c:	ddf2      	ble.n	8001544 <lcd_CustomChar_create+0x30>
	}
} //fin lcd_CustomChar_create ()
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156e:	f001 f9ef 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001572:	f000 f883 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001576:	f7ff fdd9 	bl	800112c <MX_GPIO_Init>
  MX_ADC1_Init();
 800157a:	f7ff fb7b 	bl	8000c74 <MX_ADC1_Init>
  MX_ADC2_Init();
 800157e:	f7ff fbb7 	bl	8000cf0 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001582:	f7ff fe41 	bl	8001208 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001586:	f000 ff75 	bl	8002474 <MX_SPI1_Init>
  MX_TIM2_Init();
 800158a:	f001 f8cb 	bl	8002724 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800158e:	f001 f93b 	bl	8002808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_I2C_Init(&hi2c1);
  HAL_TIM_Base_Start_IT(&htim2);
 8001592:	4834      	ldr	r0, [pc, #208]	; (8001664 <main+0xfc>)
 8001594:	f003 fe60 	bl	8005258 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8001598:	4833      	ldr	r0, [pc, #204]	; (8001668 <main+0x100>)
 800159a:	f001 fb35 	bl	8002c08 <HAL_ADC_Start>

  HAL_StatusTypeDef i2c_status;

  for (uint8_t i = 0; i < 128; i++){
 800159e:	2300      	movs	r3, #0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e011      	b.n	80015c8 <main+0x60>
	  i2c_status = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 1, 10);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	b299      	uxth	r1, r3
 80015ac:	230a      	movs	r3, #10
 80015ae:	2201      	movs	r2, #1
 80015b0:	482e      	ldr	r0, [pc, #184]	; (800166c <main+0x104>)
 80015b2:	f002 fcc9 	bl	8003f48 <HAL_I2C_IsDeviceReady>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71bb      	strb	r3, [r7, #6]
	  if(i2c_status == HAL_OK){
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <main+0x5a>
		  __NOP();
 80015c0:	bf00      	nop
  for (uint8_t i = 0; i < 128; i++){
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	3301      	adds	r3, #1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dae9      	bge.n	80015a4 <main+0x3c>
	  }
  }

  lcd_init(&hi2c1, 0x27);
 80015d0:	2127      	movs	r1, #39	; 0x27
 80015d2:	4826      	ldr	r0, [pc, #152]	; (800166c <main+0x104>)
 80015d4:	f7ff ff3a 	bl	800144c <lcd_init>
  init_botonera(&hi2c1, 0x20);
 80015d8:	2120      	movs	r1, #32
 80015da:	4824      	ldr	r0, [pc, #144]	; (800166c <main+0x104>)
 80015dc:	f7ff fa1e 	bl	8000a1c <init_botonera>
  init_sensores(&hadc1);
 80015e0:	4821      	ldr	r0, [pc, #132]	; (8001668 <main+0x100>)
 80015e2:	f7ff fc29 	bl	8000e38 <init_sensores>
  set_modoLuz(0);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fcac 	bl	8000f44 <set_modoLuz>
  start_menu(0);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f8b9 	bl	8001764 <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tim2 != 0){
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <main+0x108>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d02c      	beq.n	8001654 <main+0xec>

		  if (periodo_IOport != 0){
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <main+0x10c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <main+0xa8>
			  periodo_IOport--;
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <main+0x10c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <main+0x10c>)
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e006      	b.n	800161e <main+0xb6>
		  }else{
			  lecturaTeclas(); //cada 20 ms.
 8001610:	f7ff fa30 	bl	8000a74 <lecturaTeclas>
			  update_outputs(); //cada 20 ms.
 8001614:	f7ff fada 	bl	8000bcc <update_outputs>
			  periodo_IOport = 1;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <main+0x10c>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
		  } //fin if periodo_IOport

		  if (periodo_temp != 0){
 800161e:	4b16      	ldr	r3, [pc, #88]	; (8001678 <main+0x110>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <main+0xcc>
			  periodo_temp--;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <main+0x110>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <main+0x110>)
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e008      	b.n	8001646 <main+0xde>
		  }else{
			  update_DHT();
 8001634:	f7ff fc0e 	bl	8000e54 <update_DHT>
			  update_ldr();
 8001638:	f7ff fc36 	bl	8000ea8 <update_ldr>
			  refresh_infoDHT();
 800163c:	f000 ff02 	bl	8002444 <refresh_infoDHT>
			  periodo_temp = 99;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <main+0x110>)
 8001642:	2263      	movs	r2, #99	; 0x63
 8001644:	701a      	strb	r2, [r3, #0]
		  }

		  timeoutMenu();
 8001646:	f000 f8bd 	bl	80017c4 <timeoutMenu>
		  check_duracionPulsadores();
 800164a:	f000 f8c9 	bl	80017e0 <check_duracionPulsadores>


		  flag_tim2 = 0;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <main+0x108>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	  } //fin if flag_tim2

	  check_menu();
 8001654:	f000 f8ac 	bl	80017b0 <check_menu>
	  check_luzAuto();
 8001658:	f7ff fc98 	bl	8000f8c <check_luzAuto>
	  update_teclas();
 800165c:	f7ff fa1e 	bl	8000a9c <update_teclas>
	  if (flag_tim2 != 0){
 8001660:	e7c7      	b.n	80015f2 <main+0x8a>
 8001662:	bf00      	nop
 8001664:	200002b4 	.word	0x200002b4
 8001668:	200001a4 	.word	0x200001a4
 800166c:	200001e4 	.word	0x200001e4
 8001670:	20000127 	.word	0x20000127
 8001674:	20000020 	.word	0x20000020
 8001678:	20000021 	.word	0x20000021

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2228      	movs	r2, #40	; 0x28
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fcc0 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	2301      	movs	r3, #1
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 f862 	bl	800479c <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016de:	f000 f83d 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2102      	movs	r1, #2
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 facc 	bl	8004c9c <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800170a:	f000 f827 	bl	800175c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800170e:	2302      	movs	r3, #2
 8001710:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fc5a 	bl	8004fd4 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001726:	f000 f819 	bl	800175c <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	; 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d102      	bne.n	800174c <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
	}
} //fin HAL_TIM_PeriodElapsedCallback()
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000127 	.word	0x20000127

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001762:	e7fe      	b.n	8001762 <Error_Handler+0x6>

08001764 <start_menu>:
};

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (uint8_t service){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	lcd_CustomChar_create(0, arriba);
 800176e:	490b      	ldr	r1, [pc, #44]	; (800179c <start_menu+0x38>)
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fecf 	bl	8001514 <lcd_CustomChar_create>
	lcd_CustomChar_create(1, abajo);
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <start_menu+0x3c>)
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fecb 	bl	8001514 <lcd_CustomChar_create>
	lcd_CustomChar_create(2, grados);
 800177e:	4909      	ldr	r1, [pc, #36]	; (80017a4 <start_menu+0x40>)
 8001780:	2002      	movs	r0, #2
 8001782:	f7ff fec7 	bl	8001514 <lcd_CustomChar_create>
	menuActual = &menu[MENU_INFO];
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <start_menu+0x44>)
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <start_menu+0x48>)
 800178a:	601a      	str	r2, [r3, #0]
	menuActual->inicia_menu();
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <start_menu+0x44>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	4798      	blx	r3
} //fin start_menu()
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000024 	.word	0x20000024
 80017a0:	2000002c 	.word	0x2000002c
 80017a4:	20000034 	.word	0x20000034
 80017a8:	20000240 	.word	0x20000240
 80017ac:	2000003c 	.word	0x2000003c

080017b0 <check_menu>:


void check_menu (void){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	menuActual->accion();
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <check_menu+0x10>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	4798      	blx	r3
} //fin check_menu()
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000240 	.word	0x20000240

080017c4 <timeoutMenu>:


void timeoutMenu (void){
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	timeOut_pantalla++;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <timeoutMenu+0x18>)
 80017ca:	881b      	ldrh	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <timeoutMenu+0x18>)
 80017d2:	801a      	strh	r2, [r3, #0]
} //fin timeoutMenu()
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	2000015a 	.word	0x2000015a

080017e0 <check_duracionPulsadores>:


void check_duracionPulsadores (void){
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	holdBoton++;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <check_duracionPulsadores+0x24>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <check_duracionPulsadores+0x24>)
 80017ee:	701a      	strb	r2, [r3, #0]
	repitePulso++;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <check_duracionPulsadores+0x28>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <check_duracionPulsadores+0x28>)
 80017fa:	701a      	strb	r2, [r3, #0]
} //fin duracionPulsadores()
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000160 	.word	0x20000160
 8001808:	20000162 	.word	0x20000162

0800180c <init_Info>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_Info (void){
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0

	sensorDHT = get_datosDHT();
 8001812:	4c34      	ldr	r4, [pc, #208]	; (80018e4 <init_Info+0xd8>)
 8001814:	463b      	mov	r3, r7
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fb34 	bl	8000e84 <get_datosDHT>
 800181c:	4622      	mov	r2, r4
 800181e:	463b      	mov	r3, r7
 8001820:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001824:	e882 0003 	stmia.w	r2, {r0, r1}
	temperatura = sensorDHT.temp;
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <init_Info+0xd8>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe feeb 	bl	8000608 <__aeabi_f2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	b25a      	sxtb	r2, r3
 8001836:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <init_Info+0xdc>)
 8001838:	701a      	strb	r2, [r3, #0]
	humedad = sensorDHT.hum;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <init_Info+0xd8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fee2 	bl	8000608 <__aeabi_f2iz>
 8001844:	4603      	mov	r3, r0
 8001846:	b25a      	sxtb	r2, r3
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <init_Info+0xe0>)
 800184a:	701a      	strb	r2, [r3, #0]

	lcd_clear();
 800184c:	f7ff fdb0 	bl	80013b0 <lcd_clear>
	lcd_put_cur(0, 0);
 8001850:	2100      	movs	r1, #0
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fdc2 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "Temp: %02d C", temperatura);
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <init_Info+0xdc>)
 800185a:	f993 3000 	ldrsb.w	r3, [r3]
 800185e:	461a      	mov	r2, r3
 8001860:	4923      	ldr	r1, [pc, #140]	; (80018f0 <init_Info+0xe4>)
 8001862:	4824      	ldr	r0, [pc, #144]	; (80018f4 <init_Info+0xe8>)
 8001864:	f004 fbdc 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001868:	4822      	ldr	r0, [pc, #136]	; (80018f4 <init_Info+0xe8>)
 800186a:	f7ff fe3f 	bl	80014ec <lcd_send_string>
	lcd_put_cur(8, 0);
 800186e:	2100      	movs	r1, #0
 8001870:	2008      	movs	r0, #8
 8001872:	f7ff fdb3 	bl	80013dc <lcd_put_cur>
	lcd_send_customChar(2); //grados
 8001876:	2002      	movs	r0, #2
 8001878:	f7ff fd66 	bl	8001348 <lcd_send_data>
	lcd_put_cur(0, 1);
 800187c:	2101      	movs	r1, #1
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fdac 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "Humedad: %02d%%", humedad);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <init_Info+0xe0>)
 8001886:	f993 3000 	ldrsb.w	r3, [r3]
 800188a:	461a      	mov	r2, r3
 800188c:	491a      	ldr	r1, [pc, #104]	; (80018f8 <init_Info+0xec>)
 800188e:	4819      	ldr	r0, [pc, #100]	; (80018f4 <init_Info+0xe8>)
 8001890:	f004 fbc6 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <init_Info+0xe8>)
 8001896:	f7ff fe29 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 2);
 800189a:	2102      	movs	r1, #2
 800189c:	2000      	movs	r0, #0
 800189e:	f7ff fd9d 	bl	80013dc <lcd_put_cur>
	lcd_send_string("Luz: ");
 80018a2:	4816      	ldr	r0, [pc, #88]	; (80018fc <init_Info+0xf0>)
 80018a4:	f7ff fe22 	bl	80014ec <lcd_send_string>
	lcd_send_string( (getStat_rele() != 0) ? "APAGADA" : "PRENDIDA");
 80018a8:	f7ff fc36 	bl	8001118 <getStat_rele>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <init_Info+0xaa>
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <init_Info+0xf4>)
 80018b4:	e000      	b.n	80018b8 <init_Info+0xac>
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <init_Info+0xf8>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fe17 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 3);
 80018be:	2103      	movs	r1, #3
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fd8b 	bl	80013dc <lcd_put_cur>
	lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL");
 80018c6:	f7ff fb57 	bl	8000f78 <get_modoLuz>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <init_Info+0xc8>
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <init_Info+0xfc>)
 80018d2:	e000      	b.n	80018d6 <init_Info+0xca>
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <init_Info+0x100>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fe08 	bl	80014ec <lcd_send_string>
} //fin init_Info()
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	20000250 	.word	0x20000250
 80018e8:	20000258 	.word	0x20000258
 80018ec:	2000024c 	.word	0x2000024c
 80018f0:	08006864 	.word	0x08006864
 80018f4:	20000128 	.word	0x20000128
 80018f8:	08006874 	.word	0x08006874
 80018fc:	08006884 	.word	0x08006884
 8001900:	0800688c 	.word	0x0800688c
 8001904:	08006894 	.word	0x08006894
 8001908:	080068a0 	.word	0x080068a0
 800190c:	080068ac 	.word	0x080068ac

08001910 <init_Seleccion>:


void init_Seleccion (void){
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	lcd_clear();
 8001914:	f7ff fd4c 	bl	80013b0 <lcd_clear>
	lcd_put_cur(7, 0);
 8001918:	2100      	movs	r1, #0
 800191a:	2007      	movs	r0, #7
 800191c:	f7ff fd5e 	bl	80013dc <lcd_put_cur>
	lcd_send_string("MENU");
 8001920:	4819      	ldr	r0, [pc, #100]	; (8001988 <init_Seleccion+0x78>)
 8001922:	f7ff fde3 	bl	80014ec <lcd_send_string>
	lcd_put_cur(2, 2);
 8001926:	2102      	movs	r1, #2
 8001928:	2002      	movs	r0, #2
 800192a:	f7ff fd57 	bl	80013dc <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 800192e:	207f      	movs	r0, #127	; 0x7f
 8001930:	f7ff fd0a 	bl	8001348 <lcd_send_data>
	switch (cursor){
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <init_Seleccion+0x7c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d00c      	beq.n	8001956 <init_Seleccion+0x46>
 800193c:	2b02      	cmp	r3, #2
 800193e:	d012      	beq.n	8001966 <init_Seleccion+0x56>
 8001940:	2b00      	cmp	r3, #0
 8001942:	d000      	beq.n	8001946 <init_Seleccion+0x36>
		case 2:
			lcd_put_cur(4, 2);
			lcd_send_string("UMBRAL NOCHE");
		break;
		default:
		break;
 8001944:	e017      	b.n	8001976 <init_Seleccion+0x66>
			lcd_put_cur(4, 2);
 8001946:	2102      	movs	r1, #2
 8001948:	2004      	movs	r0, #4
 800194a:	f7ff fd47 	bl	80013dc <lcd_put_cur>
			lcd_send_string("MODO DE LUZ");
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <init_Seleccion+0x80>)
 8001950:	f7ff fdcc 	bl	80014ec <lcd_send_string>
		break;
 8001954:	e00f      	b.n	8001976 <init_Seleccion+0x66>
			lcd_put_cur(5, 2);
 8001956:	2102      	movs	r1, #2
 8001958:	2005      	movs	r0, #5
 800195a:	f7ff fd3f 	bl	80013dc <lcd_put_cur>
			lcd_send_string("UMBRAL DIA");
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <init_Seleccion+0x84>)
 8001960:	f7ff fdc4 	bl	80014ec <lcd_send_string>
		break;
 8001964:	e007      	b.n	8001976 <init_Seleccion+0x66>
			lcd_put_cur(4, 2);
 8001966:	2102      	movs	r1, #2
 8001968:	2004      	movs	r0, #4
 800196a:	f7ff fd37 	bl	80013dc <lcd_put_cur>
			lcd_send_string("UMBRAL NOCHE");
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <init_Seleccion+0x88>)
 8001970:	f7ff fdbc 	bl	80014ec <lcd_send_string>
		break;
 8001974:	bf00      	nop
	} //fin switch cursor
	lcd_put_cur(17, 2);
 8001976:	2102      	movs	r1, #2
 8001978:	2011      	movs	r0, #17
 800197a:	f7ff fd2f 	bl	80013dc <lcd_put_cur>
	lcd_send_data(0x7E); //->
 800197e:	207e      	movs	r0, #126	; 0x7e
 8001980:	f7ff fce2 	bl	8001348 <lcd_send_data>
} //fin init_Seleccion()
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	080068b4 	.word	0x080068b4
 800198c:	2000015e 	.word	0x2000015e
 8001990:	080068bc 	.word	0x080068bc
 8001994:	080068c8 	.word	0x080068c8
 8001998:	080068d4 	.word	0x080068d4

0800199c <init_ModoLuz>:


void init_ModoLuz (void){
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	lcd_clear();
 80019a0:	f7ff fd06 	bl	80013b0 <lcd_clear>
	lcd_put_cur(0, 0);
 80019a4:	2100      	movs	r1, #0
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fd18 	bl	80013dc <lcd_put_cur>
	lcd_send_string("MODO LUZ AUTOMATICA");
 80019ac:	4815      	ldr	r0, [pc, #84]	; (8001a04 <init_ModoLuz+0x68>)
 80019ae:	f7ff fd9d 	bl	80014ec <lcd_send_string>
	lcd_put_cur(4, 2);
 80019b2:	2102      	movs	r1, #2
 80019b4:	2004      	movs	r0, #4
 80019b6:	f7ff fd11 	bl	80013dc <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 80019ba:	207f      	movs	r0, #127	; 0x7f
 80019bc:	f7ff fcc4 	bl	8001348 <lcd_send_data>
	lcd_put_cur(9, 2);
 80019c0:	2102      	movs	r1, #2
 80019c2:	2009      	movs	r0, #9
 80019c4:	f7ff fd0a 	bl	80013dc <lcd_put_cur>
	modoLuz = get_modoLuz();
 80019c8:	f7ff fad6 	bl	8000f78 <get_modoLuz>
 80019cc:	4603      	mov	r3, r0
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <init_ModoLuz+0x6c>)
 80019d2:	701a      	strb	r2, [r3, #0]
	switch (modoLuz) {
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <init_ModoLuz+0x6c>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <init_ModoLuz+0x46>
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d004      	beq.n	80019ea <init_ModoLuz+0x4e>
		break;
		case 1:
			lcd_send_string("ON");
		break;
		default:
		break;
 80019e0:	e007      	b.n	80019f2 <init_ModoLuz+0x56>
			lcd_send_string("OFF");
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <init_ModoLuz+0x70>)
 80019e4:	f7ff fd82 	bl	80014ec <lcd_send_string>
		break;
 80019e8:	e003      	b.n	80019f2 <init_ModoLuz+0x56>
			lcd_send_string("ON");
 80019ea:	4809      	ldr	r0, [pc, #36]	; (8001a10 <init_ModoLuz+0x74>)
 80019ec:	f7ff fd7e 	bl	80014ec <lcd_send_string>
		break;
 80019f0:	bf00      	nop
	} //fin switch modoLuz
	lcd_put_cur(15, 2);
 80019f2:	2102      	movs	r1, #2
 80019f4:	200f      	movs	r0, #15
 80019f6:	f7ff fcf1 	bl	80013dc <lcd_put_cur>
	lcd_send_data(0x7E); //->
 80019fa:	207e      	movs	r0, #126	; 0x7e
 80019fc:	f7ff fca4 	bl	8001348 <lcd_send_data>
} //fin init_ModoLuz()
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	080068e4 	.word	0x080068e4
 8001a08:	2000024d 	.word	0x2000024d
 8001a0c:	080068f8 	.word	0x080068f8
 8001a10:	080068fc 	.word	0x080068fc

08001a14 <init_LdrPrende>:


void init_LdrPrende (void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af02      	add	r7, sp, #8
	lcd_clear();
 8001a1a:	f7ff fcc9 	bl	80013b0 <lcd_clear>
	lcd_put_cur(0, 0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fcdb 	bl	80013dc <lcd_put_cur>
	lcd_send_string("    UMBRAL NOCHE    ");
 8001a26:	4821      	ldr	r0, [pc, #132]	; (8001aac <init_LdrPrende+0x98>)
 8001a28:	f7ff fd60 	bl	80014ec <lcd_send_string>
	valorUmbral = get_umbralLDR(0);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fa5b 	bl	8000ee8 <get_umbralLDR>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <init_LdrPrende+0x9c>)
 8001a36:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fcce 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <init_LdrPrende+0x9c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	491b      	ldr	r1, [pc, #108]	; (8001ab4 <init_LdrPrende+0xa0>)
 8001a48:	481b      	ldr	r0, [pc, #108]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a4a:	f004 fae9 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001a4e:	481a      	ldr	r0, [pc, #104]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a50:	f7ff fd4c 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 2);
 8001a54:	2102      	movs	r1, #2
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fcc0 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 8001a5c:	f7ff fa3a 	bl	8000ed4 <get_ldr>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	4915      	ldr	r1, [pc, #84]	; (8001abc <init_LdrPrende+0xa8>)
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a68:	f004 fada 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001a6c:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a6e:	f7ff fd3d 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 3);
 8001a72:	2103      	movs	r1, #3
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff fcb1 	bl	80013dc <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001a7a:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <init_LdrPrende+0xac>)
 8001a7c:	f7ff fd36 	bl	80014ec <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <init_LdrPrende+0x9c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	237e      	movs	r3, #126	; 0x7e
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	227f      	movs	r2, #127	; 0x7f
 8001a8c:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <init_LdrPrende+0xb0>)
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a90:	f004 fac6 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <init_LdrPrende+0xa4>)
 8001a96:	f7ff fd29 	bl	80014ec <lcd_send_string>
	pantallaUmbral = 0;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <init_LdrPrende+0xb4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <init_LdrPrende+0xb8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
} //fin init_LdrPrende()
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	08006900 	.word	0x08006900
 8001ab0:	20000248 	.word	0x20000248
 8001ab4:	08006918 	.word	0x08006918
 8001ab8:	20000128 	.word	0x20000128
 8001abc:	08006930 	.word	0x08006930
 8001ac0:	08006944 	.word	0x08006944
 8001ac4:	08006954 	.word	0x08006954
 8001ac8:	2000015f 	.word	0x2000015f
 8001acc:	2000015a 	.word	0x2000015a

08001ad0 <init_LdrApaga>:


void init_LdrApaga (void){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af02      	add	r7, sp, #8
	lcd_clear();
 8001ad6:	f7ff fc6b 	bl	80013b0 <lcd_clear>
	lcd_put_cur(0, 0);
 8001ada:	2100      	movs	r1, #0
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff fc7d 	bl	80013dc <lcd_put_cur>
	lcd_send_string("     UMBRAL DIA     ");
 8001ae2:	4821      	ldr	r0, [pc, #132]	; (8001b68 <init_LdrApaga+0x98>)
 8001ae4:	f7ff fd02 	bl	80014ec <lcd_send_string>
	valorUmbral = get_umbralLDR(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff f9fd 	bl	8000ee8 <get_umbralLDR>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <init_LdrApaga+0x9c>)
 8001af2:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 8001af4:	2101      	movs	r1, #1
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fc70 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <init_LdrApaga+0x9c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	491b      	ldr	r1, [pc, #108]	; (8001b70 <init_LdrApaga+0xa0>)
 8001b04:	481b      	ldr	r0, [pc, #108]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b06:	f004 fa8b 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001b0a:	481a      	ldr	r0, [pc, #104]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b0c:	f7ff fcee 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 2);
 8001b10:	2102      	movs	r1, #2
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fc62 	bl	80013dc <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 8001b18:	f7ff f9dc 	bl	8000ed4 <get_ldr>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4915      	ldr	r1, [pc, #84]	; (8001b78 <init_LdrApaga+0xa8>)
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b24:	f004 fa7c 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b2a:	f7ff fcdf 	bl	80014ec <lcd_send_string>
	lcd_put_cur(0, 3);
 8001b2e:	2103      	movs	r1, #3
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fc53 	bl	80013dc <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <init_LdrApaga+0xac>)
 8001b38:	f7ff fcd8 	bl	80014ec <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <init_LdrApaga+0x9c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	237e      	movs	r3, #126	; 0x7e
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	227f      	movs	r2, #127	; 0x7f
 8001b48:	490d      	ldr	r1, [pc, #52]	; (8001b80 <init_LdrApaga+0xb0>)
 8001b4a:	480a      	ldr	r0, [pc, #40]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b4c:	f004 fa68 	bl	8006020 <siprintf>
	lcd_send_string(texto);
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <init_LdrApaga+0xa4>)
 8001b52:	f7ff fccb 	bl	80014ec <lcd_send_string>
	pantallaUmbral = 0;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <init_LdrApaga+0xb4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <init_LdrApaga+0xb8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	801a      	strh	r2, [r3, #0]
} //fin init_LdrApaga()
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08006960 	.word	0x08006960
 8001b6c:	20000248 	.word	0x20000248
 8001b70:	08006918 	.word	0x08006918
 8001b74:	20000128 	.word	0x20000128
 8001b78:	08006930 	.word	0x08006930
 8001b7c:	08006944 	.word	0x08006944
 8001b80:	08006954 	.word	0x08006954
 8001b84:	2000015f 	.word	0x2000015f
 8001b88:	2000015a 	.word	0x2000015a

08001b8c <acc_Info>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_Info (void){
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0

	if (flag_infoDHT != 0){
 8001b92:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <acc_Info+0x154>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d06c      	beq.n	8001c74 <acc_Info+0xe8>
		sensorDHT = get_datosDHT();
 8001b9a:	4c52      	ldr	r4, [pc, #328]	; (8001ce4 <acc_Info+0x158>)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f970 	bl	8000e84 <get_datosDHT>
 8001ba4:	4622      	mov	r2, r4
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bac:	e882 0003 	stmia.w	r2, {r0, r1}
		temperatura = sensorDHT.temp;
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <acc_Info+0x158>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fd27 	bl	8000608 <__aeabi_f2iz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b25a      	sxtb	r2, r3
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <acc_Info+0x15c>)
 8001bc0:	701a      	strb	r2, [r3, #0]
		humedad = sensorDHT.hum;
 8001bc2:	4b48      	ldr	r3, [pc, #288]	; (8001ce4 <acc_Info+0x158>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fd1e 	bl	8000608 <__aeabi_f2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b25a      	sxtb	r2, r3
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <acc_Info+0x160>)
 8001bd2:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(6, 0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2006      	movs	r0, #6
 8001bd8:	f7ff fc00 	bl	80013dc <lcd_put_cur>
		sprintf(texto, "%02d  ", temperatura);
 8001bdc:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <acc_Info+0x15c>)
 8001bde:	f993 3000 	ldrsb.w	r3, [r3]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4942      	ldr	r1, [pc, #264]	; (8001cf0 <acc_Info+0x164>)
 8001be6:	4843      	ldr	r0, [pc, #268]	; (8001cf4 <acc_Info+0x168>)
 8001be8:	f004 fa1a 	bl	8006020 <siprintf>
		lcd_send_string(texto);
 8001bec:	4841      	ldr	r0, [pc, #260]	; (8001cf4 <acc_Info+0x168>)
 8001bee:	f7ff fc7d 	bl	80014ec <lcd_send_string>
		lcd_put_cur(8, 0);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2008      	movs	r0, #8
 8001bf6:	f7ff fbf1 	bl	80013dc <lcd_put_cur>
		lcd_send_customChar(2); //grados
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7ff fba4 	bl	8001348 <lcd_send_data>
		lcd_put_cur(9, 0);
 8001c00:	2100      	movs	r1, #0
 8001c02:	2009      	movs	r0, #9
 8001c04:	f7ff fbea 	bl	80013dc <lcd_put_cur>
		lcd_send_string("C");
 8001c08:	483b      	ldr	r0, [pc, #236]	; (8001cf8 <acc_Info+0x16c>)
 8001c0a:	f7ff fc6f 	bl	80014ec <lcd_send_string>

		lcd_put_cur(9, 1);
 8001c0e:	2101      	movs	r1, #1
 8001c10:	2009      	movs	r0, #9
 8001c12:	f7ff fbe3 	bl	80013dc <lcd_put_cur>
		sprintf(texto, "%02d%%  ", humedad);
 8001c16:	4b35      	ldr	r3, [pc, #212]	; (8001cec <acc_Info+0x160>)
 8001c18:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4937      	ldr	r1, [pc, #220]	; (8001cfc <acc_Info+0x170>)
 8001c20:	4834      	ldr	r0, [pc, #208]	; (8001cf4 <acc_Info+0x168>)
 8001c22:	f004 f9fd 	bl	8006020 <siprintf>
		lcd_send_string(texto);
 8001c26:	4833      	ldr	r0, [pc, #204]	; (8001cf4 <acc_Info+0x168>)
 8001c28:	f7ff fc60 	bl	80014ec <lcd_send_string>

		lcd_put_cur(5, 2);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f7ff fbd4 	bl	80013dc <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 8001c34:	f7ff fa70 	bl	8001118 <getStat_rele>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <acc_Info+0xb6>
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <acc_Info+0x174>)
 8001c40:	e000      	b.n	8001c44 <acc_Info+0xb8>
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <acc_Info+0x178>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fc51 	bl	80014ec <lcd_send_string>
		lcd_put_cur(0, 3);
 8001c4a:	2103      	movs	r1, #3
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff fbc5 	bl	80013dc <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8001c52:	f7ff f991 	bl	8000f78 <get_modoLuz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <acc_Info+0xd4>
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <acc_Info+0x17c>)
 8001c5e:	e000      	b.n	8001c62 <acc_Info+0xd6>
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <acc_Info+0x180>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc42 	bl	80014ec <lcd_send_string>

		flag_infoDHT = 0;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <acc_Info+0x154>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
		flag_infoModo = 0;
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <acc_Info+0x184>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
	} //fin if flag_infoDHT

	if (flag_infoModo != 0){
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <acc_Info+0x184>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <acc_Info+0x132>
		lcd_put_cur(5, 2);
 8001c7c:	2102      	movs	r1, #2
 8001c7e:	2005      	movs	r0, #5
 8001c80:	f7ff fbac 	bl	80013dc <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 8001c84:	f7ff fa48 	bl	8001118 <getStat_rele>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <acc_Info+0x106>
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <acc_Info+0x174>)
 8001c90:	e000      	b.n	8001c94 <acc_Info+0x108>
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <acc_Info+0x178>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc29 	bl	80014ec <lcd_send_string>
		lcd_put_cur(0, 3);
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fb9d 	bl	80013dc <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8001ca2:	f7ff f969 	bl	8000f78 <get_modoLuz>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <acc_Info+0x124>
 8001cac:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <acc_Info+0x17c>)
 8001cae:	e000      	b.n	8001cb2 <acc_Info+0x126>
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <acc_Info+0x180>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fc1a 	bl	80014ec <lcd_send_string>

		flag_infoModo = 0;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <acc_Info+0x184>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
	}

	if (getStatBoton(IN_OK) == FALL){
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f7fe ff18 	bl	8000af4 <getStatBoton>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d106      	bne.n	8001cd8 <acc_Info+0x14c>
		menuActual = &menu[MENU_SELECCION];
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <acc_Info+0x188>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <acc_Info+0x18c>)
 8001cce:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <acc_Info+0x188>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_Info()
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	2000015c 	.word	0x2000015c
 8001ce4:	20000250 	.word	0x20000250
 8001ce8:	20000258 	.word	0x20000258
 8001cec:	2000024c 	.word	0x2000024c
 8001cf0:	08006978 	.word	0x08006978
 8001cf4:	20000128 	.word	0x20000128
 8001cf8:	08006980 	.word	0x08006980
 8001cfc:	08006984 	.word	0x08006984
 8001d00:	08006990 	.word	0x08006990
 8001d04:	08006894 	.word	0x08006894
 8001d08:	080068a0 	.word	0x080068a0
 8001d0c:	0800699c 	.word	0x0800699c
 8001d10:	2000015d 	.word	0x2000015d
 8001d14:	20000240 	.word	0x20000240
 8001d18:	2000004c 	.word	0x2000004c

08001d1c <acc_Seleccion>:


void acc_Seleccion (void){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_BACK) == FALL){
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7fe fee7 	bl	8000af4 <getStatBoton>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d106      	bne.n	8001d3a <acc_Seleccion+0x1e>
		menuActual = &menu[MENU_INFO];
 8001d2c:	4b40      	ldr	r3, [pc, #256]	; (8001e30 <acc_Seleccion+0x114>)
 8001d2e:	4a41      	ldr	r2, [pc, #260]	; (8001e34 <acc_Seleccion+0x118>)
 8001d30:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <acc_Seleccion+0x114>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7fe feda 	bl	8000af4 <getStatBoton>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d125      	bne.n	8001d92 <acc_Seleccion+0x76>
		cursor--;
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <acc_Seleccion+0x11c>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <acc_Seleccion+0x11c>)
 8001d50:	701a      	strb	r2, [r3, #0]
		if (cursor > 2) cursor = 2;
 8001d52:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <acc_Seleccion+0x11c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d902      	bls.n	8001d60 <acc_Seleccion+0x44>
 8001d5a:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <acc_Seleccion+0x11c>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 8001d60:	2102      	movs	r1, #2
 8001d62:	2003      	movs	r0, #3
 8001d64:	f7ff fb3a 	bl	80013dc <lcd_put_cur>
		switch (cursor){
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <acc_Seleccion+0x11c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d008      	beq.n	8001d82 <acc_Seleccion+0x66>
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d00a      	beq.n	8001d8a <acc_Seleccion+0x6e>
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d000      	beq.n	8001d7a <acc_Seleccion+0x5e>
			break;
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
			break;
			default:
			break;
 8001d78:	e00c      	b.n	8001d94 <acc_Seleccion+0x78>
				lcd_send_string(" MODO DE LUZ  ");
 8001d7a:	4830      	ldr	r0, [pc, #192]	; (8001e3c <acc_Seleccion+0x120>)
 8001d7c:	f7ff fbb6 	bl	80014ec <lcd_send_string>
			break;
 8001d80:	e008      	b.n	8001d94 <acc_Seleccion+0x78>
				lcd_send_string("  UMBRAL DIA  ");
 8001d82:	482f      	ldr	r0, [pc, #188]	; (8001e40 <acc_Seleccion+0x124>)
 8001d84:	f7ff fbb2 	bl	80014ec <lcd_send_string>
			break;
 8001d88:	e004      	b.n	8001d94 <acc_Seleccion+0x78>
				lcd_send_string(" UMBRAL NOCHE ");
 8001d8a:	482e      	ldr	r0, [pc, #184]	; (8001e44 <acc_Seleccion+0x128>)
 8001d8c:	f7ff fbae 	bl	80014ec <lcd_send_string>
			break;
 8001d90:	e000      	b.n	8001d94 <acc_Seleccion+0x78>
		} //fin switch cursor
	} //fin if IN_LEFT
 8001d92:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe fead 	bl	8000af4 <getStatBoton>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d125      	bne.n	8001dec <acc_Seleccion+0xd0>
		cursor++;
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <acc_Seleccion+0x11c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <acc_Seleccion+0x11c>)
 8001daa:	701a      	strb	r2, [r3, #0]
		if (cursor > 2) cursor = 0;
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <acc_Seleccion+0x11c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d902      	bls.n	8001dba <acc_Seleccion+0x9e>
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <acc_Seleccion+0x11c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 8001dba:	2102      	movs	r1, #2
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f7ff fb0d 	bl	80013dc <lcd_put_cur>
		switch (cursor){
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <acc_Seleccion+0x11c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d008      	beq.n	8001ddc <acc_Seleccion+0xc0>
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d00a      	beq.n	8001de4 <acc_Seleccion+0xc8>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d000      	beq.n	8001dd4 <acc_Seleccion+0xb8>
			break;
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
			break;
			default:
			break;
 8001dd2:	e00c      	b.n	8001dee <acc_Seleccion+0xd2>
				lcd_send_string(" MODO DE LUZ  ");
 8001dd4:	4819      	ldr	r0, [pc, #100]	; (8001e3c <acc_Seleccion+0x120>)
 8001dd6:	f7ff fb89 	bl	80014ec <lcd_send_string>
			break;
 8001dda:	e008      	b.n	8001dee <acc_Seleccion+0xd2>
				lcd_send_string("  UMBRAL DIA  ");
 8001ddc:	4818      	ldr	r0, [pc, #96]	; (8001e40 <acc_Seleccion+0x124>)
 8001dde:	f7ff fb85 	bl	80014ec <lcd_send_string>
			break;
 8001de2:	e004      	b.n	8001dee <acc_Seleccion+0xd2>
				lcd_send_string(" UMBRAL NOCHE ");
 8001de4:	4817      	ldr	r0, [pc, #92]	; (8001e44 <acc_Seleccion+0x128>)
 8001de6:	f7ff fb81 	bl	80014ec <lcd_send_string>
			break;
 8001dea:	e000      	b.n	8001dee <acc_Seleccion+0xd2>
		} //fin switch cursor
	} //fin if IN_RIGHT
 8001dec:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 8001dee:	2003      	movs	r0, #3
 8001df0:	f7fe fe80 	bl	8000af4 <getStatBoton>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d118      	bne.n	8001e2c <acc_Seleccion+0x110>
		switch (cursor){
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <acc_Seleccion+0x11c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d008      	beq.n	8001e14 <acc_Seleccion+0xf8>
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d00a      	beq.n	8001e1c <acc_Seleccion+0x100>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d000      	beq.n	8001e0c <acc_Seleccion+0xf0>
			break;
			case 2:
				menuActual = &menu[MENU_LDR_PRENDE];
			break;
			default:
			break;
 8001e0a:	e00b      	b.n	8001e24 <acc_Seleccion+0x108>
				menuActual = &menu[MENU_MODO_LUZ];
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <acc_Seleccion+0x114>)
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <acc_Seleccion+0x12c>)
 8001e10:	601a      	str	r2, [r3, #0]
			break;
 8001e12:	e007      	b.n	8001e24 <acc_Seleccion+0x108>
				menuActual = &menu[MENU_LDR_APAGA];
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <acc_Seleccion+0x114>)
 8001e16:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <acc_Seleccion+0x130>)
 8001e18:	601a      	str	r2, [r3, #0]
			break;
 8001e1a:	e003      	b.n	8001e24 <acc_Seleccion+0x108>
				menuActual = &menu[MENU_LDR_PRENDE];
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <acc_Seleccion+0x114>)
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <acc_Seleccion+0x134>)
 8001e20:	601a      	str	r2, [r3, #0]
			break;
 8001e22:	bf00      	nop
		} //fin switch cursor
		menuActual->inicia_menu();
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <acc_Seleccion+0x114>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4798      	blx	r3
	} //fin if IN_OK

} //fin acc_Seleccion()
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000240 	.word	0x20000240
 8001e34:	2000003c 	.word	0x2000003c
 8001e38:	2000015e 	.word	0x2000015e
 8001e3c:	080069a8 	.word	0x080069a8
 8001e40:	080069b8 	.word	0x080069b8
 8001e44:	080069c8 	.word	0x080069c8
 8001e48:	2000005c 	.word	0x2000005c
 8001e4c:	2000007c 	.word	0x2000007c
 8001e50:	2000006c 	.word	0x2000006c

08001e54 <acc_ModoLuz>:


void acc_ModoLuz (void){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	if (getStatBoton(IN_BACK) == FALL){
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7fe fe4b 	bl	8000af4 <getStatBoton>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d106      	bne.n	8001e72 <acc_ModoLuz+0x1e>
		menuActual = &menu[MENU_SELECCION];
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <acc_ModoLuz+0xdc>)
 8001e66:	4a33      	ldr	r2, [pc, #204]	; (8001f34 <acc_ModoLuz+0xe0>)
 8001e68:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <acc_ModoLuz+0xdc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7fe fe3e 	bl	8000af4 <getStatBoton>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d11d      	bne.n	8001eba <acc_ModoLuz+0x66>
		if (modoLuz != 0){
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <acc_ModoLuz+0x3a>
			modoLuz = 0;
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	e002      	b.n	8001e94 <acc_ModoLuz+0x40>
		}else{
			modoLuz = 1;
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 8001e94:	2102      	movs	r1, #2
 8001e96:	2009      	movs	r0, #9
 8001e98:	f7ff faa0 	bl	80013dc <lcd_put_cur>
		switch (modoLuz) {
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d002      	beq.n	8001eaa <acc_ModoLuz+0x56>
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d004      	beq.n	8001eb2 <acc_ModoLuz+0x5e>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 8001ea8:	e008      	b.n	8001ebc <acc_ModoLuz+0x68>
				lcd_send_string("OFF");
 8001eaa:	4824      	ldr	r0, [pc, #144]	; (8001f3c <acc_ModoLuz+0xe8>)
 8001eac:	f7ff fb1e 	bl	80014ec <lcd_send_string>
			break;
 8001eb0:	e004      	b.n	8001ebc <acc_ModoLuz+0x68>
				lcd_send_string("ON ");
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <acc_ModoLuz+0xec>)
 8001eb4:	f7ff fb1a 	bl	80014ec <lcd_send_string>
			break;
 8001eb8:	e000      	b.n	8001ebc <acc_ModoLuz+0x68>
		} //fin switch modoLuz
	} //fin if IN_LEFT
 8001eba:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7fe fe19 	bl	8000af4 <getStatBoton>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d11d      	bne.n	8001f04 <acc_ModoLuz+0xb0>
		if (modoLuz != 0){
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <acc_ModoLuz+0x84>
			modoLuz = 0;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
 8001ed6:	e002      	b.n	8001ede <acc_ModoLuz+0x8a>
		}else{
			modoLuz = 1;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 8001ede:	2102      	movs	r1, #2
 8001ee0:	2009      	movs	r0, #9
 8001ee2:	f7ff fa7b 	bl	80013dc <lcd_put_cur>
		switch (modoLuz) {
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <acc_ModoLuz+0xa0>
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d004      	beq.n	8001efc <acc_ModoLuz+0xa8>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 8001ef2:	e008      	b.n	8001f06 <acc_ModoLuz+0xb2>
				lcd_send_string("OFF");
 8001ef4:	4811      	ldr	r0, [pc, #68]	; (8001f3c <acc_ModoLuz+0xe8>)
 8001ef6:	f7ff faf9 	bl	80014ec <lcd_send_string>
			break;
 8001efa:	e004      	b.n	8001f06 <acc_ModoLuz+0xb2>
				lcd_send_string("ON ");
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <acc_ModoLuz+0xec>)
 8001efe:	f7ff faf5 	bl	80014ec <lcd_send_string>
			break;
 8001f02:	e000      	b.n	8001f06 <acc_ModoLuz+0xb2>
		} //fin switch modoLuz
	} //fin if IN_RIGHT
 8001f04:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 8001f06:	2003      	movs	r0, #3
 8001f08:	f7fe fdf4 	bl	8000af4 <getStatBoton>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d10b      	bne.n	8001f2a <acc_ModoLuz+0xd6>
//		if (modoLuz != 0){
//			setOutput(OUT_MODO, 0); //logica negativa
//		}else{
//			setOutput(OUT_MODO, 1); //logica negativa
//		}
		set_modoLuz(modoLuz);
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <acc_ModoLuz+0xe4>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff f814 	bl	8000f44 <set_modoLuz>

		menuActual = &menu[MENU_SELECCION];
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <acc_ModoLuz+0xdc>)
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <acc_ModoLuz+0xe0>)
 8001f20:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <acc_ModoLuz+0xdc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_ModoLuz()
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000240 	.word	0x20000240
 8001f34:	2000004c 	.word	0x2000004c
 8001f38:	2000024d 	.word	0x2000024d
 8001f3c:	080068f8 	.word	0x080068f8
 8001f40:	080069d8 	.word	0x080069d8

08001f44 <acc_LdrPrende>:


void acc_LdrPrende (void){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 8001f48:	4b93      	ldr	r3, [pc, #588]	; (8002198 <acc_LdrPrende+0x254>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <acc_LdrPrende+0x14>
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	f000 8101 	beq.w	8002158 <acc_LdrPrende+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 8001f56:	e11c      	b.n	8002192 <acc_LdrPrende+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f7fe fdcb 	bl	8000af4 <getStatBoton>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d107      	bne.n	8001f74 <acc_LdrPrende+0x30>
				menuActual = &menu[MENU_SELECCION];
 8001f64:	4b8d      	ldr	r3, [pc, #564]	; (800219c <acc_LdrPrende+0x258>)
 8001f66:	4a8e      	ldr	r2, [pc, #568]	; (80021a0 <acc_LdrPrende+0x25c>)
 8001f68:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001f6a:	4b8c      	ldr	r3, [pc, #560]	; (800219c <acc_LdrPrende+0x258>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4798      	blx	r3
				break;
 8001f72:	e10e      	b.n	8002192 <acc_LdrPrende+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7fe fdbd 	bl	8000af4 <getStatBoton>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d004      	beq.n	8001f8a <acc_LdrPrende+0x46>
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d053      	beq.n	800202c <acc_LdrPrende+0xe8>
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d021      	beq.n	8001fcc <acc_LdrPrende+0x88>
				break;
 8001f88:	e055      	b.n	8002036 <acc_LdrPrende+0xf2>
					valorUmbral--;
 8001f8a:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <acc_LdrPrende+0x260>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	4a84      	ldr	r2, [pc, #528]	; (80021a4 <acc_LdrPrende+0x260>)
 8001f92:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <acc_LdrPrende+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d903      	bls.n	8001fa8 <acc_LdrPrende+0x64>
 8001fa0:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <acc_LdrPrende+0x260>)
 8001fa2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fa6:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8001fa8:	2103      	movs	r1, #3
 8001faa:	200e      	movs	r0, #14
 8001fac:	f7ff fa16 	bl	80013dc <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8001fb0:	4b7c      	ldr	r3, [pc, #496]	; (80021a4 <acc_LdrPrende+0x260>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	497c      	ldr	r1, [pc, #496]	; (80021a8 <acc_LdrPrende+0x264>)
 8001fb8:	487c      	ldr	r0, [pc, #496]	; (80021ac <acc_LdrPrende+0x268>)
 8001fba:	f004 f831 	bl	8006020 <siprintf>
					lcd_send_string(texto);
 8001fbe:	487b      	ldr	r0, [pc, #492]	; (80021ac <acc_LdrPrende+0x268>)
 8001fc0:	f7ff fa94 	bl	80014ec <lcd_send_string>
					holdBoton = 0;
 8001fc4:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <acc_LdrPrende+0x26c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				break;
 8001fca:	e034      	b.n	8002036 <acc_LdrPrende+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 8001fcc:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <acc_LdrPrende+0x26c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b96      	cmp	r3, #150	; 0x96
 8001fd2:	d902      	bls.n	8001fda <acc_LdrPrende+0x96>
						flag_holdBoton = 1;
 8001fd4:	4b77      	ldr	r3, [pc, #476]	; (80021b4 <acc_LdrPrende+0x270>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <acc_LdrPrende+0x270>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d028      	beq.n	8002034 <acc_LdrPrende+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 8001fe2:	4b75      	ldr	r3, [pc, #468]	; (80021b8 <acc_LdrPrende+0x274>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b18      	cmp	r3, #24
 8001fe8:	d924      	bls.n	8002034 <acc_LdrPrende+0xf0>
							valorUmbral -= 10;
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <acc_LdrPrende+0x260>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3b0a      	subs	r3, #10
 8001ff0:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <acc_LdrPrende+0x260>)
 8001ff2:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 8001ff4:	4b6b      	ldr	r3, [pc, #428]	; (80021a4 <acc_LdrPrende+0x260>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d903      	bls.n	8002008 <acc_LdrPrende+0xc4>
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <acc_LdrPrende+0x260>)
 8002002:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002006:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002008:	2103      	movs	r1, #3
 800200a:	200e      	movs	r0, #14
 800200c:	f7ff f9e6 	bl	80013dc <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <acc_LdrPrende+0x260>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4964      	ldr	r1, [pc, #400]	; (80021a8 <acc_LdrPrende+0x264>)
 8002018:	4864      	ldr	r0, [pc, #400]	; (80021ac <acc_LdrPrende+0x268>)
 800201a:	f004 f801 	bl	8006020 <siprintf>
							lcd_send_string(texto);
 800201e:	4863      	ldr	r0, [pc, #396]	; (80021ac <acc_LdrPrende+0x268>)
 8002020:	f7ff fa64 	bl	80014ec <lcd_send_string>
							repitePulso = 0;
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <acc_LdrPrende+0x274>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
				break;
 800202a:	e003      	b.n	8002034 <acc_LdrPrende+0xf0>
					flag_holdBoton = 0;
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <acc_LdrPrende+0x270>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
				break;
 8002032:	e000      	b.n	8002036 <acc_LdrPrende+0xf2>
				break;
 8002034:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 8002036:	2001      	movs	r0, #1
 8002038:	f7fe fd5c 	bl	8000af4 <getStatBoton>
 800203c:	4603      	mov	r3, r0
 800203e:	2b02      	cmp	r3, #2
 8002040:	d004      	beq.n	800204c <acc_LdrPrende+0x108>
 8002042:	2b03      	cmp	r3, #3
 8002044:	d051      	beq.n	80020ea <acc_LdrPrende+0x1a6>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d020      	beq.n	800208c <acc_LdrPrende+0x148>
				break;
 800204a:	e053      	b.n	80020f4 <acc_LdrPrende+0x1b0>
					valorUmbral++;
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <acc_LdrPrende+0x260>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	4a54      	ldr	r2, [pc, #336]	; (80021a4 <acc_LdrPrende+0x260>)
 8002054:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <acc_LdrPrende+0x260>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800205e:	4293      	cmp	r3, r2
 8002060:	d902      	bls.n	8002068 <acc_LdrPrende+0x124>
 8002062:	4b50      	ldr	r3, [pc, #320]	; (80021a4 <acc_LdrPrende+0x260>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8002068:	2103      	movs	r1, #3
 800206a:	200e      	movs	r0, #14
 800206c:	f7ff f9b6 	bl	80013dc <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <acc_LdrPrende+0x260>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	494c      	ldr	r1, [pc, #304]	; (80021a8 <acc_LdrPrende+0x264>)
 8002078:	484c      	ldr	r0, [pc, #304]	; (80021ac <acc_LdrPrende+0x268>)
 800207a:	f003 ffd1 	bl	8006020 <siprintf>
					lcd_send_string(texto);
 800207e:	484b      	ldr	r0, [pc, #300]	; (80021ac <acc_LdrPrende+0x268>)
 8002080:	f7ff fa34 	bl	80014ec <lcd_send_string>
					holdBoton = 0;
 8002084:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <acc_LdrPrende+0x26c>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
				break;
 800208a:	e033      	b.n	80020f4 <acc_LdrPrende+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 800208c:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <acc_LdrPrende+0x26c>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b96      	cmp	r3, #150	; 0x96
 8002092:	d902      	bls.n	800209a <acc_LdrPrende+0x156>
						flag_holdBoton = 1;
 8002094:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <acc_LdrPrende+0x270>)
 8002096:	2201      	movs	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 800209a:	4b46      	ldr	r3, [pc, #280]	; (80021b4 <acc_LdrPrende+0x270>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d027      	beq.n	80020f2 <acc_LdrPrende+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <acc_LdrPrende+0x274>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b18      	cmp	r3, #24
 80020a8:	d923      	bls.n	80020f2 <acc_LdrPrende+0x1ae>
							valorUmbral += 10;
 80020aa:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <acc_LdrPrende+0x260>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	330a      	adds	r3, #10
 80020b0:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <acc_LdrPrende+0x260>)
 80020b2:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 80020b4:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <acc_LdrPrende+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80020bc:	4293      	cmp	r3, r2
 80020be:	d902      	bls.n	80020c6 <acc_LdrPrende+0x182>
 80020c0:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <acc_LdrPrende+0x260>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 80020c6:	2103      	movs	r1, #3
 80020c8:	200e      	movs	r0, #14
 80020ca:	f7ff f987 	bl	80013dc <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 80020ce:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <acc_LdrPrende+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	4934      	ldr	r1, [pc, #208]	; (80021a8 <acc_LdrPrende+0x264>)
 80020d6:	4835      	ldr	r0, [pc, #212]	; (80021ac <acc_LdrPrende+0x268>)
 80020d8:	f003 ffa2 	bl	8006020 <siprintf>
							lcd_send_string(texto);
 80020dc:	4833      	ldr	r0, [pc, #204]	; (80021ac <acc_LdrPrende+0x268>)
 80020de:	f7ff fa05 	bl	80014ec <lcd_send_string>
							repitePulso = 0;
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <acc_LdrPrende+0x274>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
				break;
 80020e8:	e003      	b.n	80020f2 <acc_LdrPrende+0x1ae>
					flag_holdBoton = 0;
 80020ea:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <acc_LdrPrende+0x270>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
				break;
 80020f0:	e000      	b.n	80020f4 <acc_LdrPrende+0x1b0>
				break;
 80020f2:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <acc_LdrPrende+0x278>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2b63      	cmp	r3, #99	; 0x63
 80020fa:	d911      	bls.n	8002120 <acc_LdrPrende+0x1dc>
				lcd_put_cur(14, 2);
 80020fc:	2102      	movs	r1, #2
 80020fe:	200e      	movs	r0, #14
 8002100:	f7ff f96c 	bl	80013dc <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 8002104:	f7fe fee6 	bl	8000ed4 <get_ldr>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	4926      	ldr	r1, [pc, #152]	; (80021a8 <acc_LdrPrende+0x264>)
 800210e:	4827      	ldr	r0, [pc, #156]	; (80021ac <acc_LdrPrende+0x268>)
 8002110:	f003 ff86 	bl	8006020 <siprintf>
				lcd_send_string(texto);
 8002114:	4825      	ldr	r0, [pc, #148]	; (80021ac <acc_LdrPrende+0x268>)
 8002116:	f7ff f9e9 	bl	80014ec <lcd_send_string>
				timeOut_pantalla = 0;
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <acc_LdrPrende+0x278>)
 800211c:	2200      	movs	r2, #0
 800211e:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 8002120:	2003      	movs	r0, #3
 8002122:	f7fe fce7 	bl	8000af4 <getStatBoton>
 8002126:	4603      	mov	r3, r0
 8002128:	2b02      	cmp	r3, #2
 800212a:	d12f      	bne.n	800218c <acc_LdrPrende+0x248>
				set_umbralLDR(0, valorUmbral);
 800212c:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <acc_LdrPrende+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	2000      	movs	r0, #0
 8002134:	f7fe feee 	bl	8000f14 <set_umbralLDR>
				lcd_clear();
 8002138:	f7ff f93a 	bl	80013b0 <lcd_clear>
				lcd_put_cur(0, 1);
 800213c:	2101      	movs	r1, #1
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff f94c 	bl	80013dc <lcd_put_cur>
				lcd_send_string("UMBRAL NOCHE GRABADO");
 8002144:	481e      	ldr	r0, [pc, #120]	; (80021c0 <acc_LdrPrende+0x27c>)
 8002146:	f7ff f9d1 	bl	80014ec <lcd_send_string>
				pantallaUmbral = 1;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <acc_LdrPrende+0x254>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <acc_LdrPrende+0x278>)
 8002152:	2200      	movs	r2, #0
 8002154:	801a      	strh	r2, [r3, #0]
				break;
 8002156:	e01c      	b.n	8002192 <acc_LdrPrende+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <acc_LdrPrende+0x278>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002160:	d306      	bcc.n	8002170 <acc_LdrPrende+0x22c>
				menuActual = &menu[MENU_SELECCION];
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <acc_LdrPrende+0x258>)
 8002164:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <acc_LdrPrende+0x25c>)
 8002166:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <acc_LdrPrende+0x258>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 8002170:	2002      	movs	r0, #2
 8002172:	f7fe fcbf 	bl	8000af4 <getStatBoton>
 8002176:	4603      	mov	r3, r0
 8002178:	2b02      	cmp	r3, #2
 800217a:	d109      	bne.n	8002190 <acc_LdrPrende+0x24c>
				menuActual = &menu[MENU_SELECCION];
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <acc_LdrPrende+0x258>)
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <acc_LdrPrende+0x25c>)
 8002180:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <acc_LdrPrende+0x258>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4798      	blx	r3
		break;
 800218a:	e001      	b.n	8002190 <acc_LdrPrende+0x24c>
		break;
 800218c:	bf00      	nop
 800218e:	e000      	b.n	8002192 <acc_LdrPrende+0x24e>
		break;
 8002190:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrPrende()
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000015f 	.word	0x2000015f
 800219c:	20000240 	.word	0x20000240
 80021a0:	2000004c 	.word	0x2000004c
 80021a4:	20000248 	.word	0x20000248
 80021a8:	080069dc 	.word	0x080069dc
 80021ac:	20000128 	.word	0x20000128
 80021b0:	20000160 	.word	0x20000160
 80021b4:	20000161 	.word	0x20000161
 80021b8:	20000162 	.word	0x20000162
 80021bc:	2000015a 	.word	0x2000015a
 80021c0:	080069e4 	.word	0x080069e4

080021c4 <acc_LdrApaga>:


void acc_LdrApaga (void){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 80021c8:	4b93      	ldr	r3, [pc, #588]	; (8002418 <acc_LdrApaga+0x254>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <acc_LdrApaga+0x14>
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f000 8101 	beq.w	80023d8 <acc_LdrApaga+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 80021d6:	e11c      	b.n	8002412 <acc_LdrApaga+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 80021d8:	2002      	movs	r0, #2
 80021da:	f7fe fc8b 	bl	8000af4 <getStatBoton>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d107      	bne.n	80021f4 <acc_LdrApaga+0x30>
				menuActual = &menu[MENU_SELECCION];
 80021e4:	4b8d      	ldr	r3, [pc, #564]	; (800241c <acc_LdrApaga+0x258>)
 80021e6:	4a8e      	ldr	r2, [pc, #568]	; (8002420 <acc_LdrApaga+0x25c>)
 80021e8:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80021ea:	4b8c      	ldr	r3, [pc, #560]	; (800241c <acc_LdrApaga+0x258>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4798      	blx	r3
				break;
 80021f2:	e10e      	b.n	8002412 <acc_LdrApaga+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe fc7d 	bl	8000af4 <getStatBoton>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d004      	beq.n	800220a <acc_LdrApaga+0x46>
 8002200:	2b03      	cmp	r3, #3
 8002202:	d053      	beq.n	80022ac <acc_LdrApaga+0xe8>
 8002204:	2b00      	cmp	r3, #0
 8002206:	d021      	beq.n	800224c <acc_LdrApaga+0x88>
				break;
 8002208:	e055      	b.n	80022b6 <acc_LdrApaga+0xf2>
					valorUmbral--;
 800220a:	4b86      	ldr	r3, [pc, #536]	; (8002424 <acc_LdrApaga+0x260>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a84      	ldr	r2, [pc, #528]	; (8002424 <acc_LdrApaga+0x260>)
 8002212:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 8002214:	4b83      	ldr	r3, [pc, #524]	; (8002424 <acc_LdrApaga+0x260>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800221c:	4293      	cmp	r3, r2
 800221e:	d903      	bls.n	8002228 <acc_LdrApaga+0x64>
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <acc_LdrApaga+0x260>)
 8002222:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002226:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8002228:	2103      	movs	r1, #3
 800222a:	200e      	movs	r0, #14
 800222c:	f7ff f8d6 	bl	80013dc <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8002230:	4b7c      	ldr	r3, [pc, #496]	; (8002424 <acc_LdrApaga+0x260>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	497c      	ldr	r1, [pc, #496]	; (8002428 <acc_LdrApaga+0x264>)
 8002238:	487c      	ldr	r0, [pc, #496]	; (800242c <acc_LdrApaga+0x268>)
 800223a:	f003 fef1 	bl	8006020 <siprintf>
					lcd_send_string(texto);
 800223e:	487b      	ldr	r0, [pc, #492]	; (800242c <acc_LdrApaga+0x268>)
 8002240:	f7ff f954 	bl	80014ec <lcd_send_string>
					holdBoton = 0;
 8002244:	4b7a      	ldr	r3, [pc, #488]	; (8002430 <acc_LdrApaga+0x26c>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
				break;
 800224a:	e034      	b.n	80022b6 <acc_LdrApaga+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 800224c:	4b78      	ldr	r3, [pc, #480]	; (8002430 <acc_LdrApaga+0x26c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b96      	cmp	r3, #150	; 0x96
 8002252:	d902      	bls.n	800225a <acc_LdrApaga+0x96>
						flag_holdBoton = 1;
 8002254:	4b77      	ldr	r3, [pc, #476]	; (8002434 <acc_LdrApaga+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <acc_LdrApaga+0x270>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d028      	beq.n	80022b4 <acc_LdrApaga+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 8002262:	4b75      	ldr	r3, [pc, #468]	; (8002438 <acc_LdrApaga+0x274>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b18      	cmp	r3, #24
 8002268:	d924      	bls.n	80022b4 <acc_LdrApaga+0xf0>
							valorUmbral -= 10;
 800226a:	4b6e      	ldr	r3, [pc, #440]	; (8002424 <acc_LdrApaga+0x260>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3b0a      	subs	r3, #10
 8002270:	4a6c      	ldr	r2, [pc, #432]	; (8002424 <acc_LdrApaga+0x260>)
 8002272:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 8002274:	4b6b      	ldr	r3, [pc, #428]	; (8002424 <acc_LdrApaga+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800227c:	4293      	cmp	r3, r2
 800227e:	d903      	bls.n	8002288 <acc_LdrApaga+0xc4>
 8002280:	4b68      	ldr	r3, [pc, #416]	; (8002424 <acc_LdrApaga+0x260>)
 8002282:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002286:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002288:	2103      	movs	r1, #3
 800228a:	200e      	movs	r0, #14
 800228c:	f7ff f8a6 	bl	80013dc <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 8002290:	4b64      	ldr	r3, [pc, #400]	; (8002424 <acc_LdrApaga+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4964      	ldr	r1, [pc, #400]	; (8002428 <acc_LdrApaga+0x264>)
 8002298:	4864      	ldr	r0, [pc, #400]	; (800242c <acc_LdrApaga+0x268>)
 800229a:	f003 fec1 	bl	8006020 <siprintf>
							lcd_send_string(texto);
 800229e:	4863      	ldr	r0, [pc, #396]	; (800242c <acc_LdrApaga+0x268>)
 80022a0:	f7ff f924 	bl	80014ec <lcd_send_string>
							repitePulso = 0;
 80022a4:	4b64      	ldr	r3, [pc, #400]	; (8002438 <acc_LdrApaga+0x274>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
				break;
 80022aa:	e003      	b.n	80022b4 <acc_LdrApaga+0xf0>
					flag_holdBoton = 0;
 80022ac:	4b61      	ldr	r3, [pc, #388]	; (8002434 <acc_LdrApaga+0x270>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
				break;
 80022b2:	e000      	b.n	80022b6 <acc_LdrApaga+0xf2>
				break;
 80022b4:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7fe fc1c 	bl	8000af4 <getStatBoton>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d004      	beq.n	80022cc <acc_LdrApaga+0x108>
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d051      	beq.n	800236a <acc_LdrApaga+0x1a6>
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d020      	beq.n	800230c <acc_LdrApaga+0x148>
				break;
 80022ca:	e053      	b.n	8002374 <acc_LdrApaga+0x1b0>
					valorUmbral++;
 80022cc:	4b55      	ldr	r3, [pc, #340]	; (8002424 <acc_LdrApaga+0x260>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	4a54      	ldr	r2, [pc, #336]	; (8002424 <acc_LdrApaga+0x260>)
 80022d4:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 80022d6:	4b53      	ldr	r3, [pc, #332]	; (8002424 <acc_LdrApaga+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022de:	4293      	cmp	r3, r2
 80022e0:	d902      	bls.n	80022e8 <acc_LdrApaga+0x124>
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <acc_LdrApaga+0x260>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 80022e8:	2103      	movs	r1, #3
 80022ea:	200e      	movs	r0, #14
 80022ec:	f7ff f876 	bl	80013dc <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <acc_LdrApaga+0x260>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	494c      	ldr	r1, [pc, #304]	; (8002428 <acc_LdrApaga+0x264>)
 80022f8:	484c      	ldr	r0, [pc, #304]	; (800242c <acc_LdrApaga+0x268>)
 80022fa:	f003 fe91 	bl	8006020 <siprintf>
					lcd_send_string(texto);
 80022fe:	484b      	ldr	r0, [pc, #300]	; (800242c <acc_LdrApaga+0x268>)
 8002300:	f7ff f8f4 	bl	80014ec <lcd_send_string>
					holdBoton = 0;
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <acc_LdrApaga+0x26c>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				break;
 800230a:	e033      	b.n	8002374 <acc_LdrApaga+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <acc_LdrApaga+0x26c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b96      	cmp	r3, #150	; 0x96
 8002312:	d902      	bls.n	800231a <acc_LdrApaga+0x156>
						flag_holdBoton = 1;
 8002314:	4b47      	ldr	r3, [pc, #284]	; (8002434 <acc_LdrApaga+0x270>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 800231a:	4b46      	ldr	r3, [pc, #280]	; (8002434 <acc_LdrApaga+0x270>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d027      	beq.n	8002372 <acc_LdrApaga+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 8002322:	4b45      	ldr	r3, [pc, #276]	; (8002438 <acc_LdrApaga+0x274>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b18      	cmp	r3, #24
 8002328:	d923      	bls.n	8002372 <acc_LdrApaga+0x1ae>
							valorUmbral += 10;
 800232a:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <acc_LdrApaga+0x260>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330a      	adds	r3, #10
 8002330:	4a3c      	ldr	r2, [pc, #240]	; (8002424 <acc_LdrApaga+0x260>)
 8002332:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <acc_LdrApaga+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800233c:	4293      	cmp	r3, r2
 800233e:	d902      	bls.n	8002346 <acc_LdrApaga+0x182>
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <acc_LdrApaga+0x260>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002346:	2103      	movs	r1, #3
 8002348:	200e      	movs	r0, #14
 800234a:	f7ff f847 	bl	80013dc <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <acc_LdrApaga+0x260>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	4934      	ldr	r1, [pc, #208]	; (8002428 <acc_LdrApaga+0x264>)
 8002356:	4835      	ldr	r0, [pc, #212]	; (800242c <acc_LdrApaga+0x268>)
 8002358:	f003 fe62 	bl	8006020 <siprintf>
							lcd_send_string(texto);
 800235c:	4833      	ldr	r0, [pc, #204]	; (800242c <acc_LdrApaga+0x268>)
 800235e:	f7ff f8c5 	bl	80014ec <lcd_send_string>
							repitePulso = 0;
 8002362:	4b35      	ldr	r3, [pc, #212]	; (8002438 <acc_LdrApaga+0x274>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
				break;
 8002368:	e003      	b.n	8002372 <acc_LdrApaga+0x1ae>
					flag_holdBoton = 0;
 800236a:	4b32      	ldr	r3, [pc, #200]	; (8002434 <acc_LdrApaga+0x270>)
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
				break;
 8002370:	e000      	b.n	8002374 <acc_LdrApaga+0x1b0>
				break;
 8002372:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <acc_LdrApaga+0x278>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b63      	cmp	r3, #99	; 0x63
 800237a:	d911      	bls.n	80023a0 <acc_LdrApaga+0x1dc>
				lcd_put_cur(14, 2);
 800237c:	2102      	movs	r1, #2
 800237e:	200e      	movs	r0, #14
 8002380:	f7ff f82c 	bl	80013dc <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 8002384:	f7fe fda6 	bl	8000ed4 <get_ldr>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4926      	ldr	r1, [pc, #152]	; (8002428 <acc_LdrApaga+0x264>)
 800238e:	4827      	ldr	r0, [pc, #156]	; (800242c <acc_LdrApaga+0x268>)
 8002390:	f003 fe46 	bl	8006020 <siprintf>
				lcd_send_string(texto);
 8002394:	4825      	ldr	r0, [pc, #148]	; (800242c <acc_LdrApaga+0x268>)
 8002396:	f7ff f8a9 	bl	80014ec <lcd_send_string>
				timeOut_pantalla = 0;
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <acc_LdrApaga+0x278>)
 800239c:	2200      	movs	r2, #0
 800239e:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 80023a0:	2003      	movs	r0, #3
 80023a2:	f7fe fba7 	bl	8000af4 <getStatBoton>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d12f      	bne.n	800240c <acc_LdrApaga+0x248>
				set_umbralLDR(1, valorUmbral);
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <acc_LdrApaga+0x260>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7fe fdae 	bl	8000f14 <set_umbralLDR>
				lcd_clear();
 80023b8:	f7fe fffa 	bl	80013b0 <lcd_clear>
				lcd_put_cur(0, 1);
 80023bc:	2101      	movs	r1, #1
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff f80c 	bl	80013dc <lcd_put_cur>
				lcd_send_string("UMBRAL DIA GRABADO");
 80023c4:	481e      	ldr	r0, [pc, #120]	; (8002440 <acc_LdrApaga+0x27c>)
 80023c6:	f7ff f891 	bl	80014ec <lcd_send_string>
				pantallaUmbral = 1;
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <acc_LdrApaga+0x254>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	; (800243c <acc_LdrApaga+0x278>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	801a      	strh	r2, [r3, #0]
				break;
 80023d6:	e01c      	b.n	8002412 <acc_LdrApaga+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <acc_LdrApaga+0x278>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80023e0:	d306      	bcc.n	80023f0 <acc_LdrApaga+0x22c>
				menuActual = &menu[MENU_SELECCION];
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <acc_LdrApaga+0x258>)
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <acc_LdrApaga+0x25c>)
 80023e6:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <acc_LdrApaga+0x258>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 80023f0:	2002      	movs	r0, #2
 80023f2:	f7fe fb7f 	bl	8000af4 <getStatBoton>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d109      	bne.n	8002410 <acc_LdrApaga+0x24c>
				menuActual = &menu[MENU_SELECCION];
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <acc_LdrApaga+0x258>)
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <acc_LdrApaga+0x25c>)
 8002400:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <acc_LdrApaga+0x258>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4798      	blx	r3
		break;
 800240a:	e001      	b.n	8002410 <acc_LdrApaga+0x24c>
		break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <acc_LdrApaga+0x24e>
		break;
 8002410:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrApaga()
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000015f 	.word	0x2000015f
 800241c:	20000240 	.word	0x20000240
 8002420:	2000004c 	.word	0x2000004c
 8002424:	20000248 	.word	0x20000248
 8002428:	080069dc 	.word	0x080069dc
 800242c:	20000128 	.word	0x20000128
 8002430:	20000160 	.word	0x20000160
 8002434:	20000161 	.word	0x20000161
 8002438:	20000162 	.word	0x20000162
 800243c:	2000015a 	.word	0x2000015a
 8002440:	080069fc 	.word	0x080069fc

08002444 <refresh_infoDHT>:


void refresh_infoDHT (void){
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
	flag_infoDHT = 1;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <refresh_infoDHT+0x14>)
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoDHT()
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	2000015c 	.word	0x2000015c

0800245c <refresh_infoModo>:

void refresh_infoModo (void){
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
	flag_infoModo = 1;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <refresh_infoModo+0x14>)
 8002462:	2201      	movs	r2, #1
 8002464:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoModo
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	2000015d 	.word	0x2000015d

08002474 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_SPI1_Init+0x64>)
 800247a:	4a18      	ldr	r2, [pc, #96]	; (80024dc <MX_SPI1_Init+0x68>)
 800247c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_SPI1_Init+0x64>)
 8002480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002484:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_SPI1_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_SPI1_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_SPI1_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_SPI1_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024a8:	2230      	movs	r2, #48	; 0x30
 80024aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024c0:	220a      	movs	r2, #10
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_SPI1_Init+0x64>)
 80024c6:	f002 fe3b 	bl	8005140 <HAL_SPI_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024d0:	f7ff f944 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000025c 	.word	0x2000025c
 80024dc:	40013000 	.word	0x40013000

080024e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_SPI_MspInit+0x88>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d12f      	bne.n	8002560 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <HAL_SPI_MspInit+0x8c>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_SPI_MspInit+0x8c>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002530:	23a0      	movs	r3, #160	; 0xa0
 8002532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	4619      	mov	r1, r3
 8002542:	480b      	ldr	r0, [pc, #44]	; (8002570 <HAL_SPI_MspInit+0x90>)
 8002544:	f000 ff22 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_SPI_MspInit+0x90>)
 800255c:	f000 ff16 	bl	800338c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40013000 	.word	0x40013000
 800256c:	40021000 	.word	0x40021000
 8002570:	40010800 	.word	0x40010800

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a14      	ldr	r2, [pc, #80]	; (80025d0 <HAL_MspInit+0x5c>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_MspInit+0x5c>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_MspInit+0x5c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	61d3      	str	r3, [r2, #28]
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_MspInit+0x5c>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_MspInit+0x60>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_MspInit+0x60>)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000

080025d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <NMI_Handler+0x4>

080025de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <HardFault_Handler+0x4>

080025e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <MemManage_Handler+0x4>

080025ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <BusFault_Handler+0x4>

080025f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f4:	e7fe      	b.n	80025f4 <UsageFault_Handler+0x4>

080025f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261e:	f000 f9dd 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <TIM2_IRQHandler+0x10>)
 800262e:	f002 fe36 	bl	800529e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200002b4 	.word	0x200002b4

0800263c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <USART1_IRQHandler+0x10>)
 8002642:	f003 f9ab 	bl	800599c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200002f4 	.word	0x200002f4

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f003 fc9c 	bl	8005fbc <__errno>
 8002684:	4602      	mov	r2, r0
 8002686:	230c      	movs	r3, #12
 8002688:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20005000 	.word	0x20005000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	20000164 	.word	0x20000164
 80026b8:	20000340 	.word	0x20000340

080026bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <SystemInit+0x5c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a14      	ldr	r2, [pc, #80]	; (8002718 <SystemInit+0x5c>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <SystemInit+0x5c>)
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	4911      	ldr	r1, [pc, #68]	; (8002718 <SystemInit+0x5c>)
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <SystemInit+0x60>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <SystemInit+0x5c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <SystemInit+0x5c>)
 80026de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80026e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <SystemInit+0x5c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <SystemInit+0x5c>)
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <SystemInit+0x5c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <SystemInit+0x5c>)
 80026fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80026fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <SystemInit+0x5c>)
 8002702:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002706:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SystemInit+0x64>)
 800270a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000
 800271c:	f8ff0000 	.word	0xf8ff0000
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002738:	463b      	mov	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <MX_TIM2_Init+0x98>)
 8002742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <MX_TIM2_Init+0x98>)
 800274a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800274e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <MX_TIM2_Init+0x98>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <MX_TIM2_Init+0x98>)
 8002758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800275c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <MX_TIM2_Init+0x98>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <MX_TIM2_Init+0x98>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800276a:	4814      	ldr	r0, [pc, #80]	; (80027bc <MX_TIM2_Init+0x98>)
 800276c:	f002 fd49 	bl	8005202 <HAL_TIM_Base_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002776:	f7fe fff1 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002780:	f107 0308 	add.w	r3, r7, #8
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	; (80027bc <MX_TIM2_Init+0x98>)
 8002788:	f002 fe91 	bl	80054ae <HAL_TIM_ConfigClockSource>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002792:	f7fe ffe3 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279e:	463b      	mov	r3, r7
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM2_Init+0x98>)
 80027a4:	f003 f856 	bl	8005854 <HAL_TIMEx_MasterConfigSynchronization>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80027ae:	f7fe ffd5 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200002b4 	.word	0x200002b4

080027c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d0:	d113      	bne.n	80027fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_TIM_Base_MspInit+0x44>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_TIM_Base_MspInit+0x44>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_TIM_Base_MspInit+0x44>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	201c      	movs	r0, #28
 80027f0:	f000 fd1f 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027f4:	201c      	movs	r0, #28
 80027f6:	f000 fd38 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART1_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART1_UART_Init+0x4c>)
 8002840:	f003 f85e 	bl	8005900 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f7fe ff87 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200002f4 	.word	0x200002f4
 8002858:	40013800 	.word	0x40013800

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_UART_MspInit+0x9c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d139      	bne.n	80028f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_UART_MspInit+0xa0>)
 8002882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002886:	6193      	str	r3, [r2, #24]
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_UART_MspInit+0xa0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a18      	ldr	r2, [pc, #96]	; (80028fc <HAL_UART_MspInit+0xa0>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6193      	str	r3, [r2, #24]
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_UART_MspInit+0xa0>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 0310 	add.w	r3, r7, #16
 80028be:	4619      	mov	r1, r3
 80028c0:	480f      	ldr	r0, [pc, #60]	; (8002900 <HAL_UART_MspInit+0xa4>)
 80028c2:	f000 fd63 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	4619      	mov	r1, r3
 80028da:	4809      	ldr	r0, [pc, #36]	; (8002900 <HAL_UART_MspInit+0xa4>)
 80028dc:	f000 fd56 	bl	800338c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	2025      	movs	r0, #37	; 0x25
 80028e6:	f000 fca4 	bl	8003232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ea:	2025      	movs	r0, #37	; 0x25
 80028ec:	f000 fcbd 	bl	800326a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028f0:	bf00      	nop
 80028f2:	3720      	adds	r7, #32
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010800 	.word	0x40010800

08002904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002904:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002906:	e003      	b.n	8002910 <LoopCopyDataInit>

08002908 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800290a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800290c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800290e:	3104      	adds	r1, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002910:	480a      	ldr	r0, [pc, #40]	; (800293c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002914:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002916:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002918:	d3f6      	bcc.n	8002908 <CopyDataInit>
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800291c:	e002      	b.n	8002924 <LoopFillZerobss>

0800291e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002920:	f842 3b04 	str.w	r3, [r2], #4

08002924 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002926:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002928:	d3f9      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800292a:	f7ff fec7 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292e:	f003 fb4b 	bl	8005fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002932:	f7fe fe19 	bl	8001568 <main>
  bx lr
 8002936:	4770      	bx	lr
  ldr r3, =_sidata
 8002938:	08006a78 	.word	0x08006a78
  ldr r0, =_sdata
 800293c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002940:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 8002944:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 8002948:	2000033c 	.word	0x2000033c

0800294c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC1_2_IRQHandler>
	...

08002950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_Init+0x28>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_Init+0x28>)
 800295a:	f043 0310 	orr.w	r3, r3, #16
 800295e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 fc5b 	bl	800321c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	200f      	movs	r0, #15
 8002968:	f000 f808 	bl	800297c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f7ff fe02 	bl	8002574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x54>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x58>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002992:	fbb3 f3f1 	udiv	r3, r3, r1
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fc73 	bl	8003286 <HAL_SYSTICK_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00e      	b.n	80029c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d80a      	bhi.n	80029c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b8:	f000 fc3b 	bl	8003232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_InitTick+0x5c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	2000008c 	.word	0x2000008c
 80029d4:	20000094 	.word	0x20000094
 80029d8:	20000090 	.word	0x20000090

080029dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x1c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x20>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x20>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000094 	.word	0x20000094
 80029fc:	20000334 	.word	0x20000334

08002a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_GetTick+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000334 	.word	0x20000334

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_Delay+0x40>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffe0 	bl	8002a00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000094 	.word	0x20000094

08002a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0be      	b.n	8002bf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d109      	bne.n	8002a9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe f968 	bl	8000d6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 fab7 	bl	8003010 <ADC_ConversionStop_Disable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8099 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 8095 	bne.w	8002be6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac4:	f023 0302 	bic.w	r3, r3, #2
 8002ac8:	f043 0202 	orr.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ad8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7b1b      	ldrb	r3, [r3, #12]
 8002ade:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ae0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_Init+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d102      	bne.n	8002b00 <HAL_ADC_Init+0xa8>
 8002afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002afe:	e000      	b.n	8002b02 <HAL_ADC_Init+0xaa>
 8002b00:	2300      	movs	r3, #0
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7d1b      	ldrb	r3, [r3, #20]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d119      	bne.n	8002b44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7b1b      	ldrb	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	035a      	lsls	r2, r3, #13
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <HAL_ADC_Init+0x1a8>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_Init+0x126>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <HAL_ADC_Init+0x1ac>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d10b      	bne.n	8002bc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	f043 0201 	orr.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bc2:	e018      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f023 0312 	bic.w	r3, r3, #18
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002be4:	e007      	b.n	8002bf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	ffe1f7fd 	.word	0xffe1f7fd
 8002c04:	ff1f0efe 	.word	0xff1f0efe

08002c08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Start+0x1a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e098      	b.n	8002d54 <HAL_ADC_Start+0x14c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f99e 	bl	8002f6c <ADC_Enable>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8087 	bne.w	8002d4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_Start+0x5e>
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d115      	bne.n	8002c92 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d026      	beq.n	8002cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c90:	e01d      	b.n	8002cce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_Start+0xaa>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a2b      	ldr	r2, [pc, #172]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10d      	bne.n	8002cce <HAL_ADC_Start+0xc6>
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	f023 0206 	bic.w	r2, r3, #6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ce6:	e002      	b.n	8002cee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0202 	mvn.w	r2, #2
 8002cfe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d0e:	d113      	bne.n	8002d38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_ADC_Start+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d105      	bne.n	8002d26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_ADC_Start+0x158>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d108      	bne.n	8002d38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	e00c      	b.n	8002d52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689a      	ldr	r2, [r3, #8]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40012800 	.word	0x40012800
 8002d60:	40012400 	.word	0x40012400

08002d64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x20>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0dc      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1da>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d81c      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	3b05      	subs	r3, #5
 8002dbe:	221f      	movs	r2, #31
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	4019      	ands	r1, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b05      	subs	r3, #5
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	635a      	str	r2, [r3, #52]	; 0x34
 8002de4:	e03c      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b0c      	cmp	r3, #12
 8002dec:	d81c      	bhi.n	8002e28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3b23      	subs	r3, #35	; 0x23
 8002e00:	221f      	movs	r2, #31
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	4019      	ands	r1, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	3b23      	subs	r3, #35	; 0x23
 8002e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
 8002e26:	e01b      	b.n	8002e60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	3b41      	subs	r3, #65	; 0x41
 8002e3a:	221f      	movs	r2, #31
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b41      	subs	r3, #65	; 0x41
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d91c      	bls.n	8002ea2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68d9      	ldr	r1, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]
 8002ea0:	e019      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6919      	ldr	r1, [r3, #16]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d003      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d132      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_ADC_ConfigChannel+0x1e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d125      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d126      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f0c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d11a      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_ADC_ConfigChannel+0x1e8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a13      	ldr	r2, [pc, #76]	; (8002f68 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	0c9a      	lsrs	r2, r3, #18
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f9      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x1b2>
 8002f3a:	e007      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012400 	.word	0x40012400
 8002f64:	2000008c 	.word	0x2000008c
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d039      	beq.n	8002ffe <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <ADC_Enable+0x9c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	; (800300c <ADC_Enable+0xa0>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fa8:	e002      	b.n	8002fb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fb6:	f7ff fd23 	bl	8002a00 <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002fbc:	e018      	b.n	8002ff0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fbe:	f7ff fd1f 	bl	8002a00 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d911      	bls.n	8002ff0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd0:	f043 0210 	orr.w	r2, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d1df      	bne.n	8002fbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	2000008c 	.word	0x2000008c
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b01      	cmp	r3, #1
 8003028:	d127      	bne.n	800307a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800303a:	f7ff fce1 	bl	8002a00 <HAL_GetTick>
 800303e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003040:	e014      	b.n	800306c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003042:	f7ff fcdd 	bl	8002a00 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d90d      	bls.n	800306c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f043 0210 	orr.w	r2, r3, #16
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d0e3      	beq.n	8003042 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4906      	ldr	r1, [pc, #24]	; (800311c <__NVIC_EnableIRQ+0x34>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	e000e100 	.word	0xe000e100

08003120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	6039      	str	r1, [r7, #0]
 800312a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	db0a      	blt.n	800314a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	b2da      	uxtb	r2, r3
 8003138:	490c      	ldr	r1, [pc, #48]	; (800316c <__NVIC_SetPriority+0x4c>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	0112      	lsls	r2, r2, #4
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	440b      	add	r3, r1
 8003144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003148:	e00a      	b.n	8003160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4908      	ldr	r1, [pc, #32]	; (8003170 <__NVIC_SetPriority+0x50>)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	3b04      	subs	r3, #4
 8003158:	0112      	lsls	r2, r2, #4
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	440b      	add	r3, r1
 800315e:	761a      	strb	r2, [r3, #24]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	; 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f1c3 0307 	rsb	r3, r3, #7
 800318e:	2b04      	cmp	r3, #4
 8003190:	bf28      	it	cs
 8003192:	2304      	movcs	r3, #4
 8003194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3304      	adds	r3, #4
 800319a:	2b06      	cmp	r3, #6
 800319c:	d902      	bls.n	80031a4 <NVIC_EncodePriority+0x30>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3b03      	subs	r3, #3
 80031a2:	e000      	b.n	80031a6 <NVIC_EncodePriority+0x32>
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	401a      	ands	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	43d9      	mvns	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031cc:	4313      	orrs	r3, r2
         );
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3724      	adds	r7, #36	; 0x24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e8:	d301      	bcc.n	80031ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00f      	b.n	800320e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ee:	4a0a      	ldr	r2, [pc, #40]	; (8003218 <SysTick_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f6:	210f      	movs	r1, #15
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031fc:	f7ff ff90 	bl	8003120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <SysTick_Config+0x40>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SysTick_Config+0x40>)
 8003208:	2207      	movs	r2, #7
 800320a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff ff2d 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
 800323e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003244:	f7ff ff42 	bl	80030cc <__NVIC_GetPriorityGrouping>
 8003248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6978      	ldr	r0, [r7, #20]
 8003250:	f7ff ff90 	bl	8003174 <NVIC_EncodePriority>
 8003254:	4602      	mov	r2, r0
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff ff5f 	bl	8003120 <__NVIC_SetPriority>
}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff35 	bl	80030e8 <__NVIC_EnableIRQ>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffa2 	bl	80031d8 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d005      	beq.n	80032c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2204      	movs	r2, #4
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e051      	b.n	8003366 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 020e 	bic.w	r2, r2, #14
 80032d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_DMA_Abort_IT+0xd0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d029      	beq.n	8003340 <HAL_DMA_Abort_IT+0xa0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a20      	ldr	r2, [pc, #128]	; (8003374 <HAL_DMA_Abort_IT+0xd4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_Abort_IT+0x9c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_DMA_Abort_IT+0xd8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01a      	beq.n	8003336 <HAL_DMA_Abort_IT+0x96>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1d      	ldr	r2, [pc, #116]	; (800337c <HAL_DMA_Abort_IT+0xdc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d012      	beq.n	8003330 <HAL_DMA_Abort_IT+0x90>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_DMA_Abort_IT+0xe0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00a      	beq.n	800332a <HAL_DMA_Abort_IT+0x8a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_DMA_Abort_IT+0xe4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d102      	bne.n	8003324 <HAL_DMA_Abort_IT+0x84>
 800331e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003322:	e00e      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 8003324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003328:	e00b      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 800332a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800332e:	e008      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 8003330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003334:	e005      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 8003336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800333a:	e002      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 800333c:	2310      	movs	r3, #16
 800333e:	e000      	b.n	8003342 <HAL_DMA_Abort_IT+0xa2>
 8003340:	2301      	movs	r3, #1
 8003342:	4a11      	ldr	r2, [pc, #68]	; (8003388 <HAL_DMA_Abort_IT+0xe8>)
 8003344:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3
    } 
  }
  return status;
 8003366:	7bfb      	ldrb	r3, [r7, #15]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40020008 	.word	0x40020008
 8003374:	4002001c 	.word	0x4002001c
 8003378:	40020030 	.word	0x40020030
 800337c:	40020044 	.word	0x40020044
 8003380:	40020058 	.word	0x40020058
 8003384:	4002006c 	.word	0x4002006c
 8003388:	40020000 	.word	0x40020000

0800338c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b08b      	sub	sp, #44	; 0x2c
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800339e:	e127      	b.n	80035f0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033a0:	2201      	movs	r2, #1
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	f040 8116 	bne.w	80035ea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b12      	cmp	r3, #18
 80033c4:	d034      	beq.n	8003430 <HAL_GPIO_Init+0xa4>
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d80d      	bhi.n	80033e6 <HAL_GPIO_Init+0x5a>
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d02b      	beq.n	8003426 <HAL_GPIO_Init+0x9a>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d804      	bhi.n	80033dc <HAL_GPIO_Init+0x50>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d031      	beq.n	800343a <HAL_GPIO_Init+0xae>
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d01c      	beq.n	8003414 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033da:	e048      	b.n	800346e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d043      	beq.n	8003468 <HAL_GPIO_Init+0xdc>
 80033e0:	2b11      	cmp	r3, #17
 80033e2:	d01b      	beq.n	800341c <HAL_GPIO_Init+0x90>
          break;
 80033e4:	e043      	b.n	800346e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033e6:	4a89      	ldr	r2, [pc, #548]	; (800360c <HAL_GPIO_Init+0x280>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d026      	beq.n	800343a <HAL_GPIO_Init+0xae>
 80033ec:	4a87      	ldr	r2, [pc, #540]	; (800360c <HAL_GPIO_Init+0x280>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d806      	bhi.n	8003400 <HAL_GPIO_Init+0x74>
 80033f2:	4a87      	ldr	r2, [pc, #540]	; (8003610 <HAL_GPIO_Init+0x284>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d020      	beq.n	800343a <HAL_GPIO_Init+0xae>
 80033f8:	4a86      	ldr	r2, [pc, #536]	; (8003614 <HAL_GPIO_Init+0x288>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01d      	beq.n	800343a <HAL_GPIO_Init+0xae>
          break;
 80033fe:	e036      	b.n	800346e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003400:	4a85      	ldr	r2, [pc, #532]	; (8003618 <HAL_GPIO_Init+0x28c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d019      	beq.n	800343a <HAL_GPIO_Init+0xae>
 8003406:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_GPIO_Init+0x290>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d016      	beq.n	800343a <HAL_GPIO_Init+0xae>
 800340c:	4a84      	ldr	r2, [pc, #528]	; (8003620 <HAL_GPIO_Init+0x294>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <HAL_GPIO_Init+0xae>
          break;
 8003412:	e02c      	b.n	800346e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	623b      	str	r3, [r7, #32]
          break;
 800341a:	e028      	b.n	800346e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	3304      	adds	r3, #4
 8003422:	623b      	str	r3, [r7, #32]
          break;
 8003424:	e023      	b.n	800346e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	3308      	adds	r3, #8
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e01e      	b.n	800346e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	330c      	adds	r3, #12
 8003436:	623b      	str	r3, [r7, #32]
          break;
 8003438:	e019      	b.n	800346e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003442:	2304      	movs	r3, #4
 8003444:	623b      	str	r3, [r7, #32]
          break;
 8003446:	e012      	b.n	800346e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d105      	bne.n	800345c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003450:	2308      	movs	r3, #8
 8003452:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	611a      	str	r2, [r3, #16]
          break;
 800345a:	e008      	b.n	800346e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800345c:	2308      	movs	r3, #8
 800345e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	615a      	str	r2, [r3, #20]
          break;
 8003466:	e002      	b.n	800346e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003468:	2300      	movs	r3, #0
 800346a:	623b      	str	r3, [r7, #32]
          break;
 800346c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2bff      	cmp	r3, #255	; 0xff
 8003472:	d801      	bhi.n	8003478 <HAL_GPIO_Init+0xec>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	e001      	b.n	800347c <HAL_GPIO_Init+0xf0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3304      	adds	r3, #4
 800347c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2bff      	cmp	r3, #255	; 0xff
 8003482:	d802      	bhi.n	800348a <HAL_GPIO_Init+0xfe>
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	e002      	b.n	8003490 <HAL_GPIO_Init+0x104>
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3b08      	subs	r3, #8
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	210f      	movs	r1, #15
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	401a      	ands	r2, r3
 80034a2:	6a39      	ldr	r1, [r7, #32]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	431a      	orrs	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8096 	beq.w	80035ea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034be:	4b59      	ldr	r3, [pc, #356]	; (8003624 <HAL_GPIO_Init+0x298>)
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	4a58      	ldr	r2, [pc, #352]	; (8003624 <HAL_GPIO_Init+0x298>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6193      	str	r3, [r2, #24]
 80034ca:	4b56      	ldr	r3, [pc, #344]	; (8003624 <HAL_GPIO_Init+0x298>)
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034d6:	4a54      	ldr	r2, [pc, #336]	; (8003628 <HAL_GPIO_Init+0x29c>)
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4b      	ldr	r2, [pc, #300]	; (800362c <HAL_GPIO_Init+0x2a0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_GPIO_Init+0x19e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4a      	ldr	r2, [pc, #296]	; (8003630 <HAL_GPIO_Init+0x2a4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00d      	beq.n	8003526 <HAL_GPIO_Init+0x19a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a49      	ldr	r2, [pc, #292]	; (8003634 <HAL_GPIO_Init+0x2a8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <HAL_GPIO_Init+0x196>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a48      	ldr	r2, [pc, #288]	; (8003638 <HAL_GPIO_Init+0x2ac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_GPIO_Init+0x192>
 800351a:	2303      	movs	r3, #3
 800351c:	e006      	b.n	800352c <HAL_GPIO_Init+0x1a0>
 800351e:	2304      	movs	r3, #4
 8003520:	e004      	b.n	800352c <HAL_GPIO_Init+0x1a0>
 8003522:	2302      	movs	r3, #2
 8003524:	e002      	b.n	800352c <HAL_GPIO_Init+0x1a0>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_GPIO_Init+0x1a0>
 800352a:	2300      	movs	r3, #0
 800352c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352e:	f002 0203 	and.w	r2, r2, #3
 8003532:	0092      	lsls	r2, r2, #2
 8003534:	4093      	lsls	r3, r2
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800353c:	493a      	ldr	r1, [pc, #232]	; (8003628 <HAL_GPIO_Init+0x29c>)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	3302      	adds	r3, #2
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003556:	4b39      	ldr	r3, [pc, #228]	; (800363c <HAL_GPIO_Init+0x2b0>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4938      	ldr	r1, [pc, #224]	; (800363c <HAL_GPIO_Init+0x2b0>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003564:	4b35      	ldr	r3, [pc, #212]	; (800363c <HAL_GPIO_Init+0x2b0>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	43db      	mvns	r3, r3
 800356c:	4933      	ldr	r1, [pc, #204]	; (800363c <HAL_GPIO_Init+0x2b0>)
 800356e:	4013      	ands	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800357e:	4b2f      	ldr	r3, [pc, #188]	; (800363c <HAL_GPIO_Init+0x2b0>)
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	492e      	ldr	r1, [pc, #184]	; (800363c <HAL_GPIO_Init+0x2b0>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
 800358a:	e006      	b.n	800359a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_GPIO_Init+0x2b0>)
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	43db      	mvns	r3, r3
 8003594:	4929      	ldr	r1, [pc, #164]	; (800363c <HAL_GPIO_Init+0x2b0>)
 8003596:	4013      	ands	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035a6:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	4924      	ldr	r1, [pc, #144]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
 80035b2:	e006      	b.n	80035c2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	491f      	ldr	r1, [pc, #124]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035be:	4013      	ands	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	491a      	ldr	r1, [pc, #104]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60cb      	str	r3, [r1, #12]
 80035da:	e006      	b.n	80035ea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	4915      	ldr	r1, [pc, #84]	; (800363c <HAL_GPIO_Init+0x2b0>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	3301      	adds	r3, #1
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f aed0 	bne.w	80033a0 <HAL_GPIO_Init+0x14>
  }
}
 8003600:	bf00      	nop
 8003602:	372c      	adds	r7, #44	; 0x2c
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	10210000 	.word	0x10210000
 8003610:	10110000 	.word	0x10110000
 8003614:	10120000 	.word	0x10120000
 8003618:	10310000 	.word	0x10310000
 800361c:	10320000 	.word	0x10320000
 8003620:	10220000 	.word	0x10220000
 8003624:	40021000 	.word	0x40021000
 8003628:	40010000 	.word	0x40010000
 800362c:	40010800 	.word	0x40010800
 8003630:	40010c00 	.word	0x40010c00
 8003634:	40011000 	.word	0x40011000
 8003638:	40011400 	.word	0x40011400
 800363c:	40010400 	.word	0x40010400

08003640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
 800367a:	4613      	mov	r3, r2
 800367c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800367e:	787b      	ldrb	r3, [r7, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800368a:	e003      	b.n	8003694 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	041a      	lsls	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	611a      	str	r2, [r3, #16]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e10f      	b.n	80038d2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fdcc 	bl	8001264 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	; 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e4:	f001 fc30 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a7b      	ldr	r2, [pc, #492]	; (80038dc <HAL_I2C_Init+0x23c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d807      	bhi.n	8003704 <HAL_I2C_Init+0x64>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <HAL_I2C_Init+0x240>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e006      	b.n	8003712 <HAL_I2C_Init+0x72>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a77      	ldr	r2, [pc, #476]	; (80038e4 <HAL_I2C_Init+0x244>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0db      	b.n	80038d2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	4a72      	ldr	r2, [pc, #456]	; (80038e8 <HAL_I2C_Init+0x248>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	0c9b      	lsrs	r3, r3, #18
 8003724:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a64      	ldr	r2, [pc, #400]	; (80038dc <HAL_I2C_Init+0x23c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <HAL_I2C_Init+0xb4>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3301      	adds	r3, #1
 8003752:	e009      	b.n	8003768 <HAL_I2C_Init+0xc8>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800375a:	fb02 f303 	mul.w	r3, r2, r3
 800375e:	4a63      	ldr	r2, [pc, #396]	; (80038ec <HAL_I2C_Init+0x24c>)
 8003760:	fba2 2303 	umull	r2, r3, r2, r3
 8003764:	099b      	lsrs	r3, r3, #6
 8003766:	3301      	adds	r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800377a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4956      	ldr	r1, [pc, #344]	; (80038dc <HAL_I2C_Init+0x23c>)
 8003784:	428b      	cmp	r3, r1
 8003786:	d80d      	bhi.n	80037a4 <HAL_I2C_Init+0x104>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1e59      	subs	r1, r3, #1
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	fbb1 f3f3 	udiv	r3, r1, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b04      	cmp	r3, #4
 800379e:	bf38      	it	cc
 80037a0:	2304      	movcc	r3, #4
 80037a2:	e04f      	b.n	8003844 <HAL_I2C_Init+0x1a4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <HAL_I2C_Init+0x130>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e012      	b.n	80037f6 <HAL_I2C_Init+0x156>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x15e>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e022      	b.n	8003844 <HAL_I2C_Init+0x1a4>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10e      	bne.n	8003824 <HAL_I2C_Init+0x184>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e58      	subs	r0, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	fbb0 f3f3 	udiv	r3, r0, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Init+0x1a4>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	0099      	lsls	r1, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	fbb0 f3f3 	udiv	r3, r0, r3
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	6809      	ldr	r1, [r1, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003872:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6911      	ldr	r1, [r2, #16]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	000186a0 	.word	0x000186a0
 80038e0:	001e847f 	.word	0x001e847f
 80038e4:	003d08ff 	.word	0x003d08ff
 80038e8:	431bde83 	.word	0x431bde83
 80038ec:	10624dd3 	.word	0x10624dd3

080038f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	461a      	mov	r2, r3
 80038fc:	460b      	mov	r3, r1
 80038fe:	817b      	strh	r3, [r7, #10]
 8003900:	4613      	mov	r3, r2
 8003902:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003904:	f7ff f87c 	bl	8002a00 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	f040 80e0 	bne.w	8003ad8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2319      	movs	r3, #25
 800391e:	2201      	movs	r2, #1
 8003920:	4970      	ldr	r1, [pc, #448]	; (8003ae4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fd5e 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	e0d3      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_I2C_Master_Transmit+0x50>
 800393c:	2302      	movs	r3, #2
 800393e:	e0cc      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d007      	beq.n	8003966 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2221      	movs	r2, #33	; 0x21
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2210      	movs	r2, #16
 8003982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	893a      	ldrh	r2, [r7, #8]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <HAL_I2C_Master_Transmit+0x1f8>)
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039a8:	8979      	ldrh	r1, [r7, #10]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 fbec 	bl	800418c <I2C_MasterRequestWrite>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e08d      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039d4:	e066      	b.n	8003aa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	6a39      	ldr	r1, [r7, #32]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fdd8 	bl	8004590 <I2C_WaitOnTXEFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00d      	beq.n	8003a02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d107      	bne.n	80039fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e06b      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d11b      	bne.n	8003a78 <HAL_I2C_Master_Transmit+0x188>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d017      	beq.n	8003a78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	6a39      	ldr	r1, [r7, #32]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fdc8 	bl	8004612 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d107      	bne.n	8003aa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e01a      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d194      	bne.n	80039d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e000      	b.n	8003ada <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
  }
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	00100002 	.word	0x00100002
 8003ae8:	ffff0000 	.word	0xffff0000

08003aec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08c      	sub	sp, #48	; 0x30
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	461a      	mov	r2, r3
 8003af8:	460b      	mov	r3, r1
 8003afa:	817b      	strh	r3, [r7, #10]
 8003afc:	4613      	mov	r3, r2
 8003afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7fe ff7e 	bl	8002a00 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 8213 	bne.w	8003f3a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2319      	movs	r3, #25
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	497e      	ldr	r1, [pc, #504]	; (8003d18 <HAL_I2C_Master_Receive+0x22c>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc60 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e206      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2C_Master_Receive+0x50>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e1ff      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d007      	beq.n	8003b62 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2222      	movs	r2, #34	; 0x22
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_I2C_Master_Receive+0x230>)
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba4:	8979      	ldrh	r1, [r7, #10]
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fb64 	bl	8004278 <I2C_MasterRequestRead>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c0      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d113      	bne.n	8003bea <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	623b      	str	r3, [r7, #32]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	623b      	str	r3, [r7, #32]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e194      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d11d      	bne.n	8003c2e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c2a:	b662      	cpsie	i
 8003c2c:	e172      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d11d      	bne.n	8003c72 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c46:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c6e:	b662      	cpsie	i
 8003c70:	e150      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c98:	e13c      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	f200 80f5 	bhi.w	8003e8e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d123      	bne.n	8003cf4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fcef 	bl	8004694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e13d      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf2:	e10f      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d150      	bne.n	8003d9e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d02:	2200      	movs	r2, #0
 8003d04:	4906      	ldr	r1, [pc, #24]	; (8003d20 <HAL_I2C_Master_Receive+0x234>)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fb6c 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e112      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
 8003d16:	bf00      	nop
 8003d18:	00100002 	.word	0x00100002
 8003d1c:	ffff0000 	.word	0xffff0000
 8003d20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d24:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d34:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d68:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d9c:	e0ba      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	2200      	movs	r2, #0
 8003da6:	4967      	ldr	r1, [pc, #412]	; (8003f44 <HAL_I2C_Master_Receive+0x458>)
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fb1b 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0c1      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dc8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e02:	2200      	movs	r2, #0
 8003e04:	494f      	ldr	r1, [pc, #316]	; (8003f44 <HAL_I2C_Master_Receive+0x458>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 faec 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e092      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e24:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e58:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8c:	e042      	b.n	8003f14 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fbfe 	bl	8004694 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e04c      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d118      	bne.n	8003f14 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f aebe 	bne.w	8003c9a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	e000      	b.n	8003f3c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
  }
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	00010004 	.word	0x00010004

08003f48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	607a      	str	r2, [r7, #4]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	460b      	mov	r3, r1
 8003f56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7fe fd52 	bl	8002a00 <HAL_GetTick>
 8003f5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 8105 	bne.w	800417a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2319      	movs	r3, #25
 8003f76:	2201      	movs	r2, #1
 8003f78:	4982      	ldr	r1, [pc, #520]	; (8004184 <HAL_I2C_IsDeviceReady+0x23c>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fa32 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
 8003f88:	e0f8      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_I2C_IsDeviceReady+0x50>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e0f1      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d007      	beq.n	8003fbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0201 	orr.w	r2, r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2224      	movs	r2, #36	; 0x24
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a6a      	ldr	r2, [pc, #424]	; (8004188 <HAL_I2C_IsDeviceReady+0x240>)
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 f9f0 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0b6      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800401c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800401e:	f7fe fcef 	bl	8002a00 <HAL_GetTick>
 8004022:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004052:	e025      	b.n	80040a0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004054:	f7fe fcd4 	bl	8002a00 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <HAL_I2C_IsDeviceReady+0x122>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	22a0      	movs	r2, #160	; 0xa0
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2ba0      	cmp	r3, #160	; 0xa0
 80040aa:	d005      	beq.n	80040b8 <HAL_I2C_IsDeviceReady+0x170>
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <HAL_I2C_IsDeviceReady+0x170>
 80040b2:	7dbb      	ldrb	r3, [r7, #22]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0cd      	beq.n	8004054 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d129      	bne.n	8004122 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4921      	ldr	r1, [pc, #132]	; (8004184 <HAL_I2C_IsDeviceReady+0x23c>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f970 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e036      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e02c      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004130:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800413a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	2319      	movs	r3, #25
 8004142:	2201      	movs	r2, #1
 8004144:	490f      	ldr	r1, [pc, #60]	; (8004184 <HAL_I2C_IsDeviceReady+0x23c>)
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f94c 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e012      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	3301      	adds	r3, #1
 800415a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	f4ff af3e 	bcc.w	8003fe2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	00100002 	.word	0x00100002
 8004188:	ffff0000 	.word	0xffff0000

0800418c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	460b      	mov	r3, r1
 800419a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d006      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d003      	beq.n	80041b6 <I2C_MasterRequestWrite+0x2a>
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b4:	d108      	bne.n	80041c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e00b      	b.n	80041e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	d107      	bne.n	80041e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f8f9 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e035      	b.n	8004268 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004204:	d108      	bne.n	8004218 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e01b      	b.n	8004250 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004218:	897b      	ldrh	r3, [r7, #10]
 800421a:	11db      	asrs	r3, r3, #7
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f063 030f 	orn	r3, r3, #15
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	490e      	ldr	r1, [pc, #56]	; (8004270 <I2C_MasterRequestWrite+0xe4>)
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f000 f92b 	bl	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e010      	b.n	8004268 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4907      	ldr	r1, [pc, #28]	; (8004274 <I2C_MasterRequestWrite+0xe8>)
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f91b 	bl	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	00010008 	.word	0x00010008
 8004274:	00010002 	.word	0x00010002

08004278 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800429c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d006      	beq.n	80042b2 <I2C_MasterRequestRead+0x3a>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d003      	beq.n	80042b2 <I2C_MasterRequestRead+0x3a>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042b0:	d108      	bne.n	80042c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	e00b      	b.n	80042dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	2b11      	cmp	r3, #17
 80042ca:	d107      	bne.n	80042dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 f87b 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e06d      	b.n	80043d4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d108      	bne.n	8004314 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]
 8004312:	e053      	b.n	80043bc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	11db      	asrs	r3, r3, #7
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f063 030f 	orn	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	492a      	ldr	r1, [pc, #168]	; (80043dc <I2C_MasterRequestRead+0x164>)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f8ad 	bl	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e048      	b.n	80043d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4923      	ldr	r1, [pc, #140]	; (80043e0 <I2C_MasterRequestRead+0x168>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f89d 	bl	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e038      	b.n	80043d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004386:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f825 	bl	80043e4 <I2C_WaitOnFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e017      	b.n	80043d4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043a4:	897b      	ldrh	r3, [r7, #10]
 80043a6:	11db      	asrs	r3, r3, #7
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0306 	and.w	r3, r3, #6
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f063 030e 	orn	r3, r3, #14
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	4907      	ldr	r1, [pc, #28]	; (80043e0 <I2C_MasterRequestRead+0x168>)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f865 	bl	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	00010008 	.word	0x00010008
 80043e0:	00010002 	.word	0x00010002

080043e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f4:	e025      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fc:	d021      	beq.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043fe:	f7fe faff 	bl	8002a00 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d302      	bcc.n	8004414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d116      	bne.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e023      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d10d      	bne.n	8004468 <I2C_WaitOnFlagUntilTimeout+0x84>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	43da      	mvns	r2, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	e00c      	b.n	8004482 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d0b6      	beq.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a0:	e051      	b.n	8004546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d123      	bne.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f043 0204 	orr.w	r2, r3, #4
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e046      	b.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004500:	d021      	beq.n	8004546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fe fa7d 	bl	8002a00 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d116      	bne.n	8004546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e020      	b.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10c      	bne.n	800456a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	43da      	mvns	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e00b      	b.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	43da      	mvns	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d18d      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459c:	e02d      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f8ce 	bl	8004740 <I2C_IsAcknowledgeFailed>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e02d      	b.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b4:	d021      	beq.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fe fa23 	bl	8002a00 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e007      	b.n	800460a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004604:	2b80      	cmp	r3, #128	; 0x80
 8004606:	d1ca      	bne.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800461e:	e02d      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f88d 	bl	8004740 <I2C_IsAcknowledgeFailed>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e02d      	b.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004636:	d021      	beq.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004638:	f7fe f9e2 	bl	8002a00 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e007      	b.n	800468c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b04      	cmp	r3, #4
 8004688:	d1ca      	bne.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a0:	e042      	b.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d119      	bne.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0210 	mvn.w	r2, #16
 80046b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e029      	b.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	f7fe f98c 	bl	8002a00 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d302      	bcc.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d116      	bne.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e007      	b.n	8004738 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d1b5      	bne.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d11b      	bne.n	8004790 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004760:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f043 0204 	orr.w	r2, r3, #4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e26c      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8087 	beq.w	80048ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047bc:	4b92      	ldr	r3, [pc, #584]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d00c      	beq.n	80047e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047c8:	4b8f      	ldr	r3, [pc, #572]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d112      	bne.n	80047fa <HAL_RCC_OscConfig+0x5e>
 80047d4:	4b8c      	ldr	r3, [pc, #560]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e0:	d10b      	bne.n	80047fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e2:	4b89      	ldr	r3, [pc, #548]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d06c      	beq.n	80048c8 <HAL_RCC_OscConfig+0x12c>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d168      	bne.n	80048c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e246      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x76>
 8004804:	4b80      	ldr	r3, [pc, #512]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7f      	ldr	r2, [pc, #508]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e02e      	b.n	8004870 <HAL_RCC_OscConfig+0xd4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7a      	ldr	r2, [pc, #488]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b78      	ldr	r3, [pc, #480]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800482c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e01d      	b.n	8004870 <HAL_RCC_OscConfig+0xd4>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0xbc>
 800483e:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a71      	ldr	r2, [pc, #452]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6e      	ldr	r2, [pc, #440]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0xd4>
 8004858:	4b6b      	ldr	r3, [pc, #428]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a6a      	ldr	r2, [pc, #424]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	4b68      	ldr	r3, [pc, #416]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a67      	ldr	r2, [pc, #412]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800486a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d013      	beq.n	80048a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fe f8c2 	bl	8002a00 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004880:	f7fe f8be 	bl	8002a00 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e1fa      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	4b5d      	ldr	r3, [pc, #372]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCC_OscConfig+0xe4>
 800489e:	e014      	b.n	80048ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fe f8ae 	bl	8002a00 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a8:	f7fe f8aa 	bl	8002a00 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b64      	cmp	r3, #100	; 0x64
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e1e6      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x10c>
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d063      	beq.n	800499e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048d6:	4b4c      	ldr	r3, [pc, #304]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048e2:	4b49      	ldr	r3, [pc, #292]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d11c      	bne.n	8004928 <HAL_RCC_OscConfig+0x18c>
 80048ee:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d116      	bne.n	8004928 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048fa:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x176>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e1ba      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4939      	ldr	r1, [pc, #228]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004926:	e03a      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004930:	4b36      	ldr	r3, [pc, #216]	; (8004a0c <HAL_RCC_OscConfig+0x270>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fe f863 	bl	8002a00 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800493e:	f7fe f85f 	bl	8002a00 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e19b      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4927      	ldr	r1, [pc, #156]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 800496c:	4313      	orrs	r3, r2
 800496e:	600b      	str	r3, [r1, #0]
 8004970:	e015      	b.n	800499e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004972:	4b26      	ldr	r3, [pc, #152]	; (8004a0c <HAL_RCC_OscConfig+0x270>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe f842 	bl	8002a00 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004980:	f7fe f83e 	bl	8002a00 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e17a      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d03a      	beq.n	8004a20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d019      	beq.n	80049e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7fe f822 	bl	8002a00 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fe f81e 	bl	8002a00 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e15a      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_RCC_OscConfig+0x26c>)
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049de:	2001      	movs	r0, #1
 80049e0:	f000 fada 	bl	8004f98 <RCC_Delay>
 80049e4:	e01c      	b.n	8004a20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ec:	f7fe f808 	bl	8002a00 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f2:	e00f      	b.n	8004a14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fe f804 	bl	8002a00 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d908      	bls.n	8004a14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e140      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	42420000 	.word	0x42420000
 8004a10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e9      	bne.n	80049f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a6 	beq.w	8004b7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b97      	ldr	r3, [pc, #604]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10d      	bne.n	8004a5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	4b94      	ldr	r3, [pc, #592]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4a93      	ldr	r2, [pc, #588]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a48:	61d3      	str	r3, [r2, #28]
 8004a4a:	4b91      	ldr	r3, [pc, #580]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5a:	4b8e      	ldr	r3, [pc, #568]	; (8004c94 <HAL_RCC_OscConfig+0x4f8>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d118      	bne.n	8004a98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x4f8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8a      	ldr	r2, [pc, #552]	; (8004c94 <HAL_RCC_OscConfig+0x4f8>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a72:	f7fd ffc5 	bl	8002a00 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd ffc1 	bl	8002a00 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e0fd      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d106      	bne.n	8004aae <HAL_RCC_OscConfig+0x312>
 8004aa0:	4b7b      	ldr	r3, [pc, #492]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4a7a      	ldr	r2, [pc, #488]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6213      	str	r3, [r2, #32]
 8004aac:	e02d      	b.n	8004b0a <HAL_RCC_OscConfig+0x36e>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x334>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	6213      	str	r3, [r2, #32]
 8004ac2:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	f023 0304 	bic.w	r3, r3, #4
 8004acc:	6213      	str	r3, [r2, #32]
 8004ace:	e01c      	b.n	8004b0a <HAL_RCC_OscConfig+0x36e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b05      	cmp	r3, #5
 8004ad6:	d10c      	bne.n	8004af2 <HAL_RCC_OscConfig+0x356>
 8004ad8:	4b6d      	ldr	r3, [pc, #436]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	4a6c      	ldr	r2, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ade:	f043 0304 	orr.w	r3, r3, #4
 8004ae2:	6213      	str	r3, [r2, #32]
 8004ae4:	4b6a      	ldr	r3, [pc, #424]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a69      	ldr	r2, [pc, #420]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	e00b      	b.n	8004b0a <HAL_RCC_OscConfig+0x36e>
 8004af2:	4b67      	ldr	r3, [pc, #412]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	4a66      	ldr	r2, [pc, #408]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	6213      	str	r3, [r2, #32]
 8004afe:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	4a63      	ldr	r2, [pc, #396]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d015      	beq.n	8004b3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b12:	f7fd ff75 	bl	8002a00 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fd ff71 	bl	8002a00 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0ab      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RCC_OscConfig+0x37e>
 8004b3c:	e014      	b.n	8004b68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3e:	f7fd ff5f 	bl	8002a00 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fd ff5b 	bl	8002a00 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e095      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5c:	4b4c      	ldr	r3, [pc, #304]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ee      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d105      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6e:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	4a47      	ldr	r2, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8081 	beq.w	8004c86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b84:	4b42      	ldr	r3, [pc, #264]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d061      	beq.n	8004c54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d146      	bne.n	8004c26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b98:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <HAL_RCC_OscConfig+0x4fc>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd ff2f 	bl	8002a00 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fd ff2b 	bl	8002a00 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e067      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1f0      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bcc:	d108      	bne.n	8004be0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bce:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	492d      	ldr	r1, [pc, #180]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004be0:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a19      	ldr	r1, [r3, #32]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	4927      	ldr	r1, [pc, #156]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <HAL_RCC_OscConfig+0x4fc>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd feff 	bl	8002a00 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd fefb 	bl	8002a00 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e037      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x46a>
 8004c24:	e02f      	b.n	8004c86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCC_OscConfig+0x4fc>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fee8 	bl	8002a00 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c34:	f7fd fee4 	bl	8002a00 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e020      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x498>
 8004c52:	e018      	b.n	8004c86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e013      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x4f4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d106      	bne.n	8004c82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40007000 	.word	0x40007000
 8004c98:	42420060 	.word	0x42420060

08004c9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e0d0      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b6a      	ldr	r3, [pc, #424]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d910      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b67      	ldr	r3, [pc, #412]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 0207 	bic.w	r2, r3, #7
 8004cc6:	4965      	ldr	r1, [pc, #404]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b63      	ldr	r3, [pc, #396]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0b8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d10:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4a52      	ldr	r2, [pc, #328]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d1c:	4b50      	ldr	r3, [pc, #320]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	494d      	ldr	r1, [pc, #308]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d040      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d115      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e073      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6a:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e06b      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d7a:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 0203 	bic.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4936      	ldr	r1, [pc, #216]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d8c:	f7fd fe38 	bl	8002a00 <HAL_GetTick>
 8004d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d94:	f7fd fe34 	bl	8002a00 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e053      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 020c 	and.w	r2, r3, #12
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d1eb      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dbc:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d210      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dca:	4b24      	ldr	r3, [pc, #144]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f023 0207 	bic.w	r2, r3, #7
 8004dd2:	4922      	ldr	r1, [pc, #136]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e032      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4916      	ldr	r1, [pc, #88]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e16:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	490e      	ldr	r1, [pc, #56]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e2a:	f000 f821 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4601      	mov	r1, r0
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	; (8004e64 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	5cd3      	ldrb	r3, [r2, r3]
 8004e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e42:	4a09      	ldr	r2, [pc, #36]	; (8004e68 <HAL_RCC_ClockConfig+0x1cc>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <HAL_RCC_ClockConfig+0x1d0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fd fd96 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40021000 	.word	0x40021000
 8004e64:	08006a24 	.word	0x08006a24
 8004e68:	2000008c 	.word	0x2000008c
 8004e6c:	20000090 	.word	0x20000090

08004e70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	b490      	push	{r4, r7}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e76:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e78:	1d3c      	adds	r4, r7, #4
 8004e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e80:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d002      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d003      	beq.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x46>
 8004eae:	e02d      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eb2:	623b      	str	r3, [r7, #32]
      break;
 8004eb4:	e02d      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	0c9b      	lsrs	r3, r3, #18
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ec8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ed4:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	0c5b      	lsrs	r3, r3, #17
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ee8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4a0f      	ldr	r2, [pc, #60]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004eee:	fb02 f203 	mul.w	r2, r2, r3
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8004efa:	e004      	b.n	8004f06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	623b      	str	r3, [r7, #32]
      break;
 8004f0a:	e002      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f0e:	623b      	str	r3, [r7, #32]
      break;
 8004f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f12:	6a3b      	ldr	r3, [r7, #32]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3728      	adds	r7, #40	; 0x28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc90      	pop	{r4, r7}
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	08006a10 	.word	0x08006a10
 8004f24:	08006a20 	.word	0x08006a20
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	007a1200 	.word	0x007a1200
 8004f30:	003d0900 	.word	0x003d0900

08004f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f38:	4b02      	ldr	r3, [pc, #8]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	2000008c 	.word	0x2000008c

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f4c:	f7ff fff2 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f50:	4601      	mov	r1, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5e:	5cd3      	ldrb	r3, [r2, r3]
 8004f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	08006a34 	.word	0x08006a34

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f74:	f7ff ffde 	bl	8004f34 <HAL_RCC_GetHCLKFreq>
 8004f78:	4601      	mov	r1, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	0adb      	lsrs	r3, r3, #11
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40021000 	.word	0x40021000
 8004f94:	08006a34 	.word	0x08006a34

08004f98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <RCC_Delay+0x34>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	; (8004fd0 <RCC_Delay+0x38>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0a5b      	lsrs	r3, r3, #9
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	fb02 f303 	mul.w	r3, r2, r3
 8004fb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004fb4:	bf00      	nop
  }
  while (Delay --);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1e5a      	subs	r2, r3, #1
 8004fba:	60fa      	str	r2, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f9      	bne.n	8004fb4 <RCC_Delay+0x1c>
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	2000008c 	.word	0x2000008c
 8004fd0:	10624dd3 	.word	0x10624dd3

08004fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d07d      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ff4:	4b4f      	ldr	r3, [pc, #316]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10d      	bne.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4a4b      	ldr	r2, [pc, #300]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800500a:	61d3      	str	r3, [r2, #28]
 800500c:	4b49      	ldr	r3, [pc, #292]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800501c:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d118      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005028:	4b43      	ldr	r3, [pc, #268]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a42      	ldr	r2, [pc, #264]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005034:	f7fd fce4 	bl	8002a00 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503a:	e008      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800503c:	f7fd fce0 	bl	8002a00 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e06d      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504e:	4b3a      	ldr	r3, [pc, #232]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800505a:	4b36      	ldr	r3, [pc, #216]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005062:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d02e      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	429a      	cmp	r2, r3
 8005076:	d027      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005078:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005080:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005088:	4b2c      	ldr	r3, [pc, #176]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800508e:	4a29      	ldr	r2, [pc, #164]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d014      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fd fcaf 	bl	8002a00 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fd fcab 	bl	8002a00 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e036      	b.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050bc:	4b1d      	ldr	r3, [pc, #116]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ee      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	4917      	ldr	r1, [pc, #92]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d105      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	4a13      	ldr	r2, [pc, #76]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f8:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	490b      	ldr	r1, [pc, #44]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005106:	4313      	orrs	r3, r2
 8005108:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005116:	4b07      	ldr	r3, [pc, #28]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4904      	ldr	r1, [pc, #16]	; (8005134 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40021000 	.word	0x40021000
 8005138:	40007000 	.word	0x40007000
 800513c:	42420440 	.word	0x42420440

08005140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e053      	b.n	80051fa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fd f9b7 	bl	80024e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	ea42 0103 	orr.w	r1, r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	0c1a      	lsrs	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f002 0204 	and.w	r2, r2, #4
 80051d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e01d      	b.n	8005250 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fd fac9 	bl	80027c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3304      	adds	r3, #4
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f000 fa0f 	bl	8005664 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b06      	cmp	r3, #6
 8005280:	d007      	beq.n	8005292 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d122      	bne.n	80052fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d11b      	bne.n	80052fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f06f 0202 	mvn.w	r2, #2
 80052ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f9a4 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 80052e6:	e005      	b.n	80052f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f997 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9a6 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d122      	bne.n	800534e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b04      	cmp	r3, #4
 8005314:	d11b      	bne.n	800534e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0204 	mvn.w	r2, #4
 800531e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f97a 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 800533a:	e005      	b.n	8005348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f96d 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f97c 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b08      	cmp	r3, #8
 800535a:	d122      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b08      	cmp	r3, #8
 8005368:	d11b      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0208 	mvn.w	r2, #8
 8005372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2204      	movs	r2, #4
 8005378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f950 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 800538e:	e005      	b.n	800539c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f943 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f952 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0310 	and.w	r3, r3, #16
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d122      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d11b      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0210 	mvn.w	r2, #16
 80053c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2208      	movs	r2, #8
 80053cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f926 	bl	800562e <HAL_TIM_IC_CaptureCallback>
 80053e2:	e005      	b.n	80053f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f919 	bl	800561c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f928 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0201 	mvn.w	r2, #1
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7fc f989 	bl	8001734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b80      	cmp	r3, #128	; 0x80
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa50 	bl	80058ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d10e      	bne.n	800547a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d107      	bne.n	800547a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f8ec 	bl	8005652 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d10e      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d107      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0220 	mvn.w	r2, #32
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa1b 	bl	80058dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_ConfigClockSource+0x18>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e0a6      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x166>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d067      	beq.n	80055ce <HAL_TIM_ConfigClockSource+0x120>
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d80b      	bhi.n	800551a <HAL_TIM_ConfigClockSource+0x6c>
 8005502:	2b10      	cmp	r3, #16
 8005504:	d073      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x140>
 8005506:	2b10      	cmp	r3, #16
 8005508:	d802      	bhi.n	8005510 <HAL_TIM_ConfigClockSource+0x62>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d06f      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800550e:	e078      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005510:	2b20      	cmp	r3, #32
 8005512:	d06c      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x140>
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d06a      	beq.n	80055ee <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005518:	e073      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800551a:	2b70      	cmp	r3, #112	; 0x70
 800551c:	d00d      	beq.n	800553a <HAL_TIM_ConfigClockSource+0x8c>
 800551e:	2b70      	cmp	r3, #112	; 0x70
 8005520:	d804      	bhi.n	800552c <HAL_TIM_ConfigClockSource+0x7e>
 8005522:	2b50      	cmp	r3, #80	; 0x50
 8005524:	d033      	beq.n	800558e <HAL_TIM_ConfigClockSource+0xe0>
 8005526:	2b60      	cmp	r3, #96	; 0x60
 8005528:	d041      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x100>
      break;
 800552a:	e06a      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d066      	beq.n	8005600 <HAL_TIM_ConfigClockSource+0x152>
 8005532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005536:	d017      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005538:	e063      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6818      	ldr	r0, [r3, #0]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	6899      	ldr	r1, [r3, #8]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f000 f964 	bl	8005816 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800555c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	609a      	str	r2, [r3, #8]
      break;
 8005566:	e04c      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f000 f94d 	bl	8005816 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800558a:	609a      	str	r2, [r3, #8]
      break;
 800558c:	e039      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f8c4 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2150      	movs	r1, #80	; 0x50
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f91b 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 80055ac:	e029      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6859      	ldr	r1, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f8e2 	bl	8005784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2160      	movs	r1, #96	; 0x60
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f90b 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 80055cc:	e019      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6859      	ldr	r1, [r3, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	461a      	mov	r2, r3
 80055dc:	f000 f8a4 	bl	8005728 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f8fb 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 80055ec:	e009      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f000 f8f2 	bl	80057e2 <TIM_ITRx_SetConfig>
      break;
 80055fe:	e000      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a29      	ldr	r2, [pc, #164]	; (800571c <TIM_Base_SetConfig+0xb8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00b      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d007      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <TIM_Base_SetConfig+0xbc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0x30>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a25      	ldr	r2, [pc, #148]	; (8005724 <TIM_Base_SetConfig+0xc0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <TIM_Base_SetConfig+0xb8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b4:	d007      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <TIM_Base_SetConfig+0xbc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_Base_SetConfig+0x62>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a18      	ldr	r2, [pc, #96]	; (8005724 <TIM_Base_SetConfig+0xc0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a07      	ldr	r2, [pc, #28]	; (800571c <TIM_Base_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d103      	bne.n	800570c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	615a      	str	r2, [r3, #20]
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800

08005728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f023 030a 	bic.w	r3, r3, #10
 8005764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f023 0210 	bic.w	r2, r3, #16
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	031b      	lsls	r3, r3, #12
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f043 0307 	orr.w	r3, r3, #7
 8005804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005816:	b480      	push	{r7}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	607a      	str	r2, [r7, #4]
 8005822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	021a      	lsls	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	431a      	orrs	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4313      	orrs	r3, r2
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	609a      	str	r2, [r3, #8]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005868:	2302      	movs	r3, #2
 800586a:	e032      	b.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bc80      	pop	{r7}
 80058da:	4770      	bx	lr

080058dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e03f      	b.n	8005992 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc ff98 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2224      	movs	r2, #36	; 0x24
 8005930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa5f 	bl	8005e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	f003 030f 	and.w	r3, r3, #15
 80059ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <HAL_UART_IRQHandler+0x52>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f98d 	bl	8005d06 <UART_Receive_IT>
      return;
 80059ec:	e0cc      	b.n	8005b88 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80ab 	beq.w	8005b4c <HAL_UART_IRQHandler+0x1b0>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_UART_IRQHandler+0x70>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 80a0 	beq.w	8005b4c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_UART_IRQHandler+0x90>
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	f043 0201 	orr.w	r2, r3, #1
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <HAL_UART_IRQHandler+0xb0>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	f043 0202 	orr.w	r2, r3, #2
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_UART_IRQHandler+0xd0>
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a64:	f043 0204 	orr.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_UART_IRQHandler+0xf0>
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	f043 0208 	orr.w	r2, r3, #8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d078      	beq.n	8005b86 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <HAL_UART_IRQHandler+0x112>
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f92c 	bl	8005d06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	bf14      	ite	ne
 8005abc:	2301      	movne	r3, #1
 8005abe:	2300      	moveq	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x13a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d031      	beq.n	8005b3a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f877 	bl	8005bca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d023      	beq.n	8005b32 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	695a      	ldr	r2, [r3, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d013      	beq.n	8005b2a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	4a22      	ldr	r2, [pc, #136]	; (8005b90 <HAL_UART_IRQHandler+0x1f4>)
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fbc6 	bl	80032a0 <HAL_DMA_Abort_IT>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d016      	beq.n	8005b48 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	e00e      	b.n	8005b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f844 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e00a      	b.n	8005b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f840 	bl	8005bb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e006      	b.n	8005b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f83c 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b46:	e01e      	b.n	8005b86 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	bf00      	nop
    return;
 8005b4a:	e01c      	b.n	8005b86 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_UART_IRQHandler+0x1cc>
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f863 	bl	8005c2c <UART_Transmit_IT>
    return;
 8005b66:	e00f      	b.n	8005b88 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_UART_IRQHandler+0x1ec>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8aa 	bl	8005cd6 <UART_EndTransmit_IT>
    return;
 8005b82:	bf00      	nop
 8005b84:	e000      	b.n	8005b88 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005b86:	bf00      	nop
  }
}
 8005b88:	3720      	adds	r7, #32
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	08005c05 	.word	0x08005c05

08005b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005be0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ffca 	bl	8005bb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b21      	cmp	r3, #33	; 0x21
 8005c3e:	d144      	bne.n	8005cca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d11a      	bne.n	8005c80 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c5e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	621a      	str	r2, [r3, #32]
 8005c72:	e00e      	b.n	8005c92 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	621a      	str	r2, [r3, #32]
 8005c7e:	e008      	b.n	8005c92 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	1c59      	adds	r1, r3, #1
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6211      	str	r1, [r2, #32]
 8005c8a:	781a      	ldrb	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10f      	bne.n	8005cc6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff ff4c 	bl	8005b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b22      	cmp	r3, #34	; 0x22
 8005d18:	d171      	bne.n	8005dfe <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d123      	bne.n	8005d6c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10e      	bne.n	8005d50 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	1c9a      	adds	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8005d4e:	e029      	b.n	8005da4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	629a      	str	r2, [r3, #40]	; 0x28
 8005d6a:	e01b      	b.n	8005da4 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6858      	ldr	r0, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6291      	str	r1, [r2, #40]	; 0x28
 8005d84:	b2c2      	uxtb	r2, r0
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e00c      	b.n	8005da4 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	1c58      	adds	r0, r3, #1
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	6288      	str	r0, [r1, #40]	; 0x28
 8005d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	4619      	mov	r1, r3
 8005db2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d120      	bne.n	8005dfa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0220 	bic.w	r2, r2, #32
 8005dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695a      	ldr	r2, [r3, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0201 	bic.w	r2, r2, #1
 8005de6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff fed8 	bl	8005ba6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e002      	b.n	8005e00 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e000      	b.n	8005e00 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005dfe:	2302      	movs	r3, #2
  }
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e42:	f023 030c 	bic.w	r3, r3, #12
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a52      	ldr	r2, [pc, #328]	; (8005fb4 <UART_SetConfig+0x1ac>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d14e      	bne.n	8005f0e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e70:	f7ff f87e 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8005e74:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009a      	lsls	r2, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	4a4a      	ldr	r2, [pc, #296]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	0119      	lsls	r1, r3, #4
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009a      	lsls	r2, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eac:	4b42      	ldr	r3, [pc, #264]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005eae:	fba3 0302 	umull	r0, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	2064      	movs	r0, #100	; 0x64
 8005eb6:	fb00 f303 	mul.w	r3, r0, r3
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	3332      	adds	r3, #50	; 0x32
 8005ec0:	4a3d      	ldr	r2, [pc, #244]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ecc:	4419      	add	r1, r3
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009a      	lsls	r2, r3, #2
 8005ed8:	441a      	add	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee4:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	2064      	movs	r0, #100	; 0x64
 8005eee:	fb00 f303 	mul.w	r3, r0, r3
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	011b      	lsls	r3, r3, #4
 8005ef6:	3332      	adds	r3, #50	; 0x32
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005efa:	fba2 2303 	umull	r2, r3, r2, r3
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	440a      	add	r2, r1
 8005f0a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005f0c:	e04d      	b.n	8005faa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f0e:	f7ff f81b 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8005f12:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009a      	lsls	r2, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2a:	4a23      	ldr	r2, [pc, #140]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	0119      	lsls	r1, r3, #4
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009a      	lsls	r2, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005f4c:	fba3 0302 	umull	r0, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2064      	movs	r0, #100	; 0x64
 8005f54:	fb00 f303 	mul.w	r3, r0, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f6a:	4419      	add	r1, r3
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009a      	lsls	r2, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005f84:	fba3 0302 	umull	r0, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2064      	movs	r0, #100	; 0x64
 8005f8c:	fb00 f303 	mul.w	r3, r0, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <UART_SetConfig+0x1b0>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 020f 	and.w	r2, r3, #15
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	609a      	str	r2, [r3, #8]
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40013800 	.word	0x40013800
 8005fb8:	51eb851f 	.word	0x51eb851f

08005fbc <__errno>:
 8005fbc:	4b01      	ldr	r3, [pc, #4]	; (8005fc4 <__errno+0x8>)
 8005fbe:	6818      	ldr	r0, [r3, #0]
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	20000098 	.word	0x20000098

08005fc8 <__libc_init_array>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	2500      	movs	r5, #0
 8005fcc:	4e0c      	ldr	r6, [pc, #48]	; (8006000 <__libc_init_array+0x38>)
 8005fce:	4c0d      	ldr	r4, [pc, #52]	; (8006004 <__libc_init_array+0x3c>)
 8005fd0:	1ba4      	subs	r4, r4, r6
 8005fd2:	10a4      	asrs	r4, r4, #2
 8005fd4:	42a5      	cmp	r5, r4
 8005fd6:	d109      	bne.n	8005fec <__libc_init_array+0x24>
 8005fd8:	f000 fc34 	bl	8006844 <_init>
 8005fdc:	2500      	movs	r5, #0
 8005fde:	4e0a      	ldr	r6, [pc, #40]	; (8006008 <__libc_init_array+0x40>)
 8005fe0:	4c0a      	ldr	r4, [pc, #40]	; (800600c <__libc_init_array+0x44>)
 8005fe2:	1ba4      	subs	r4, r4, r6
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	42a5      	cmp	r5, r4
 8005fe8:	d105      	bne.n	8005ff6 <__libc_init_array+0x2e>
 8005fea:	bd70      	pop	{r4, r5, r6, pc}
 8005fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ff0:	4798      	blx	r3
 8005ff2:	3501      	adds	r5, #1
 8005ff4:	e7ee      	b.n	8005fd4 <__libc_init_array+0xc>
 8005ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ffa:	4798      	blx	r3
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7f2      	b.n	8005fe6 <__libc_init_array+0x1e>
 8006000:	08006a70 	.word	0x08006a70
 8006004:	08006a70 	.word	0x08006a70
 8006008:	08006a70 	.word	0x08006a70
 800600c:	08006a74 	.word	0x08006a74

08006010 <memset>:
 8006010:	4603      	mov	r3, r0
 8006012:	4402      	add	r2, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <siprintf>:
 8006020:	b40e      	push	{r1, r2, r3}
 8006022:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006026:	b500      	push	{lr}
 8006028:	b09c      	sub	sp, #112	; 0x70
 800602a:	ab1d      	add	r3, sp, #116	; 0x74
 800602c:	9002      	str	r0, [sp, #8]
 800602e:	9006      	str	r0, [sp, #24]
 8006030:	9107      	str	r1, [sp, #28]
 8006032:	9104      	str	r1, [sp, #16]
 8006034:	4808      	ldr	r0, [pc, #32]	; (8006058 <siprintf+0x38>)
 8006036:	4909      	ldr	r1, [pc, #36]	; (800605c <siprintf+0x3c>)
 8006038:	f853 2b04 	ldr.w	r2, [r3], #4
 800603c:	9105      	str	r1, [sp, #20]
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	a902      	add	r1, sp, #8
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	f000 f866 	bl	8006114 <_svfiprintf_r>
 8006048:	2200      	movs	r2, #0
 800604a:	9b02      	ldr	r3, [sp, #8]
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	b01c      	add	sp, #112	; 0x70
 8006050:	f85d eb04 	ldr.w	lr, [sp], #4
 8006054:	b003      	add	sp, #12
 8006056:	4770      	bx	lr
 8006058:	20000098 	.word	0x20000098
 800605c:	ffff0208 	.word	0xffff0208

08006060 <__ssputs_r>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	688e      	ldr	r6, [r1, #8]
 8006066:	4682      	mov	sl, r0
 8006068:	429e      	cmp	r6, r3
 800606a:	460c      	mov	r4, r1
 800606c:	4690      	mov	r8, r2
 800606e:	4699      	mov	r9, r3
 8006070:	d837      	bhi.n	80060e2 <__ssputs_r+0x82>
 8006072:	898a      	ldrh	r2, [r1, #12]
 8006074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006078:	d031      	beq.n	80060de <__ssputs_r+0x7e>
 800607a:	2302      	movs	r3, #2
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	6909      	ldr	r1, [r1, #16]
 8006080:	1a6f      	subs	r7, r5, r1
 8006082:	6965      	ldr	r5, [r4, #20]
 8006084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006088:	fb95 f5f3 	sdiv	r5, r5, r3
 800608c:	f109 0301 	add.w	r3, r9, #1
 8006090:	443b      	add	r3, r7
 8006092:	429d      	cmp	r5, r3
 8006094:	bf38      	it	cc
 8006096:	461d      	movcc	r5, r3
 8006098:	0553      	lsls	r3, r2, #21
 800609a:	d530      	bpl.n	80060fe <__ssputs_r+0x9e>
 800609c:	4629      	mov	r1, r5
 800609e:	f000 fb37 	bl	8006710 <_malloc_r>
 80060a2:	4606      	mov	r6, r0
 80060a4:	b950      	cbnz	r0, 80060bc <__ssputs_r+0x5c>
 80060a6:	230c      	movs	r3, #12
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ac:	f8ca 3000 	str.w	r3, [sl]
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	463a      	mov	r2, r7
 80060be:	6921      	ldr	r1, [r4, #16]
 80060c0:	f000 fab6 	bl	8006630 <memcpy>
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80060ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	6126      	str	r6, [r4, #16]
 80060d2:	443e      	add	r6, r7
 80060d4:	6026      	str	r6, [r4, #0]
 80060d6:	464e      	mov	r6, r9
 80060d8:	6165      	str	r5, [r4, #20]
 80060da:	1bed      	subs	r5, r5, r7
 80060dc:	60a5      	str	r5, [r4, #8]
 80060de:	454e      	cmp	r6, r9
 80060e0:	d900      	bls.n	80060e4 <__ssputs_r+0x84>
 80060e2:	464e      	mov	r6, r9
 80060e4:	4632      	mov	r2, r6
 80060e6:	4641      	mov	r1, r8
 80060e8:	6820      	ldr	r0, [r4, #0]
 80060ea:	f000 faac 	bl	8006646 <memmove>
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	2000      	movs	r0, #0
 80060f2:	1b9b      	subs	r3, r3, r6
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	441e      	add	r6, r3
 80060fa:	6026      	str	r6, [r4, #0]
 80060fc:	e7dc      	b.n	80060b8 <__ssputs_r+0x58>
 80060fe:	462a      	mov	r2, r5
 8006100:	f000 fb60 	bl	80067c4 <_realloc_r>
 8006104:	4606      	mov	r6, r0
 8006106:	2800      	cmp	r0, #0
 8006108:	d1e2      	bne.n	80060d0 <__ssputs_r+0x70>
 800610a:	6921      	ldr	r1, [r4, #16]
 800610c:	4650      	mov	r0, sl
 800610e:	f000 fab3 	bl	8006678 <_free_r>
 8006112:	e7c8      	b.n	80060a6 <__ssputs_r+0x46>

08006114 <_svfiprintf_r>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	461d      	mov	r5, r3
 800611a:	898b      	ldrh	r3, [r1, #12]
 800611c:	b09d      	sub	sp, #116	; 0x74
 800611e:	061f      	lsls	r7, r3, #24
 8006120:	4680      	mov	r8, r0
 8006122:	460c      	mov	r4, r1
 8006124:	4616      	mov	r6, r2
 8006126:	d50f      	bpl.n	8006148 <_svfiprintf_r+0x34>
 8006128:	690b      	ldr	r3, [r1, #16]
 800612a:	b96b      	cbnz	r3, 8006148 <_svfiprintf_r+0x34>
 800612c:	2140      	movs	r1, #64	; 0x40
 800612e:	f000 faef 	bl	8006710 <_malloc_r>
 8006132:	6020      	str	r0, [r4, #0]
 8006134:	6120      	str	r0, [r4, #16]
 8006136:	b928      	cbnz	r0, 8006144 <_svfiprintf_r+0x30>
 8006138:	230c      	movs	r3, #12
 800613a:	f8c8 3000 	str.w	r3, [r8]
 800613e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006142:	e0c8      	b.n	80062d6 <_svfiprintf_r+0x1c2>
 8006144:	2340      	movs	r3, #64	; 0x40
 8006146:	6163      	str	r3, [r4, #20]
 8006148:	2300      	movs	r3, #0
 800614a:	9309      	str	r3, [sp, #36]	; 0x24
 800614c:	2320      	movs	r3, #32
 800614e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006152:	2330      	movs	r3, #48	; 0x30
 8006154:	f04f 0b01 	mov.w	fp, #1
 8006158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800615c:	9503      	str	r5, [sp, #12]
 800615e:	4637      	mov	r7, r6
 8006160:	463d      	mov	r5, r7
 8006162:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006166:	b10b      	cbz	r3, 800616c <_svfiprintf_r+0x58>
 8006168:	2b25      	cmp	r3, #37	; 0x25
 800616a:	d13e      	bne.n	80061ea <_svfiprintf_r+0xd6>
 800616c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006170:	d00b      	beq.n	800618a <_svfiprintf_r+0x76>
 8006172:	4653      	mov	r3, sl
 8006174:	4632      	mov	r2, r6
 8006176:	4621      	mov	r1, r4
 8006178:	4640      	mov	r0, r8
 800617a:	f7ff ff71 	bl	8006060 <__ssputs_r>
 800617e:	3001      	adds	r0, #1
 8006180:	f000 80a4 	beq.w	80062cc <_svfiprintf_r+0x1b8>
 8006184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006186:	4453      	add	r3, sl
 8006188:	9309      	str	r3, [sp, #36]	; 0x24
 800618a:	783b      	ldrb	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 809d 	beq.w	80062cc <_svfiprintf_r+0x1b8>
 8006192:	2300      	movs	r3, #0
 8006194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800619c:	9304      	str	r3, [sp, #16]
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061a4:	931a      	str	r3, [sp, #104]	; 0x68
 80061a6:	462f      	mov	r7, r5
 80061a8:	2205      	movs	r2, #5
 80061aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80061ae:	4850      	ldr	r0, [pc, #320]	; (80062f0 <_svfiprintf_r+0x1dc>)
 80061b0:	f000 fa30 	bl	8006614 <memchr>
 80061b4:	9b04      	ldr	r3, [sp, #16]
 80061b6:	b9d0      	cbnz	r0, 80061ee <_svfiprintf_r+0xda>
 80061b8:	06d9      	lsls	r1, r3, #27
 80061ba:	bf44      	itt	mi
 80061bc:	2220      	movmi	r2, #32
 80061be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061c2:	071a      	lsls	r2, r3, #28
 80061c4:	bf44      	itt	mi
 80061c6:	222b      	movmi	r2, #43	; 0x2b
 80061c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061cc:	782a      	ldrb	r2, [r5, #0]
 80061ce:	2a2a      	cmp	r2, #42	; 0x2a
 80061d0:	d015      	beq.n	80061fe <_svfiprintf_r+0xea>
 80061d2:	462f      	mov	r7, r5
 80061d4:	2000      	movs	r0, #0
 80061d6:	250a      	movs	r5, #10
 80061d8:	9a07      	ldr	r2, [sp, #28]
 80061da:	4639      	mov	r1, r7
 80061dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061e0:	3b30      	subs	r3, #48	; 0x30
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	d94d      	bls.n	8006282 <_svfiprintf_r+0x16e>
 80061e6:	b1b8      	cbz	r0, 8006218 <_svfiprintf_r+0x104>
 80061e8:	e00f      	b.n	800620a <_svfiprintf_r+0xf6>
 80061ea:	462f      	mov	r7, r5
 80061ec:	e7b8      	b.n	8006160 <_svfiprintf_r+0x4c>
 80061ee:	4a40      	ldr	r2, [pc, #256]	; (80062f0 <_svfiprintf_r+0x1dc>)
 80061f0:	463d      	mov	r5, r7
 80061f2:	1a80      	subs	r0, r0, r2
 80061f4:	fa0b f000 	lsl.w	r0, fp, r0
 80061f8:	4318      	orrs	r0, r3
 80061fa:	9004      	str	r0, [sp, #16]
 80061fc:	e7d3      	b.n	80061a6 <_svfiprintf_r+0x92>
 80061fe:	9a03      	ldr	r2, [sp, #12]
 8006200:	1d11      	adds	r1, r2, #4
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	9103      	str	r1, [sp, #12]
 8006206:	2a00      	cmp	r2, #0
 8006208:	db01      	blt.n	800620e <_svfiprintf_r+0xfa>
 800620a:	9207      	str	r2, [sp, #28]
 800620c:	e004      	b.n	8006218 <_svfiprintf_r+0x104>
 800620e:	4252      	negs	r2, r2
 8006210:	f043 0302 	orr.w	r3, r3, #2
 8006214:	9207      	str	r2, [sp, #28]
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	783b      	ldrb	r3, [r7, #0]
 800621a:	2b2e      	cmp	r3, #46	; 0x2e
 800621c:	d10c      	bne.n	8006238 <_svfiprintf_r+0x124>
 800621e:	787b      	ldrb	r3, [r7, #1]
 8006220:	2b2a      	cmp	r3, #42	; 0x2a
 8006222:	d133      	bne.n	800628c <_svfiprintf_r+0x178>
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	3702      	adds	r7, #2
 8006228:	1d1a      	adds	r2, r3, #4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	9203      	str	r2, [sp, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	bfb8      	it	lt
 8006232:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006236:	9305      	str	r3, [sp, #20]
 8006238:	4d2e      	ldr	r5, [pc, #184]	; (80062f4 <_svfiprintf_r+0x1e0>)
 800623a:	2203      	movs	r2, #3
 800623c:	7839      	ldrb	r1, [r7, #0]
 800623e:	4628      	mov	r0, r5
 8006240:	f000 f9e8 	bl	8006614 <memchr>
 8006244:	b138      	cbz	r0, 8006256 <_svfiprintf_r+0x142>
 8006246:	2340      	movs	r3, #64	; 0x40
 8006248:	1b40      	subs	r0, r0, r5
 800624a:	fa03 f000 	lsl.w	r0, r3, r0
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	3701      	adds	r7, #1
 8006252:	4303      	orrs	r3, r0
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	7839      	ldrb	r1, [r7, #0]
 8006258:	2206      	movs	r2, #6
 800625a:	4827      	ldr	r0, [pc, #156]	; (80062f8 <_svfiprintf_r+0x1e4>)
 800625c:	1c7e      	adds	r6, r7, #1
 800625e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006262:	f000 f9d7 	bl	8006614 <memchr>
 8006266:	2800      	cmp	r0, #0
 8006268:	d038      	beq.n	80062dc <_svfiprintf_r+0x1c8>
 800626a:	4b24      	ldr	r3, [pc, #144]	; (80062fc <_svfiprintf_r+0x1e8>)
 800626c:	bb13      	cbnz	r3, 80062b4 <_svfiprintf_r+0x1a0>
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	3307      	adds	r3, #7
 8006272:	f023 0307 	bic.w	r3, r3, #7
 8006276:	3308      	adds	r3, #8
 8006278:	9303      	str	r3, [sp, #12]
 800627a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800627c:	444b      	add	r3, r9
 800627e:	9309      	str	r3, [sp, #36]	; 0x24
 8006280:	e76d      	b.n	800615e <_svfiprintf_r+0x4a>
 8006282:	fb05 3202 	mla	r2, r5, r2, r3
 8006286:	2001      	movs	r0, #1
 8006288:	460f      	mov	r7, r1
 800628a:	e7a6      	b.n	80061da <_svfiprintf_r+0xc6>
 800628c:	2300      	movs	r3, #0
 800628e:	250a      	movs	r5, #10
 8006290:	4619      	mov	r1, r3
 8006292:	3701      	adds	r7, #1
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	4638      	mov	r0, r7
 8006298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800629c:	3a30      	subs	r2, #48	; 0x30
 800629e:	2a09      	cmp	r2, #9
 80062a0:	d903      	bls.n	80062aa <_svfiprintf_r+0x196>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0c8      	beq.n	8006238 <_svfiprintf_r+0x124>
 80062a6:	9105      	str	r1, [sp, #20]
 80062a8:	e7c6      	b.n	8006238 <_svfiprintf_r+0x124>
 80062aa:	fb05 2101 	mla	r1, r5, r1, r2
 80062ae:	2301      	movs	r3, #1
 80062b0:	4607      	mov	r7, r0
 80062b2:	e7f0      	b.n	8006296 <_svfiprintf_r+0x182>
 80062b4:	ab03      	add	r3, sp, #12
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	4622      	mov	r2, r4
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <_svfiprintf_r+0x1ec>)
 80062bc:	a904      	add	r1, sp, #16
 80062be:	4640      	mov	r0, r8
 80062c0:	f3af 8000 	nop.w
 80062c4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80062c8:	4681      	mov	r9, r0
 80062ca:	d1d6      	bne.n	800627a <_svfiprintf_r+0x166>
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	065b      	lsls	r3, r3, #25
 80062d0:	f53f af35 	bmi.w	800613e <_svfiprintf_r+0x2a>
 80062d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062d6:	b01d      	add	sp, #116	; 0x74
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	ab03      	add	r3, sp, #12
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4622      	mov	r2, r4
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <_svfiprintf_r+0x1ec>)
 80062e4:	a904      	add	r1, sp, #16
 80062e6:	4640      	mov	r0, r8
 80062e8:	f000 f882 	bl	80063f0 <_printf_i>
 80062ec:	e7ea      	b.n	80062c4 <_svfiprintf_r+0x1b0>
 80062ee:	bf00      	nop
 80062f0:	08006a3c 	.word	0x08006a3c
 80062f4:	08006a42 	.word	0x08006a42
 80062f8:	08006a46 	.word	0x08006a46
 80062fc:	00000000 	.word	0x00000000
 8006300:	08006061 	.word	0x08006061

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4691      	mov	r9, r2
 800630a:	461f      	mov	r7, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	4606      	mov	r6, r0
 8006312:	4293      	cmp	r3, r2
 8006314:	bfb8      	it	lt
 8006316:	4613      	movlt	r3, r2
 8006318:	f8c9 3000 	str.w	r3, [r9]
 800631c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006320:	460c      	mov	r4, r1
 8006322:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006326:	b112      	cbz	r2, 800632e <_printf_common+0x2a>
 8006328:	3301      	adds	r3, #1
 800632a:	f8c9 3000 	str.w	r3, [r9]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006338:	3302      	addmi	r3, #2
 800633a:	f8c9 3000 	strmi.w	r3, [r9]
 800633e:	6825      	ldr	r5, [r4, #0]
 8006340:	f015 0506 	ands.w	r5, r5, #6
 8006344:	d107      	bne.n	8006356 <_printf_common+0x52>
 8006346:	f104 0a19 	add.w	sl, r4, #25
 800634a:	68e3      	ldr	r3, [r4, #12]
 800634c:	f8d9 2000 	ldr.w	r2, [r9]
 8006350:	1a9b      	subs	r3, r3, r2
 8006352:	42ab      	cmp	r3, r5
 8006354:	dc29      	bgt.n	80063aa <_printf_common+0xa6>
 8006356:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	3300      	adds	r3, #0
 800635e:	bf18      	it	ne
 8006360:	2301      	movne	r3, #1
 8006362:	0692      	lsls	r2, r2, #26
 8006364:	d42e      	bmi.n	80063c4 <_printf_common+0xc0>
 8006366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800636a:	4639      	mov	r1, r7
 800636c:	4630      	mov	r0, r6
 800636e:	47c0      	blx	r8
 8006370:	3001      	adds	r0, #1
 8006372:	d021      	beq.n	80063b8 <_printf_common+0xb4>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	68e5      	ldr	r5, [r4, #12]
 8006378:	f003 0306 	and.w	r3, r3, #6
 800637c:	2b04      	cmp	r3, #4
 800637e:	bf18      	it	ne
 8006380:	2500      	movne	r5, #0
 8006382:	f8d9 2000 	ldr.w	r2, [r9]
 8006386:	f04f 0900 	mov.w	r9, #0
 800638a:	bf08      	it	eq
 800638c:	1aad      	subeq	r5, r5, r2
 800638e:	68a3      	ldr	r3, [r4, #8]
 8006390:	6922      	ldr	r2, [r4, #16]
 8006392:	bf08      	it	eq
 8006394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006398:	4293      	cmp	r3, r2
 800639a:	bfc4      	itt	gt
 800639c:	1a9b      	subgt	r3, r3, r2
 800639e:	18ed      	addgt	r5, r5, r3
 80063a0:	341a      	adds	r4, #26
 80063a2:	454d      	cmp	r5, r9
 80063a4:	d11a      	bne.n	80063dc <_printf_common+0xd8>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e008      	b.n	80063bc <_printf_common+0xb8>
 80063aa:	2301      	movs	r3, #1
 80063ac:	4652      	mov	r2, sl
 80063ae:	4639      	mov	r1, r7
 80063b0:	4630      	mov	r0, r6
 80063b2:	47c0      	blx	r8
 80063b4:	3001      	adds	r0, #1
 80063b6:	d103      	bne.n	80063c0 <_printf_common+0xbc>
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c0:	3501      	adds	r5, #1
 80063c2:	e7c2      	b.n	800634a <_printf_common+0x46>
 80063c4:	2030      	movs	r0, #48	; 0x30
 80063c6:	18e1      	adds	r1, r4, r3
 80063c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063d2:	4422      	add	r2, r4
 80063d4:	3302      	adds	r3, #2
 80063d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063da:	e7c4      	b.n	8006366 <_printf_common+0x62>
 80063dc:	2301      	movs	r3, #1
 80063de:	4622      	mov	r2, r4
 80063e0:	4639      	mov	r1, r7
 80063e2:	4630      	mov	r0, r6
 80063e4:	47c0      	blx	r8
 80063e6:	3001      	adds	r0, #1
 80063e8:	d0e6      	beq.n	80063b8 <_printf_common+0xb4>
 80063ea:	f109 0901 	add.w	r9, r9, #1
 80063ee:	e7d8      	b.n	80063a2 <_printf_common+0x9e>

080063f0 <_printf_i>:
 80063f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063f8:	460c      	mov	r4, r1
 80063fa:	7e09      	ldrb	r1, [r1, #24]
 80063fc:	b085      	sub	sp, #20
 80063fe:	296e      	cmp	r1, #110	; 0x6e
 8006400:	4617      	mov	r7, r2
 8006402:	4606      	mov	r6, r0
 8006404:	4698      	mov	r8, r3
 8006406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006408:	f000 80b3 	beq.w	8006572 <_printf_i+0x182>
 800640c:	d822      	bhi.n	8006454 <_printf_i+0x64>
 800640e:	2963      	cmp	r1, #99	; 0x63
 8006410:	d036      	beq.n	8006480 <_printf_i+0x90>
 8006412:	d80a      	bhi.n	800642a <_printf_i+0x3a>
 8006414:	2900      	cmp	r1, #0
 8006416:	f000 80b9 	beq.w	800658c <_printf_i+0x19c>
 800641a:	2958      	cmp	r1, #88	; 0x58
 800641c:	f000 8083 	beq.w	8006526 <_printf_i+0x136>
 8006420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006424:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006428:	e032      	b.n	8006490 <_printf_i+0xa0>
 800642a:	2964      	cmp	r1, #100	; 0x64
 800642c:	d001      	beq.n	8006432 <_printf_i+0x42>
 800642e:	2969      	cmp	r1, #105	; 0x69
 8006430:	d1f6      	bne.n	8006420 <_printf_i+0x30>
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	6813      	ldr	r3, [r2, #0]
 8006436:	0605      	lsls	r5, r0, #24
 8006438:	f103 0104 	add.w	r1, r3, #4
 800643c:	d52a      	bpl.n	8006494 <_printf_i+0xa4>
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	da03      	bge.n	800644e <_printf_i+0x5e>
 8006446:	222d      	movs	r2, #45	; 0x2d
 8006448:	425b      	negs	r3, r3
 800644a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800644e:	486f      	ldr	r0, [pc, #444]	; (800660c <_printf_i+0x21c>)
 8006450:	220a      	movs	r2, #10
 8006452:	e039      	b.n	80064c8 <_printf_i+0xd8>
 8006454:	2973      	cmp	r1, #115	; 0x73
 8006456:	f000 809d 	beq.w	8006594 <_printf_i+0x1a4>
 800645a:	d808      	bhi.n	800646e <_printf_i+0x7e>
 800645c:	296f      	cmp	r1, #111	; 0x6f
 800645e:	d020      	beq.n	80064a2 <_printf_i+0xb2>
 8006460:	2970      	cmp	r1, #112	; 0x70
 8006462:	d1dd      	bne.n	8006420 <_printf_i+0x30>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	f043 0320 	orr.w	r3, r3, #32
 800646a:	6023      	str	r3, [r4, #0]
 800646c:	e003      	b.n	8006476 <_printf_i+0x86>
 800646e:	2975      	cmp	r1, #117	; 0x75
 8006470:	d017      	beq.n	80064a2 <_printf_i+0xb2>
 8006472:	2978      	cmp	r1, #120	; 0x78
 8006474:	d1d4      	bne.n	8006420 <_printf_i+0x30>
 8006476:	2378      	movs	r3, #120	; 0x78
 8006478:	4865      	ldr	r0, [pc, #404]	; (8006610 <_printf_i+0x220>)
 800647a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800647e:	e055      	b.n	800652c <_printf_i+0x13c>
 8006480:	6813      	ldr	r3, [r2, #0]
 8006482:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006486:	1d19      	adds	r1, r3, #4
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6011      	str	r1, [r2, #0]
 800648c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006490:	2301      	movs	r3, #1
 8006492:	e08c      	b.n	80065ae <_printf_i+0x1be>
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800649a:	6011      	str	r1, [r2, #0]
 800649c:	bf18      	it	ne
 800649e:	b21b      	sxthne	r3, r3
 80064a0:	e7cf      	b.n	8006442 <_printf_i+0x52>
 80064a2:	6813      	ldr	r3, [r2, #0]
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1d18      	adds	r0, r3, #4
 80064a8:	6010      	str	r0, [r2, #0]
 80064aa:	0628      	lsls	r0, r5, #24
 80064ac:	d501      	bpl.n	80064b2 <_printf_i+0xc2>
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	e002      	b.n	80064b8 <_printf_i+0xc8>
 80064b2:	0668      	lsls	r0, r5, #25
 80064b4:	d5fb      	bpl.n	80064ae <_printf_i+0xbe>
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	296f      	cmp	r1, #111	; 0x6f
 80064ba:	bf14      	ite	ne
 80064bc:	220a      	movne	r2, #10
 80064be:	2208      	moveq	r2, #8
 80064c0:	4852      	ldr	r0, [pc, #328]	; (800660c <_printf_i+0x21c>)
 80064c2:	2100      	movs	r1, #0
 80064c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064c8:	6865      	ldr	r5, [r4, #4]
 80064ca:	2d00      	cmp	r5, #0
 80064cc:	60a5      	str	r5, [r4, #8]
 80064ce:	f2c0 8095 	blt.w	80065fc <_printf_i+0x20c>
 80064d2:	6821      	ldr	r1, [r4, #0]
 80064d4:	f021 0104 	bic.w	r1, r1, #4
 80064d8:	6021      	str	r1, [r4, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d13d      	bne.n	800655a <_printf_i+0x16a>
 80064de:	2d00      	cmp	r5, #0
 80064e0:	f040 808e 	bne.w	8006600 <_printf_i+0x210>
 80064e4:	4665      	mov	r5, ip
 80064e6:	2a08      	cmp	r2, #8
 80064e8:	d10b      	bne.n	8006502 <_printf_i+0x112>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	07db      	lsls	r3, r3, #31
 80064ee:	d508      	bpl.n	8006502 <_printf_i+0x112>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	bfde      	ittt	le
 80064f8:	2330      	movle	r3, #48	; 0x30
 80064fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006502:	ebac 0305 	sub.w	r3, ip, r5
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	f8cd 8000 	str.w	r8, [sp]
 800650c:	463b      	mov	r3, r7
 800650e:	aa03      	add	r2, sp, #12
 8006510:	4621      	mov	r1, r4
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff fef6 	bl	8006304 <_printf_common>
 8006518:	3001      	adds	r0, #1
 800651a:	d14d      	bne.n	80065b8 <_printf_i+0x1c8>
 800651c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006520:	b005      	add	sp, #20
 8006522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006526:	4839      	ldr	r0, [pc, #228]	; (800660c <_printf_i+0x21c>)
 8006528:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800652c:	6813      	ldr	r3, [r2, #0]
 800652e:	6821      	ldr	r1, [r4, #0]
 8006530:	1d1d      	adds	r5, r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6015      	str	r5, [r2, #0]
 8006536:	060a      	lsls	r2, r1, #24
 8006538:	d50b      	bpl.n	8006552 <_printf_i+0x162>
 800653a:	07ca      	lsls	r2, r1, #31
 800653c:	bf44      	itt	mi
 800653e:	f041 0120 	orrmi.w	r1, r1, #32
 8006542:	6021      	strmi	r1, [r4, #0]
 8006544:	b91b      	cbnz	r3, 800654e <_printf_i+0x15e>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	f022 0220 	bic.w	r2, r2, #32
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	2210      	movs	r2, #16
 8006550:	e7b7      	b.n	80064c2 <_printf_i+0xd2>
 8006552:	064d      	lsls	r5, r1, #25
 8006554:	bf48      	it	mi
 8006556:	b29b      	uxthmi	r3, r3
 8006558:	e7ef      	b.n	800653a <_printf_i+0x14a>
 800655a:	4665      	mov	r5, ip
 800655c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006560:	fb02 3311 	mls	r3, r2, r1, r3
 8006564:	5cc3      	ldrb	r3, [r0, r3]
 8006566:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800656a:	460b      	mov	r3, r1
 800656c:	2900      	cmp	r1, #0
 800656e:	d1f5      	bne.n	800655c <_printf_i+0x16c>
 8006570:	e7b9      	b.n	80064e6 <_printf_i+0xf6>
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	6825      	ldr	r5, [r4, #0]
 8006576:	1d18      	adds	r0, r3, #4
 8006578:	6961      	ldr	r1, [r4, #20]
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	0628      	lsls	r0, r5, #24
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	d501      	bpl.n	8006586 <_printf_i+0x196>
 8006582:	6019      	str	r1, [r3, #0]
 8006584:	e002      	b.n	800658c <_printf_i+0x19c>
 8006586:	066a      	lsls	r2, r5, #25
 8006588:	d5fb      	bpl.n	8006582 <_printf_i+0x192>
 800658a:	8019      	strh	r1, [r3, #0]
 800658c:	2300      	movs	r3, #0
 800658e:	4665      	mov	r5, ip
 8006590:	6123      	str	r3, [r4, #16]
 8006592:	e7b9      	b.n	8006508 <_printf_i+0x118>
 8006594:	6813      	ldr	r3, [r2, #0]
 8006596:	1d19      	adds	r1, r3, #4
 8006598:	6011      	str	r1, [r2, #0]
 800659a:	681d      	ldr	r5, [r3, #0]
 800659c:	6862      	ldr	r2, [r4, #4]
 800659e:	2100      	movs	r1, #0
 80065a0:	4628      	mov	r0, r5
 80065a2:	f000 f837 	bl	8006614 <memchr>
 80065a6:	b108      	cbz	r0, 80065ac <_printf_i+0x1bc>
 80065a8:	1b40      	subs	r0, r0, r5
 80065aa:	6060      	str	r0, [r4, #4]
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	2300      	movs	r3, #0
 80065b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b6:	e7a7      	b.n	8006508 <_printf_i+0x118>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	462a      	mov	r2, r5
 80065bc:	4639      	mov	r1, r7
 80065be:	4630      	mov	r0, r6
 80065c0:	47c0      	blx	r8
 80065c2:	3001      	adds	r0, #1
 80065c4:	d0aa      	beq.n	800651c <_printf_i+0x12c>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	079b      	lsls	r3, r3, #30
 80065ca:	d413      	bmi.n	80065f4 <_printf_i+0x204>
 80065cc:	68e0      	ldr	r0, [r4, #12]
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	4298      	cmp	r0, r3
 80065d2:	bfb8      	it	lt
 80065d4:	4618      	movlt	r0, r3
 80065d6:	e7a3      	b.n	8006520 <_printf_i+0x130>
 80065d8:	2301      	movs	r3, #1
 80065da:	464a      	mov	r2, r9
 80065dc:	4639      	mov	r1, r7
 80065de:	4630      	mov	r0, r6
 80065e0:	47c0      	blx	r8
 80065e2:	3001      	adds	r0, #1
 80065e4:	d09a      	beq.n	800651c <_printf_i+0x12c>
 80065e6:	3501      	adds	r5, #1
 80065e8:	68e3      	ldr	r3, [r4, #12]
 80065ea:	9a03      	ldr	r2, [sp, #12]
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	42ab      	cmp	r3, r5
 80065f0:	dcf2      	bgt.n	80065d8 <_printf_i+0x1e8>
 80065f2:	e7eb      	b.n	80065cc <_printf_i+0x1dc>
 80065f4:	2500      	movs	r5, #0
 80065f6:	f104 0919 	add.w	r9, r4, #25
 80065fa:	e7f5      	b.n	80065e8 <_printf_i+0x1f8>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1ac      	bne.n	800655a <_printf_i+0x16a>
 8006600:	7803      	ldrb	r3, [r0, #0]
 8006602:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800660a:	e76c      	b.n	80064e6 <_printf_i+0xf6>
 800660c:	08006a4d 	.word	0x08006a4d
 8006610:	08006a5e 	.word	0x08006a5e

08006614 <memchr>:
 8006614:	b510      	push	{r4, lr}
 8006616:	b2c9      	uxtb	r1, r1
 8006618:	4402      	add	r2, r0
 800661a:	4290      	cmp	r0, r2
 800661c:	4603      	mov	r3, r0
 800661e:	d101      	bne.n	8006624 <memchr+0x10>
 8006620:	2300      	movs	r3, #0
 8006622:	e003      	b.n	800662c <memchr+0x18>
 8006624:	781c      	ldrb	r4, [r3, #0]
 8006626:	3001      	adds	r0, #1
 8006628:	428c      	cmp	r4, r1
 800662a:	d1f6      	bne.n	800661a <memchr+0x6>
 800662c:	4618      	mov	r0, r3
 800662e:	bd10      	pop	{r4, pc}

08006630 <memcpy>:
 8006630:	b510      	push	{r4, lr}
 8006632:	1e43      	subs	r3, r0, #1
 8006634:	440a      	add	r2, r1
 8006636:	4291      	cmp	r1, r2
 8006638:	d100      	bne.n	800663c <memcpy+0xc>
 800663a:	bd10      	pop	{r4, pc}
 800663c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006644:	e7f7      	b.n	8006636 <memcpy+0x6>

08006646 <memmove>:
 8006646:	4288      	cmp	r0, r1
 8006648:	b510      	push	{r4, lr}
 800664a:	eb01 0302 	add.w	r3, r1, r2
 800664e:	d807      	bhi.n	8006660 <memmove+0x1a>
 8006650:	1e42      	subs	r2, r0, #1
 8006652:	4299      	cmp	r1, r3
 8006654:	d00a      	beq.n	800666c <memmove+0x26>
 8006656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800665a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800665e:	e7f8      	b.n	8006652 <memmove+0xc>
 8006660:	4283      	cmp	r3, r0
 8006662:	d9f5      	bls.n	8006650 <memmove+0xa>
 8006664:	1881      	adds	r1, r0, r2
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	42d3      	cmn	r3, r2
 800666a:	d100      	bne.n	800666e <memmove+0x28>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006672:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006676:	e7f7      	b.n	8006668 <memmove+0x22>

08006678 <_free_r>:
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4605      	mov	r5, r0
 800667c:	2900      	cmp	r1, #0
 800667e:	d043      	beq.n	8006708 <_free_r+0x90>
 8006680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006684:	1f0c      	subs	r4, r1, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfb8      	it	lt
 800668a:	18e4      	addlt	r4, r4, r3
 800668c:	f000 f8d0 	bl	8006830 <__malloc_lock>
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <_free_r+0x94>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	4610      	mov	r0, r2
 8006696:	b933      	cbnz	r3, 80066a6 <_free_r+0x2e>
 8006698:	6063      	str	r3, [r4, #4]
 800669a:	6014      	str	r4, [r2, #0]
 800669c:	4628      	mov	r0, r5
 800669e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066a2:	f000 b8c6 	b.w	8006832 <__malloc_unlock>
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	d90b      	bls.n	80066c2 <_free_r+0x4a>
 80066aa:	6821      	ldr	r1, [r4, #0]
 80066ac:	1862      	adds	r2, r4, r1
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bf01      	itttt	eq
 80066b2:	681a      	ldreq	r2, [r3, #0]
 80066b4:	685b      	ldreq	r3, [r3, #4]
 80066b6:	1852      	addeq	r2, r2, r1
 80066b8:	6022      	streq	r2, [r4, #0]
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	6004      	str	r4, [r0, #0]
 80066be:	e7ed      	b.n	800669c <_free_r+0x24>
 80066c0:	4613      	mov	r3, r2
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	b10a      	cbz	r2, 80066ca <_free_r+0x52>
 80066c6:	42a2      	cmp	r2, r4
 80066c8:	d9fa      	bls.n	80066c0 <_free_r+0x48>
 80066ca:	6819      	ldr	r1, [r3, #0]
 80066cc:	1858      	adds	r0, r3, r1
 80066ce:	42a0      	cmp	r0, r4
 80066d0:	d10b      	bne.n	80066ea <_free_r+0x72>
 80066d2:	6820      	ldr	r0, [r4, #0]
 80066d4:	4401      	add	r1, r0
 80066d6:	1858      	adds	r0, r3, r1
 80066d8:	4282      	cmp	r2, r0
 80066da:	6019      	str	r1, [r3, #0]
 80066dc:	d1de      	bne.n	800669c <_free_r+0x24>
 80066de:	6810      	ldr	r0, [r2, #0]
 80066e0:	6852      	ldr	r2, [r2, #4]
 80066e2:	4401      	add	r1, r0
 80066e4:	6019      	str	r1, [r3, #0]
 80066e6:	605a      	str	r2, [r3, #4]
 80066e8:	e7d8      	b.n	800669c <_free_r+0x24>
 80066ea:	d902      	bls.n	80066f2 <_free_r+0x7a>
 80066ec:	230c      	movs	r3, #12
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	e7d4      	b.n	800669c <_free_r+0x24>
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	1821      	adds	r1, r4, r0
 80066f6:	428a      	cmp	r2, r1
 80066f8:	bf01      	itttt	eq
 80066fa:	6811      	ldreq	r1, [r2, #0]
 80066fc:	6852      	ldreq	r2, [r2, #4]
 80066fe:	1809      	addeq	r1, r1, r0
 8006700:	6021      	streq	r1, [r4, #0]
 8006702:	6062      	str	r2, [r4, #4]
 8006704:	605c      	str	r4, [r3, #4]
 8006706:	e7c9      	b.n	800669c <_free_r+0x24>
 8006708:	bd38      	pop	{r3, r4, r5, pc}
 800670a:	bf00      	nop
 800670c:	20000168 	.word	0x20000168

08006710 <_malloc_r>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	1ccd      	adds	r5, r1, #3
 8006714:	f025 0503 	bic.w	r5, r5, #3
 8006718:	3508      	adds	r5, #8
 800671a:	2d0c      	cmp	r5, #12
 800671c:	bf38      	it	cc
 800671e:	250c      	movcc	r5, #12
 8006720:	2d00      	cmp	r5, #0
 8006722:	4606      	mov	r6, r0
 8006724:	db01      	blt.n	800672a <_malloc_r+0x1a>
 8006726:	42a9      	cmp	r1, r5
 8006728:	d903      	bls.n	8006732 <_malloc_r+0x22>
 800672a:	230c      	movs	r3, #12
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	2000      	movs	r0, #0
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	f000 f87d 	bl	8006830 <__malloc_lock>
 8006736:	4a21      	ldr	r2, [pc, #132]	; (80067bc <_malloc_r+0xac>)
 8006738:	6814      	ldr	r4, [r2, #0]
 800673a:	4621      	mov	r1, r4
 800673c:	b991      	cbnz	r1, 8006764 <_malloc_r+0x54>
 800673e:	4c20      	ldr	r4, [pc, #128]	; (80067c0 <_malloc_r+0xb0>)
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	b91b      	cbnz	r3, 800674c <_malloc_r+0x3c>
 8006744:	4630      	mov	r0, r6
 8006746:	f000 f863 	bl	8006810 <_sbrk_r>
 800674a:	6020      	str	r0, [r4, #0]
 800674c:	4629      	mov	r1, r5
 800674e:	4630      	mov	r0, r6
 8006750:	f000 f85e 	bl	8006810 <_sbrk_r>
 8006754:	1c43      	adds	r3, r0, #1
 8006756:	d124      	bne.n	80067a2 <_malloc_r+0x92>
 8006758:	230c      	movs	r3, #12
 800675a:	4630      	mov	r0, r6
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	f000 f868 	bl	8006832 <__malloc_unlock>
 8006762:	e7e4      	b.n	800672e <_malloc_r+0x1e>
 8006764:	680b      	ldr	r3, [r1, #0]
 8006766:	1b5b      	subs	r3, r3, r5
 8006768:	d418      	bmi.n	800679c <_malloc_r+0x8c>
 800676a:	2b0b      	cmp	r3, #11
 800676c:	d90f      	bls.n	800678e <_malloc_r+0x7e>
 800676e:	600b      	str	r3, [r1, #0]
 8006770:	18cc      	adds	r4, r1, r3
 8006772:	50cd      	str	r5, [r1, r3]
 8006774:	4630      	mov	r0, r6
 8006776:	f000 f85c 	bl	8006832 <__malloc_unlock>
 800677a:	f104 000b 	add.w	r0, r4, #11
 800677e:	1d23      	adds	r3, r4, #4
 8006780:	f020 0007 	bic.w	r0, r0, #7
 8006784:	1ac3      	subs	r3, r0, r3
 8006786:	d0d3      	beq.n	8006730 <_malloc_r+0x20>
 8006788:	425a      	negs	r2, r3
 800678a:	50e2      	str	r2, [r4, r3]
 800678c:	e7d0      	b.n	8006730 <_malloc_r+0x20>
 800678e:	684b      	ldr	r3, [r1, #4]
 8006790:	428c      	cmp	r4, r1
 8006792:	bf16      	itet	ne
 8006794:	6063      	strne	r3, [r4, #4]
 8006796:	6013      	streq	r3, [r2, #0]
 8006798:	460c      	movne	r4, r1
 800679a:	e7eb      	b.n	8006774 <_malloc_r+0x64>
 800679c:	460c      	mov	r4, r1
 800679e:	6849      	ldr	r1, [r1, #4]
 80067a0:	e7cc      	b.n	800673c <_malloc_r+0x2c>
 80067a2:	1cc4      	adds	r4, r0, #3
 80067a4:	f024 0403 	bic.w	r4, r4, #3
 80067a8:	42a0      	cmp	r0, r4
 80067aa:	d005      	beq.n	80067b8 <_malloc_r+0xa8>
 80067ac:	1a21      	subs	r1, r4, r0
 80067ae:	4630      	mov	r0, r6
 80067b0:	f000 f82e 	bl	8006810 <_sbrk_r>
 80067b4:	3001      	adds	r0, #1
 80067b6:	d0cf      	beq.n	8006758 <_malloc_r+0x48>
 80067b8:	6025      	str	r5, [r4, #0]
 80067ba:	e7db      	b.n	8006774 <_malloc_r+0x64>
 80067bc:	20000168 	.word	0x20000168
 80067c0:	2000016c 	.word	0x2000016c

080067c4 <_realloc_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	4607      	mov	r7, r0
 80067c8:	4614      	mov	r4, r2
 80067ca:	460e      	mov	r6, r1
 80067cc:	b921      	cbnz	r1, 80067d8 <_realloc_r+0x14>
 80067ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067d2:	4611      	mov	r1, r2
 80067d4:	f7ff bf9c 	b.w	8006710 <_malloc_r>
 80067d8:	b922      	cbnz	r2, 80067e4 <_realloc_r+0x20>
 80067da:	f7ff ff4d 	bl	8006678 <_free_r>
 80067de:	4625      	mov	r5, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	f000 f826 	bl	8006834 <_malloc_usable_size_r>
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d20f      	bcs.n	800680c <_realloc_r+0x48>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff ff8e 	bl	8006710 <_malloc_r>
 80067f4:	4605      	mov	r5, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d0f2      	beq.n	80067e0 <_realloc_r+0x1c>
 80067fa:	4631      	mov	r1, r6
 80067fc:	4622      	mov	r2, r4
 80067fe:	f7ff ff17 	bl	8006630 <memcpy>
 8006802:	4631      	mov	r1, r6
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff ff37 	bl	8006678 <_free_r>
 800680a:	e7e9      	b.n	80067e0 <_realloc_r+0x1c>
 800680c:	4635      	mov	r5, r6
 800680e:	e7e7      	b.n	80067e0 <_realloc_r+0x1c>

08006810 <_sbrk_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	2300      	movs	r3, #0
 8006814:	4c05      	ldr	r4, [pc, #20]	; (800682c <_sbrk_r+0x1c>)
 8006816:	4605      	mov	r5, r0
 8006818:	4608      	mov	r0, r1
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	f7fb ff18 	bl	8002650 <_sbrk>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_sbrk_r+0x1a>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	b103      	cbz	r3, 800682a <_sbrk_r+0x1a>
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	20000338 	.word	0x20000338

08006830 <__malloc_lock>:
 8006830:	4770      	bx	lr

08006832 <__malloc_unlock>:
 8006832:	4770      	bx	lr

08006834 <_malloc_usable_size_r>:
 8006834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006838:	1f18      	subs	r0, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	bfbc      	itt	lt
 800683e:	580b      	ldrlt	r3, [r1, r0]
 8006840:	18c0      	addlt	r0, r0, r3
 8006842:	4770      	bx	lr

08006844 <_init>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr

08006850 <_fini>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr
