
luz_temp_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  080090e4  080090e4  000190e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b0  080094b0  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  080094b0  080094b0  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  080094b0  080094b0  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080094b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000130  080095e8  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080095e8  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001770e  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ddb  00000000  00000000  00037867  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  0003b648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001468  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000543f  00000000  00000000  0003e130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000150df  00000000  00000000  0004356f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e777  00000000  00000000  0005864e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e2c  00000000  00000000  000d6e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000130 	.word	0x20000130
 8000128:	00000000 	.word	0x00000000
 800012c:	080090cc 	.word	0x080090cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000134 	.word	0x20000134
 8000148:	080090cc 	.word	0x080090cc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	889b      	ldrh	r3, [r3, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f004 fa22 	bl	8004abe <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000680:	2311      	movs	r3, #17
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	79db      	ldrb	r3, [r3, #7]
 8000688:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800068a:	2303      	movs	r3, #3
 800068c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f107 0208 	add.w	r2, r7, #8
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f004 f89f 	bl	80047dc <HAL_GPIO_Init>
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	79db      	ldrb	r3, [r3, #7]
 80006ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 f880 	bl	80047dc <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80006ee:	4aad      	ldr	r2, [pc, #692]	; (80009a4 <DHT_getData+0x2c0>)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000708:	84fb      	strh	r3, [r7, #38]	; 0x26
 800070a:	e002      	b.n	8000712 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000712:	f003 fb9d 	bl	8003e50 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000720:	429a      	cmp	r2, r3
 8000722:	d212      	bcs.n	800074a <DHT_getData+0x66>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00e      	beq.n	800074a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	61bb      	str	r3, [r7, #24]
		return data;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	461a      	mov	r2, r3
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000744:	e882 0003 	stmia.w	r2, {r0, r1}
 8000748:	e161      	b.n	8000a0e <DHT_getData+0x32a>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800074a:	f003 fb81 	bl	8003e50 <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	f7ff ff7c 	bl	8000654 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f004 f9a9 	bl	8004abe <HAL_GPIO_WritePin>
	Delay(18);
 800076c:	2012      	movs	r0, #18
 800076e:	f003 fb79 	bl	8003e64 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	889b      	ldrh	r3, [r3, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f004 f99e 	bl	8004abe <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	f7ff ff8f 	bl	80006a6 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800078e:	e019      	b.n	80007c4 <DHT_getData+0xe0>
		timeout++;
 8000790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000798:	f242 7210 	movw	r2, #10000	; 0x2710
 800079c:	4293      	cmp	r3, r2
 800079e:	d911      	bls.n	80007c4 <DHT_getData+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007a8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007b0:	60da      	str	r2, [r3, #12]

			return data;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007be:	e882 0003 	stmia.w	r2, {r0, r1}
 80007c2:	e124      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f004 f95e 	bl	8004a90 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d0da      	beq.n	8000790 <DHT_getData+0xac>
		}
	}
	timeout = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80007de:	e019      	b.n	8000814 <DHT_getData+0x130>
		timeout++;
 80007e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e2:	3301      	adds	r3, #1
 80007e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80007e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d911      	bls.n	8000814 <DHT_getData+0x130>
 80007f0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007f8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000800:	60da      	str	r2, [r3, #12]

			return data;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000812:	e0fc      	b.n	8000a0e <DHT_getData+0x32a>
	while(!getLine()) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f004 f936 	bl	8004a90 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d1da      	bne.n	80007e0 <DHT_getData+0xfc>
		}
	}
	timeout = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800082e:	e011      	b.n	8000854 <DHT_getData+0x170>
		timeout++;
 8000830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000832:	3301      	adds	r3, #1
 8000834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000838:	f242 7210 	movw	r2, #10000	; 0x2710
 800083c:	4293      	cmp	r3, r2
 800083e:	d909      	bls.n	8000854 <DHT_getData+0x170>
 8000840:	b662      	cpsie	i
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800084e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000852:	e0dc      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f004 f916 	bl	8004a90 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d0e2      	beq.n	8000830 <DHT_getData+0x14c>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800087a:	e05b      	b.n	8000934 <DHT_getData+0x250>
		for(uint8_t b = 7; b != 255; b--) {
 800087c:	2307      	movs	r3, #7
 800087e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000882:	e04e      	b.n	8000922 <DHT_getData+0x23e>
			uint16_t hT = 0, lT = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	843b      	strh	r3, [r7, #32]
 8000888:	2300      	movs	r3, #0
 800088a:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800088c:	e002      	b.n	8000894 <DHT_getData+0x1b0>
 800088e:	8bfb      	ldrh	r3, [r7, #30]
 8000890:	3301      	adds	r3, #1
 8000892:	83fb      	strh	r3, [r7, #30]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f004 f8f6 	bl	8004a90 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d004      	beq.n	80008b4 <DHT_getData+0x1d0>
 80008aa:	8bfb      	ldrh	r3, [r7, #30]
 80008ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d1ec      	bne.n	800088e <DHT_getData+0x1aa>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 80008b8:	e002      	b.n	80008c0 <DHT_getData+0x1dc>
 80008ba:	8c3b      	ldrh	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	843b      	strh	r3, [r7, #32]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f004 f8e0 	bl	8004a90 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <DHT_getData+0x1fc>
 80008d6:	8c3b      	ldrh	r3, [r7, #32]
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	4293      	cmp	r3, r2
 80008de:	d1ec      	bne.n	80008ba <DHT_getData+0x1d6>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80008e0:	8c3a      	ldrh	r2, [r7, #32]
 80008e2:	8bfb      	ldrh	r3, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d917      	bls.n	8000918 <DHT_getData+0x234>
 80008e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008f0:	4413      	add	r3, r2
 80008f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000912:	440b      	add	r3, r1
 8000914:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 8000918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800091c:	3b01      	subs	r3, #1
 800091e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000922:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d1ac      	bne.n	8000884 <DHT_getData+0x1a0>
	for(uint8_t a = 0; a < 5; a++) {
 800092a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092e:	3301      	adds	r3, #1
 8000930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000938:	2b04      	cmp	r3, #4
 800093a:	d99f      	bls.n	800087c <DHT_getData+0x198>
 800093c:	b662      	cpsie	i
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800093e:	7b3a      	ldrb	r2, [r7, #12]
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	4413      	add	r3, r2
 8000944:	b2da      	uxtb	r2, r3
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	4413      	add	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	7c3b      	ldrb	r3, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d14c      	bne.n	80009f2 <DHT_getData+0x30e>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d138      	bne.n	80009d2 <DHT_getData+0x2ee>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	7b7a      	ldrb	r2, [r7, #13]
 8000966:	4313      	orrs	r3, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fca9 	bl	80002c0 <__aeabi_i2f>
 800096e:	4603      	mov	r3, r0
 8000970:	490d      	ldr	r1, [pc, #52]	; (80009a8 <DHT_getData+0x2c4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fcf8 	bl	8000368 <__aeabi_fmul>
 8000978:	4603      	mov	r3, r0
 800097a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	db13      	blt.n	80009ac <DHT_getData+0x2c8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	4313      	orrs	r3, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc97 	bl	80002c0 <__aeabi_i2f>
 8000992:	4603      	mov	r3, r0
 8000994:	4904      	ldr	r1, [pc, #16]	; (80009a8 <DHT_getData+0x2c4>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fce6 	bl	8000368 <__aeabi_fmul>
 800099c:	4603      	mov	r3, r0
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	e017      	b.n	80009d2 <DHT_getData+0x2ee>
 80009a2:	bf00      	nop
 80009a4:	080090e4 	.word	0x080090e4
 80009a8:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4313      	orrs	r3, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc7e 	bl	80002c0 <__aeabi_i2f>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <DHT_getData+0x334>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fccd 	bl	8000368 <__aeabi_fmul>
 80009ce:	4603      	mov	r3, r0
 80009d0:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	799b      	ldrb	r3, [r3, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <DHT_getData+0x30e>
			data.hum = (float)rawData[0];
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fc6b 	bl	80002b8 <__aeabi_ui2f>
 80009e2:	4603      	mov	r3, r0
 80009e4:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc65 	bl	80002b8 <__aeabi_ui2f>
 80009ee:	4603      	mov	r3, r0
 80009f0:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	461a      	mov	r2, r3
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	bdcccccd 	.word	0xbdcccccd

08000a1c <init_botonera>:

static uint8_t read_input, last_input, fall_input, rise_input;
static uint8_t write_output = 0xFF;


void init_botonera (I2C_HandleTypeDef* i2c_handler, uint8_t i2c_address){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]

	pcf8574_init(i2c_handler, i2c_address);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f8d9 	bl	8000be4 <pcf8574_init>

	//lectura inicial
	flag_sinBotones = HAL_I2C_Master_Receive(i2c_handler, i2c_address << 1, &read_input, 1, 100);
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <init_botonera+0x4c>)
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f004 fa7a 	bl	8004f3c <HAL_I2C_Master_Receive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <init_botonera+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	last_input = read_input;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <init_botonera+0x4c>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <init_botonera+0x54>)
 8000a56:	701a      	strb	r2, [r3, #0]

	pcf8574_writePort(0xFF); //weak pullup para todos los pines
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	f000 f8f3 	bl	8000c44 <pcf8574_writePort>
} //fin init_botonera()
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000014c 	.word	0x2000014c
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	2000014d 	.word	0x2000014d

08000a74 <lecturaTeclas>:


void lecturaTeclas(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if (flag_sinBotones != HAL_OK) return;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <lecturaTeclas+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d106      	bne.n	8000a8e <lecturaTeclas+0x1a>
	read_input = pcf8574_readPort();
 8000a80:	f000 f8c8 	bl	8000c14 <pcf8574_readPort>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <lecturaTeclas+0x24>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e000      	b.n	8000a90 <lecturaTeclas+0x1c>
	if (flag_sinBotones != HAL_OK) return;
 8000a8e:	bf00      	nop
} //fin lecturaTeclas()
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000
 8000a98:	2000014c 	.word	0x2000014c

08000a9c <update_teclas>:

void update_teclas (void){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

	fall_input = last_input & ~read_input;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <update_teclas+0x48>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	b25a      	sxtb	r2, r3
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <update_teclas+0x4c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <update_teclas+0x50>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	rise_input = ~last_input & read_input;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <update_teclas+0x4c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <update_teclas+0x48>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4013      	ands	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <update_teclas+0x54>)
 8000ad2:	701a      	strb	r2, [r3, #0]

	last_input = read_input;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <update_teclas+0x48>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <update_teclas+0x4c>)
 8000ada:	701a      	strb	r2, [r3, #0]

} //fin update_teclas()
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	2000014c 	.word	0x2000014c
 8000ae8:	2000014d 	.word	0x2000014d
 8000aec:	2000014e 	.word	0x2000014e
 8000af0:	2000014f 	.word	0x2000014f

08000af4 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]

	if (flag_sinBotones != 0) return HIGH_L;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <getStatBoton+0x6c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <getStatBoton+0x16>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e024      	b.n	8000b54 <getStatBoton+0x60>

	if ( (fall_input & (1 << b)) != 0)
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <getStatBoton+0x70>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	fa42 f303 	asr.w	r3, r2, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <getStatBoton+0x2e>
		return FALL;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e018      	b.n	8000b54 <getStatBoton+0x60>

	if ( (rise_input & (1 << b)) != 0)
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <getStatBoton+0x74>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	fa42 f303 	asr.w	r3, r2, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <getStatBoton+0x46>
		return RISE;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e00c      	b.n	8000b54 <getStatBoton+0x60>

	if ( (read_input & (1 << b)) != 0)
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <getStatBoton+0x78>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	fa42 f303 	asr.w	r3, r2, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <getStatBoton+0x5e>
		return HIGH_L;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <getStatBoton+0x60>

	return LOW_L;
 8000b52:	2300      	movs	r3, #0
} //fin getStatBoton()
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000014e 	.word	0x2000014e
 8000b68:	2000014f 	.word	0x2000014f
 8000b6c:	2000014c 	.word	0x2000014c

08000b70 <setOutput>:
uint8_t detectaAlgunBoton (void){
	return 0;
} //fin detectaAgunBoton()


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <setOutput+0x30>
		write_output |= (uint8_t)(1 << (s + 6));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3306      	adds	r3, #6
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <setOutput+0x58>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <setOutput+0x58>)
 8000b9c:	701a      	strb	r2, [r3, #0]
		return;
 8000b9e:	e00f      	b.n	8000bc0 <setOutput+0x50>
	}else{
		write_output &= ~( (uint8_t)(1 << (s + 6)) );
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <setOutput+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <setOutput+0x58>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	} //fin if val

} //fin setOutput()
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000001 	.word	0x20000001

08000bcc <update_outputs>:

void update_outputs (void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	pcf8574_writePort(write_output);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <update_outputs+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f835 	bl	8000c44 <pcf8574_writePort>

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000001 	.word	0x20000001

08000be4 <pcf8574_init>:
#include "PCF8574_lfs.h"

static I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t addressPCF8574; //(0x20)<<1 // change this according to ur setup

void pcf8574_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <pcf8574_init+0x28>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
	addressPCF8574 = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <pcf8574_init+0x2c>)
 8000bfe:	701a      	strb	r2, [r3, #0]
} //fin pcf8574_init()
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000150 	.word	0x20000150
 8000c10:	200001b0 	.word	0x200001b0

08000c14 <pcf8574_readPort>:

uint8_t pcf8574_readPort (void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
	uint8_t reg;
	HAL_I2C_Master_Receive(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <pcf8574_readPort+0x28>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <pcf8574_readPort+0x2c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	1dfa      	adds	r2, r7, #7
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f004 f986 	bl	8004f3c <HAL_I2C_Master_Receive>
	return reg;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
} //fin pcf8574_readInputs()
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000150 	.word	0x20000150
 8000c40:	200001b0 	.word	0x200001b0

08000c44 <pcf8574_writePort>:

void pcf8574_writePort (uint8_t reg){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <pcf8574_writePort+0x28>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <pcf8574_writePort+0x2c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	1dfa      	adds	r2, r7, #7
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f004 f86e 	bl	8004d40 <HAL_I2C_Master_Transmit>
} //fin pcf8574_writeOutputs
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000150 	.word	0x20000150
 8000c70:	200001b0 	.word	0x200001b0

08000c74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c86:	4a19      	ldr	r2, [pc, #100]	; (8000cec <MX_ADC1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cb2:	f003 f8f9 	bl	8003ea8 <HAL_ADC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 fea0 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cd2:	f003 fa7b 	bl	80041cc <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cdc:	f000 fe90 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001e4 	.word	0x200001e4
 8000cec:	40012400 	.word	0x40012400

08000cf0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <MX_ADC2_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d1a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d2e:	f003 f8bb 	bl	8003ea8 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f000 fe62 	bl	8001a00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d4e:	f003 fa3d 	bl	80041cc <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d58:	f000 fe52 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	200001b4 	.word	0x200001b4
 8000d68:	40012800 	.word	0x40012800

08000d6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_ADC_MspInit+0xbc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d122      	bne.n	8000dd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000dcc:	f003 fd06 	bl	80047dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dd0:	e026      	b.n	8000e20 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d121      	bne.n	8000e20 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000e1c:	f003 fcde 	bl	80047dc <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40012800 	.word	0x40012800

08000e38 <init_sensores>:
//variables externas
extern I2C_HandleTypeDef hi2c1;
extern uint8_t max_periodoTest; //49; //24;


void init_sensores (ADC_HandleTypeDef* handler_adc){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af04      	add	r7, sp, #16
 8000e3e:	6078      	str	r0, [r7, #4]
	hadc = handler_adc;
 8000e40:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <init_sensores+0x9c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]

	HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_MODO_AUTO, I2C_MEMADD_SIZE_16BIT, &modoAuto, 1, 100);
 8000e46:	2364      	movs	r3, #100	; 0x64
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <init_sensores+0xa0>)
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2310      	movs	r3, #16
 8000e54:	2205      	movs	r2, #5
 8000e56:	21a0      	movs	r1, #160	; 0xa0
 8000e58:	4820      	ldr	r0, [pc, #128]	; (8000edc <init_sensores+0xa4>)
 8000e5a:	f004 fb97 	bl	800558c <HAL_I2C_Mem_Read>
	setOutput(OUT_MODO, !modoAuto); //LOGICA NEGATIVA
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <init_sensores+0xa0>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	bf0c      	ite	eq
 8000e66:	2301      	moveq	r3, #1
 8000e68:	2300      	movne	r3, #0
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fe7e 	bl	8000b70 <setOutput>

	HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_ESTADO_LUZ, I2C_MEMADD_SIZE_16BIT, &estadoRele, 1, 100);
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	9302      	str	r3, [sp, #8]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	9301      	str	r3, [sp, #4]
 8000e7c:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <init_sensores+0xa8>)
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2310      	movs	r3, #16
 8000e82:	2204      	movs	r2, #4
 8000e84:	21a0      	movs	r1, #160	; 0xa0
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <init_sensores+0xa4>)
 8000e88:	f004 fb80 	bl	800558c <HAL_I2C_Mem_Read>
	HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA NEGATIVA
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <init_sensores+0xa8>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <init_sensores+0xac>)
 8000e98:	f003 fe11 	bl	8004abe <HAL_GPIO_WritePin>

	HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_MAX_LDR, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&umbralMaxLDR, 4, 100);
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <init_sensores+0xb0>)
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	2206      	movs	r2, #6
 8000eac:	21a0      	movs	r1, #160	; 0xa0
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <init_sensores+0xa4>)
 8000eb0:	f004 fb6c 	bl	800558c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_MIN_LDR, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&umbralMinLDR, 4, 100);
 8000eb4:	2364      	movs	r3, #100	; 0x64
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2304      	movs	r3, #4
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <init_sensores+0xb4>)
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	220a      	movs	r2, #10
 8000ec4:	21a0      	movs	r1, #160	; 0xa0
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <init_sensores+0xa4>)
 8000ec8:	f004 fb60 	bl	800558c <HAL_I2C_Mem_Read>
} //fin init_sensores()
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000228 	.word	0x20000228
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	20000234 	.word	0x20000234
 8000ee0:	20000220 	.word	0x20000220
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	20000008 	.word	0x20000008

08000ef0 <update_DHT>:


void update_DHT (void){
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
	datosDHT = DHT_getData(&sensorDHT);
 8000ef6:	4c08      	ldr	r4, [pc, #32]	; (8000f18 <update_DHT+0x28>)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <update_DHT+0x2c>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fbf1 	bl	80006e4 <DHT_getData>
 8000f02:	4622      	mov	r2, r4
 8000f04:	463b      	mov	r3, r7
 8000f06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f0a:	e882 0003 	stmia.w	r2, {r0, r1}
} //fin update_temp()
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000218 	.word	0x20000218
 8000f1c:	20000010 	.word	0x20000010

08000f20 <get_datosDHT>:


DHT_data get_datosDHT (void){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	return datosDHT;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <get_datosDHT+0x20>)
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	e883 0003 	stmia.w	r3, {r0, r1}
} //fin get_datosDHT()
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000218 	.word	0x20000218

08000f44 <update_ldr>:


void update_ldr (void){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	lecturaLDR = HAL_ADC_GetValue(hadc);
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <update_ldr+0x20>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f931 	bl	80041b4 <HAL_ADC_GetValue>
 8000f52:	4602      	mov	r2, r0
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <update_ldr+0x24>)
 8000f56:	601a      	str	r2, [r3, #0]
	flag_LDR = 1;
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <update_ldr+0x28>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
} //fin if update_ldr()
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000228 	.word	0x20000228
 8000f68:	20000154 	.word	0x20000154
 8000f6c:	20000158 	.word	0x20000158

08000f70 <get_ldr>:


uint32_t get_ldr (void){
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
	return lecturaLDR;
 8000f74:	4b02      	ldr	r3, [pc, #8]	; (8000f80 <get_ldr+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
} //fin get_ldr()
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000154 	.word	0x20000154

08000f84 <get_umbralLDR>:


uint32_t get_umbralLDR (uint8_t u){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	if (u != 0) return umbralMaxLDR;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <get_umbralLDR+0x16>
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <get_umbralLDR+0x24>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	e001      	b.n	8000f9e <get_umbralLDR+0x1a>
	return umbralMinLDR;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <get_umbralLDR+0x28>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
} //fin get_umbralLDR
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000004 	.word	0x20000004
 8000fac:	20000008 	.word	0x20000008

08000fb0 <set_umbralLDR>:


void set_umbralLDR (uint8_t u, uint32_t val){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
	if (u != 0){
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00f      	beq.n	8000fe2 <set_umbralLDR+0x32>
		umbralMaxLDR = val;
 8000fc2:	4a11      	ldr	r2, [pc, #68]	; (8001008 <set_umbralLDR+0x58>)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	6013      	str	r3, [r2, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_MAX_LDR, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&umbralMaxLDR, 4, 100);
 8000fc8:	2364      	movs	r3, #100	; 0x64
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2304      	movs	r3, #4
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <set_umbralLDR+0x58>)
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	2206      	movs	r2, #6
 8000fd8:	21a0      	movs	r1, #160	; 0xa0
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <set_umbralLDR+0x5c>)
 8000fdc:	f004 f9dc 	bl	8005398 <HAL_I2C_Mem_Write>
		return;
 8000fe0:	e00e      	b.n	8001000 <set_umbralLDR+0x50>
	}

	umbralMinLDR = val;
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <set_umbralLDR+0x60>)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
	HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_MIN_LDR, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&umbralMinLDR, 4, 100);
 8000fe8:	2364      	movs	r3, #100	; 0x64
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2304      	movs	r3, #4
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <set_umbralLDR+0x60>)
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	220a      	movs	r2, #10
 8000ff8:	21a0      	movs	r1, #160	; 0xa0
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <set_umbralLDR+0x5c>)
 8000ffc:	f004 f9cc 	bl	8005398 <HAL_I2C_Mem_Write>
} //fin set_umbralLDR
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000004 	.word	0x20000004
 800100c:	20000234 	.word	0x20000234
 8001010:	20000008 	.word	0x20000008

08001014 <set_modoLuz>:


void set_modoLuz (uint8_t val){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	modoAuto = val;
 800101e:	4a0f      	ldr	r2, [pc, #60]	; (800105c <set_modoLuz+0x48>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	7013      	strb	r3, [r2, #0]
	setOutput(OUT_MODO, !modoAuto); //LOGICA NEGATIVA
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <set_modoLuz+0x48>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f7ff fd9b 	bl	8000b70 <setOutput>
	HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_MODO_AUTO, I2C_MEMADD_SIZE_16BIT, &modoAuto, 1, 100);
 800103a:	2364      	movs	r3, #100	; 0x64
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <set_modoLuz+0x48>)
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2310      	movs	r3, #16
 8001048:	2205      	movs	r2, #5
 800104a:	21a0      	movs	r1, #160	; 0xa0
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <set_modoLuz+0x4c>)
 800104e:	f004 f9a3 	bl	8005398 <HAL_I2C_Mem_Write>
} //fin set_modoLuz()
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000234 	.word	0x20000234

08001064 <get_modoLuz>:


uint8_t get_modoLuz (void){
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	return modoAuto;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <get_modoLuz+0x10>)
 800106a:	781b      	ldrb	r3, [r3, #0]
} //fin get_modoLuz()
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	2000000c 	.word	0x2000000c

08001078 <check_luzAuto>:

void check_luzAuto (void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af04      	add	r7, sp, #16
	switch (modoAuto) {
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <check_luzAuto+0x1a4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <check_luzAuto+0x14>
 8001086:	2b01      	cmp	r3, #1
 8001088:	d03c      	beq.n	8001104 <check_luzAuto+0x8c>
			} //fin switch estadoRele
#endif
			flag_LDR = 0;
		break;
		default:
		break;
 800108a:	e0c4      	b.n	8001216 <check_luzAuto+0x19e>
			if (getStatBoton(IN_MODO) == FALL){
 800108c:	2005      	movs	r0, #5
 800108e:	f7ff fd31 	bl	8000af4 <getStatBoton>
 8001092:	4603      	mov	r3, r0
 8001094:	2b02      	cmp	r3, #2
 8001096:	d105      	bne.n	80010a4 <check_luzAuto+0x2c>
				set_modoLuz(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff ffbb 	bl	8001014 <set_modoLuz>
				refresh_infoModo();
 800109e:	f002 fb25 	bl	80036ec <refresh_infoModo>
				break;
 80010a2:	e0b8      	b.n	8001216 <check_luzAuto+0x19e>
			if (getStatBoton(IN_LUZ) == FALL){
 80010a4:	2004      	movs	r0, #4
 80010a6:	f7ff fd25 	bl	8000af4 <getStatBoton>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	f040 80b1 	bne.w	8001214 <check_luzAuto+0x19c>
				estadoRele = !estadoRele;
 80010b2:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <check_luzAuto+0x1a8>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bf0c      	ite	eq
 80010ba:	2301      	moveq	r3, #1
 80010bc:	2300      	movne	r3, #0
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b57      	ldr	r3, [pc, #348]	; (8001220 <check_luzAuto+0x1a8>)
 80010c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA POSITIVA
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <check_luzAuto+0x1a8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d0:	4854      	ldr	r0, [pc, #336]	; (8001224 <check_luzAuto+0x1ac>)
 80010d2:	f003 fcf4 	bl	8004abe <HAL_GPIO_WritePin>
				if (!timeout_saveLuzMan){ //graba el estado en manual solo si pasaron 5 segundos del último cambio
 80010d6:	4b54      	ldr	r3, [pc, #336]	; (8001228 <check_luzAuto+0x1b0>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <check_luzAuto+0x86>
					HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_ESTADO_LUZ, I2C_MEMADD_SIZE_16BIT, &estadoRele, 1, 100);
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2301      	movs	r3, #1
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <check_luzAuto+0x1a8>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2310      	movs	r3, #16
 80010ec:	2204      	movs	r2, #4
 80010ee:	21a0      	movs	r1, #160	; 0xa0
 80010f0:	484e      	ldr	r0, [pc, #312]	; (800122c <check_luzAuto+0x1b4>)
 80010f2:	f004 f951 	bl	8005398 <HAL_I2C_Mem_Write>
					timeout_saveLuzMan = MAX_SAVELUZMAN;
 80010f6:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <check_luzAuto+0x1b0>)
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	801a      	strh	r2, [r3, #0]
				refresh_infoModo();
 80010fe:	f002 faf5 	bl	80036ec <refresh_infoModo>
		break;
 8001102:	e087      	b.n	8001214 <check_luzAuto+0x19c>
			if (getStatBoton(IN_MODO) == FALL){
 8001104:	2005      	movs	r0, #5
 8001106:	f7ff fcf5 	bl	8000af4 <getStatBoton>
 800110a:	4603      	mov	r3, r0
 800110c:	2b02      	cmp	r3, #2
 800110e:	d105      	bne.n	800111c <check_luzAuto+0xa4>
				set_modoLuz(0);
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff ff7f 	bl	8001014 <set_modoLuz>
				refresh_infoModo();
 8001116:	f002 fae9 	bl	80036ec <refresh_infoModo>
				break;
 800111a:	e07c      	b.n	8001216 <check_luzAuto+0x19e>
			switch (estadoRele){ //LOGICA POSITIVA (cuando es distitnto de cero : "APAGADA")
 800111c:	4b40      	ldr	r3, [pc, #256]	; (8001220 <check_luzAuto+0x1a8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d037      	beq.n	8001194 <check_luzAuto+0x11c>
 8001124:	2b01      	cmp	r3, #1
 8001126:	d000      	beq.n	800112a <check_luzAuto+0xb2>
				break;
 8001128:	e070      	b.n	800120c <check_luzAuto+0x194>
					if (!flag_LDR) break;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <check_luzAuto+0x1b8>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d065      	beq.n	80011fe <check_luzAuto+0x186>
					if (lecturaLDR < umbralMinLDR){ //si es de noche
 8001132:	4b40      	ldr	r3, [pc, #256]	; (8001234 <check_luzAuto+0x1bc>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <check_luzAuto+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d206      	bcs.n	800114c <check_luzAuto+0xd4>
						acum_umbral++;
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <check_luzAuto+0x1c4>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <check_luzAuto+0x1c4>)
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e002      	b.n	8001152 <check_luzAuto+0xda>
						acum_umbral = 0;
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <check_luzAuto+0x1c4>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
					if (acum_umbral > 2){ //3 segundos por debajo del umbral
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <check_luzAuto+0x1c4>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d953      	bls.n	8001202 <check_luzAuto+0x18a>
						estadoRele = 0;
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <check_luzAuto+0x1a8>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA POSITIVA
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <check_luzAuto+0x1a8>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800116a:	482e      	ldr	r0, [pc, #184]	; (8001224 <check_luzAuto+0x1ac>)
 800116c:	f003 fca7 	bl	8004abe <HAL_GPIO_WritePin>
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_ESTADO_LUZ, I2C_MEMADD_SIZE_16BIT, &estadoRele, 1, 100);
 8001170:	2364      	movs	r3, #100	; 0x64
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2301      	movs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	4b29      	ldr	r3, [pc, #164]	; (8001220 <check_luzAuto+0x1a8>)
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2310      	movs	r3, #16
 800117e:	2204      	movs	r2, #4
 8001180:	21a0      	movs	r1, #160	; 0xa0
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <check_luzAuto+0x1b4>)
 8001184:	f004 f908 	bl	8005398 <HAL_I2C_Mem_Write>
						refresh_infoModo();
 8001188:	f002 fab0 	bl	80036ec <refresh_infoModo>
						acum_umbral = 0;
 800118c:	4b2b      	ldr	r3, [pc, #172]	; (800123c <check_luzAuto+0x1c4>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
						break;
 8001192:	e03b      	b.n	800120c <check_luzAuto+0x194>
					if (!flag_LDR) break;
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <check_luzAuto+0x1b8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d034      	beq.n	8001206 <check_luzAuto+0x18e>
					if (lecturaLDR > umbralMaxLDR){ //si es de día
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <check_luzAuto+0x1bc>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <check_luzAuto+0x1c8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d906      	bls.n	80011b6 <check_luzAuto+0x13e>
						acum_umbral++;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <check_luzAuto+0x1c4>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b22      	ldr	r3, [pc, #136]	; (800123c <check_luzAuto+0x1c4>)
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e002      	b.n	80011bc <check_luzAuto+0x144>
						acum_umbral = 0;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <check_luzAuto+0x1c4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
					if (acum_umbral > 2){ //3 segundos por encima del umbral
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <check_luzAuto+0x1c4>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d922      	bls.n	800120a <check_luzAuto+0x192>
						estadoRele = 1;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <check_luzAuto+0x1a8>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA POSITIVA
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <check_luzAuto+0x1a8>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <check_luzAuto+0x1ac>)
 80011d6:	f003 fc72 	bl	8004abe <HAL_GPIO_WritePin>
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_ESTADO_LUZ, I2C_MEMADD_SIZE_16BIT, &estadoRele, 1, 100);
 80011da:	2364      	movs	r3, #100	; 0x64
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <check_luzAuto+0x1a8>)
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2310      	movs	r3, #16
 80011e8:	2204      	movs	r2, #4
 80011ea:	21a0      	movs	r1, #160	; 0xa0
 80011ec:	480f      	ldr	r0, [pc, #60]	; (800122c <check_luzAuto+0x1b4>)
 80011ee:	f004 f8d3 	bl	8005398 <HAL_I2C_Mem_Write>
						refresh_infoModo();
 80011f2:	f002 fa7b 	bl	80036ec <refresh_infoModo>
						acum_umbral = 0;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <check_luzAuto+0x1c4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
						break;
 80011fc:	e006      	b.n	800120c <check_luzAuto+0x194>
					if (!flag_LDR) break;
 80011fe:	bf00      	nop
 8001200:	e004      	b.n	800120c <check_luzAuto+0x194>
				break;
 8001202:	bf00      	nop
 8001204:	e002      	b.n	800120c <check_luzAuto+0x194>
					if (!flag_LDR) break;
 8001206:	bf00      	nop
 8001208:	e000      	b.n	800120c <check_luzAuto+0x194>
				break;
 800120a:	bf00      	nop
			flag_LDR = 0;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <check_luzAuto+0x1b8>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
		break;
 8001212:	e000      	b.n	8001216 <check_luzAuto+0x19e>
		break;
 8001214:	bf00      	nop
	} //fin switch modoAuto
} //fin check_luzAuto()
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000000c 	.word	0x2000000c
 8001220:	20000220 	.word	0x20000220
 8001224:	40010c00 	.word	0x40010c00
 8001228:	20000024 	.word	0x20000024
 800122c:	20000234 	.word	0x20000234
 8001230:	20000158 	.word	0x20000158
 8001234:	20000154 	.word	0x20000154
 8001238:	20000008 	.word	0x20000008
 800123c:	20000159 	.word	0x20000159
 8001240:	20000004 	.word	0x20000004

08001244 <getStat_rele>:


uint8_t getStat_rele (void){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return estadoRele;
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <getStat_rele+0x10>)
 800124a:	781b      	ldrb	r3, [r3, #0]
} //fin get_rele()
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000220 	.word	0x20000220

08001258 <timeoutTestAuto>:


void timeoutTestAuto (void){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	timeout_auto++;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <timeoutTestAuto+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	4a03      	ldr	r2, [pc, #12]	; (8001270 <timeoutTestAuto+0x18>)
 8001264:	6013      	str	r3, [r2, #0]
} //fin timeoutTestAuto()
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000015c 	.word	0x2000015c

08001274 <start_regHora>:

void timeoutGrabaLuzMan (void){
	if (timeout_saveLuzMan != 0) timeout_saveLuzMan--;
} //fin timeoutGrabaLuzMan()

void start_regHora (void){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	flag_regHora = 1;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <start_regHora+0x1c>)
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <start_regHora+0x20>)
 8001286:	f003 fc1a 	bl	8004abe <HAL_GPIO_WritePin>
} //fin start_regHora()
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000160 	.word	0x20000160
 8001294:	40011000 	.word	0x40011000

08001298 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ca:	f043 0320 	orr.w	r3, r3, #32
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0320 	and.w	r3, r3, #32
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a1b      	ldr	r2, [pc, #108]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_GPIO_Init+0xd0>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001312:	4816      	ldr	r0, [pc, #88]	; (800136c <MX_GPIO_Init+0xd4>)
 8001314:	f003 fbd3 	bl	8004abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_GPIO_Init+0xd8>)
 8001320:	f003 fbcd 	bl	8004abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	480b      	ldr	r0, [pc, #44]	; (800136c <MX_GPIO_Init+0xd4>)
 800133e:	f003 fa4d 	bl	80047dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_rele_Pin;
 8001342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2302      	movs	r3, #2
 8001352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_rele_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0xd8>)
 800135c:	f003 fa3e 	bl	80047dc <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3720      	adds	r7, #32
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	40011000 	.word	0x40011000
 8001370:	40010c00 	.word	0x40010c00

08001374 <update_horaFecha>:
#include "hora_tablero.h"

RTC_TimeTypeDef hora;
RTC_DateTypeDef aux_fecha;

void update_horaFecha (void){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	 //segun el proyecto "MAQUINA_MD":
	  HAL_RTC_GetTime(&hrtc, &hora, RTC_FORMAT_BIN);
 8001378:	2200      	movs	r2, #0
 800137a:	4905      	ldr	r1, [pc, #20]	; (8001390 <update_horaFecha+0x1c>)
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <update_horaFecha+0x20>)
 800137e:	f005 fe9f 	bl	80070c0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &aux_fecha, RTC_FORMAT_BIN);
 8001382:	2200      	movs	r2, #0
 8001384:	4904      	ldr	r1, [pc, #16]	; (8001398 <update_horaFecha+0x24>)
 8001386:	4803      	ldr	r0, [pc, #12]	; (8001394 <update_horaFecha+0x20>)
 8001388:	f006 f828 	bl	80073dc <HAL_RTC_GetDate>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000022c 	.word	0x2000022c
 8001394:	200002cc 	.word	0x200002cc
 8001398:	20000230 	.word	0x20000230

0800139c <get_hora>:

void set_fecha (void){
	__NOP();
}

RTC_TimeTypeDef get_hora (void){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
	return hora;
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <get_hora+0x30>)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	8811      	ldrh	r1, [r2, #0]
 80013a8:	7892      	ldrb	r2, [r2, #2]
 80013aa:	8019      	strh	r1, [r3, #0]
 80013ac:	709a      	strb	r2, [r3, #2]
 80013ae:	2300      	movs	r3, #0
 80013b0:	793a      	ldrb	r2, [r7, #4]
 80013b2:	f362 0307 	bfi	r3, r2, #0, #8
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	f362 230f 	bfi	r3, r2, #8, #8
 80013bc:	79ba      	ldrb	r2, [r7, #6]
 80013be:	f362 4317 	bfi	r3, r2, #16, #8
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	2000022c 	.word	0x2000022c

080013d0 <get_fecha>:

RTC_DateTypeDef get_fecha (void){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
	return aux_fecha;
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <get_fecha+0x34>)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	6810      	ldr	r0, [r2, #0]
 80013dc:	6018      	str	r0, [r3, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	793a      	ldrb	r2, [r7, #4]
 80013e2:	f362 0307 	bfi	r3, r2, #0, #8
 80013e6:	797a      	ldrb	r2, [r7, #5]
 80013e8:	f362 230f 	bfi	r3, r2, #8, #8
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	f362 4317 	bfi	r3, r2, #16, #8
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	f362 631f 	bfi	r3, r2, #24, #8
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000230 	.word	0x20000230

08001408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C1_Init+0x50>)
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_I2C1_Init+0x54>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C1_Init+0x50>)
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_I2C1_Init+0x58>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_I2C1_Init+0x50>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_I2C1_Init+0x50>)
 8001446:	f003 fb53 	bl	8004af0 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 fad6 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000234 	.word	0x20000234
 800145c:	40005400 	.word	0x40005400
 8001460:	00061a80 	.word	0x00061a80

08001464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x70>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d123      	bne.n	80014cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149c:	23c0      	movs	r3, #192	; 0xc0
 800149e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <HAL_I2C_MspInit+0x78>)
 80014b0:	f003 f994 	bl	80047dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_I2C_MspInit+0x74>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN IWDG_Init 0 */
	if (!falseStart){
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_IWDG_Init+0x3c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <MX_IWDG_Init+0x14>
		falseStart = 1;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_IWDG_Init+0x3c>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
		return;
 80014f2:	e011      	b.n	8001518 <MX_IWDG_Init+0x38>
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <MX_IWDG_Init+0x40>)
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <MX_IWDG_Init+0x44>)
 80014f8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_IWDG_Init+0x40>)
 80014fc:	2202      	movs	r2, #2
 80014fe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <MX_IWDG_Init+0x40>)
 8001502:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001506:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_IWDG_Init+0x40>)
 800150a:	f004 fed7 	bl	80062bc <HAL_IWDG_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_IWDG_Init+0x38>
  {
    Error_Handler();
 8001514:	f000 fa74 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000161 	.word	0x20000161
 8001520:	20000288 	.word	0x20000288
 8001524:	40003000 	.word	0x40003000

08001528 <lcd_send_cmd>:

I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t SLAVE_ADDRESS_LCD; //(0x3F)<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f023 030f 	bic.w	r3, r3, #15
 8001538:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	f043 030c 	orr.w	r3, r3, #12
 8001546:	b2db      	uxtb	r3, r3
 8001548:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	b2db      	uxtb	r3, r3
 8001552:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001554:	7bbb      	ldrb	r3, [r7, #14]
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	b2db      	uxtb	r3, r3
 800155c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	b2db      	uxtb	r3, r3
 8001566:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <lcd_send_cmd+0x60>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <lcd_send_cmd+0x64>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b299      	uxth	r1, r3
 8001572:	f107 0208 	add.w	r2, r7, #8
 8001576:	2364      	movs	r3, #100	; 0x64
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2304      	movs	r3, #4
 800157c:	f003 fbe0 	bl	8004d40 <HAL_I2C_Master_Transmit>
}
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000298 	.word	0x20000298
 800158c:	20000294 	.word	0x20000294

08001590 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af02      	add	r7, sp, #8
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f043 030d 	orr.w	r3, r3, #13
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f043 0309 	orr.w	r3, r3, #9
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	f043 030d 	orr.w	r3, r3, #13
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	f043 0309 	orr.w	r3, r3, #9
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <lcd_send_data+0x60>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <lcd_send_data+0x64>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 0208 	add.w	r2, r7, #8
 80015de:	2364      	movs	r3, #100	; 0x64
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2304      	movs	r3, #4
 80015e4:	f003 fbac 	bl	8004d40 <HAL_I2C_Master_Transmit>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000298 	.word	0x20000298
 80015f4:	20000294 	.word	0x20000294

080015f8 <lcd_clear>:

void lcd_clear (void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80015fe:	2080      	movs	r0, #128	; 0x80
 8001600:	f7ff ff92 	bl	8001528 <lcd_send_cmd>
	for (int i=0; i<80; i++)
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	e005      	b.n	8001616 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800160a:	2020      	movs	r0, #32
 800160c:	f7ff ffc0 	bl	8001590 <lcd_send_data>
	for (int i=0; i<80; i++)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3301      	adds	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b4f      	cmp	r3, #79	; 0x4f
 800161a:	ddf6      	ble.n	800160a <lcd_clear+0x12>
	}
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <lcd_put_cur>:

void lcd_put_cur(int x, int y)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    switch (y){
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d82b      	bhi.n	800168c <lcd_put_cur+0x68>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <lcd_put_cur+0x18>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800165d 	.word	0x0800165d
 8001644:	0800166d 	.word	0x0800166d
 8001648:	0800167d 	.word	0x0800167d
    	case 0:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	3b80      	subs	r3, #128	; 0x80
 8001652:	b2db      	uxtb	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff67 	bl	8001528 <lcd_send_cmd>
    	break;
 800165a:	e017      	b.n	800168c <lcd_put_cur+0x68>
    	case 1:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	3b40      	subs	r3, #64	; 0x40
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5f 	bl	8001528 <lcd_send_cmd>
    	break;
 800166a:	e00f      	b.n	800168c <lcd_put_cur+0x68>
    	case 2:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3b6c      	subs	r3, #108	; 0x6c
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff57 	bl	8001528 <lcd_send_cmd>
    	break;
 800167a:	e007      	b.n	800168c <lcd_put_cur+0x68>
    	case 3:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3b2c      	subs	r3, #44	; 0x2c
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff4f 	bl	8001528 <lcd_send_cmd>
    	break;
 800168a:	bf00      	nop
    }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <lcd_init+0x98>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <lcd_init+0x9c>)
 80016ae:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80016b0:	2032      	movs	r0, #50	; 0x32
 80016b2:	f002 fbd7 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016b6:	2030      	movs	r0, #48	; 0x30
 80016b8:	f7ff ff36 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80016bc:	2005      	movs	r0, #5
 80016be:	f002 fbd1 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016c2:	2030      	movs	r0, #48	; 0x30
 80016c4:	f7ff ff30 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80016c8:	2001      	movs	r0, #1
 80016ca:	f002 fbcb 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x30);
 80016ce:	2030      	movs	r0, #48	; 0x30
 80016d0:	f7ff ff2a 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(10);
 80016d4:	200a      	movs	r0, #10
 80016d6:	f002 fbc5 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80016da:	2020      	movs	r0, #32
 80016dc:	f7ff ff24 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(10);
 80016e0:	200a      	movs	r0, #10
 80016e2:	f002 fbbf 	bl	8003e64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80016e6:	2028      	movs	r0, #40	; 0x28
 80016e8:	f7ff ff1e 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f002 fbb9 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80016f2:	2008      	movs	r0, #8
 80016f4:	f7ff ff18 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f002 fbb3 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff ff12 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f002 fbad 	bl	8003e64 <HAL_Delay>
	HAL_Delay(1);
 800170a:	2001      	movs	r0, #1
 800170c:	f002 fbaa 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001710:	2006      	movs	r0, #6
 8001712:	f7ff ff09 	bl	8001528 <lcd_send_cmd>
	HAL_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f002 fba4 	bl	8003e64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800171c:	200c      	movs	r0, #12
 800171e:	f7ff ff03 	bl	8001528 <lcd_send_cmd>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000298 	.word	0x20000298
 8001730:	20000294 	.word	0x20000294

08001734 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800173c:	e006      	b.n	800174c <lcd_send_string+0x18>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff22 	bl	8001590 <lcd_send_data>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f4      	bne.n	800173e <lcd_send_string+0xa>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <lcd_CustomChar_create>:


void lcd_CustomChar_create(uint8_t location, uint8_t charmap[]) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
	location <<= 3;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	71fb      	strb	r3, [r7, #7]

	lcd_send_cmd (0x40 | (location & 0x38) );
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001776:	b25b      	sxtb	r3, r3
 8001778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177c:	b25b      	sxtb	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fed1 	bl	8001528 <lcd_send_cmd>
	for (int i=0; i<8; i++) {
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e009      	b.n	80017a0 <lcd_CustomChar_create+0x44>
		lcd_send_data(charmap[i]);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fefb 	bl	8001590 <lcd_send_data>
	for (int i=0; i<8; i++) {
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	3301      	adds	r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	ddf2      	ble.n	800178c <lcd_CustomChar_create+0x30>
	}
} //fin lcd_CustomChar_create ()
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b6:	f002 faf3 	bl	8003da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017ba:	f000 f8ab 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017be:	f7ff fd6b 	bl	8001298 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017c2:	f7ff fa57 	bl	8000c74 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017c6:	f7ff fa93 	bl	8000cf0 <MX_ADC2_Init>
  MX_I2C1_Init();
 80017ca:	f7ff fe1d 	bl	8001408 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017ce:	f002 f879 	bl	80038c4 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017d2:	f002 f9cf 	bl	8003b74 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80017d6:	f002 fa3f 	bl	8003c58 <MX_USART1_UART_Init>
  MX_IWDG_Init();
 80017da:	f7ff fe81 	bl	80014e0 <MX_IWDG_Init>
  MX_RTC_Init();
 80017de:	f002 f803 	bl	80037e8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(150);
 80017e2:	2096      	movs	r0, #150	; 0x96
 80017e4:	f002 fb3e 	bl	8003e64 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4840      	ldr	r0, [pc, #256]	; (80018f0 <main+0x140>)
 80017f0:	f003 f965 	bl	8004abe <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80017f4:	483f      	ldr	r0, [pc, #252]	; (80018f4 <main+0x144>)
 80017f6:	f006 f973 	bl	8007ae0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80017fa:	483f      	ldr	r0, [pc, #252]	; (80018f8 <main+0x148>)
 80017fc:	f002 fc2c 	bl	8004058 <HAL_ADC_Start>
////	  HAL_GPIO_TogglePin(OUT_rele_GPIO_Port, OUT_rele_Pin);
//	  HAL_Delay(500);
//	  __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
//  }

  HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &resets, 1, 100);
 8001800:	2364      	movs	r3, #100	; 0x64
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2301      	movs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <main+0x14c>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2310      	movs	r3, #16
 800180e:	2203      	movs	r2, #3
 8001810:	21a0      	movs	r1, #160	; 0xa0
 8001812:	483b      	ldr	r0, [pc, #236]	; (8001900 <main+0x150>)
 8001814:	f003 feba 	bl	800558c <HAL_I2C_Mem_Read>
  resets++;
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <main+0x14c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b36      	ldr	r3, [pc, #216]	; (80018fc <main+0x14c>)
 8001822:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &resets, 1, 100);
 8001824:	2364      	movs	r3, #100	; 0x64
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	2301      	movs	r3, #1
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <main+0x14c>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2310      	movs	r3, #16
 8001832:	2203      	movs	r2, #3
 8001834:	21a0      	movs	r1, #160	; 0xa0
 8001836:	4832      	ldr	r0, [pc, #200]	; (8001900 <main+0x150>)
 8001838:	f003 fdae 	bl	8005398 <HAL_I2C_Mem_Write>
#ifndef IWD_OFF
  MX_IWDG_Init();
 800183c:	f7ff fe50 	bl	80014e0 <MX_IWDG_Init>
  __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <main+0x154>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001848:	601a      	str	r2, [r3, #0]
#endif
  lcd_init(&hi2c1, 0x27);
 800184a:	2127      	movs	r1, #39	; 0x27
 800184c:	482c      	ldr	r0, [pc, #176]	; (8001900 <main+0x150>)
 800184e:	f7ff ff21 	bl	8001694 <lcd_init>
//  lcd_send_string("holis");
  init_botonera(&hi2c1, 0x20);
 8001852:	2120      	movs	r1, #32
 8001854:	482a      	ldr	r0, [pc, #168]	; (8001900 <main+0x150>)
 8001856:	f7ff f8e1 	bl	8000a1c <init_botonera>
  init_sensores(&hadc1);
 800185a:	4827      	ldr	r0, [pc, #156]	; (80018f8 <main+0x148>)
 800185c:	f7ff faec 	bl	8000e38 <init_sensores>
  start_menu(0);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f8d1 	bl	8001a08 <start_menu>
#ifndef IWD_OFF
  __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <main+0x154>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800186e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tim2 != 0){
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <main+0x158>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d02e      	beq.n	80018d6 <main+0x126>

		  if (periodo_IOport != 0){
 8001878:	4b24      	ldr	r3, [pc, #144]	; (800190c <main+0x15c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <main+0xde>
			  periodo_IOport--;
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <main+0x15c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b20      	ldr	r3, [pc, #128]	; (800190c <main+0x15c>)
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e006      	b.n	800189c <main+0xec>
		  }else{
			  lecturaTeclas(); //cada 20 ms.
 800188e:	f7ff f8f1 	bl	8000a74 <lecturaTeclas>
			  update_outputs(); //cada 20 ms.
 8001892:	f7ff f99b 	bl	8000bcc <update_outputs>
			  periodo_IOport = 1;
 8001896:	4b1d      	ldr	r3, [pc, #116]	; (800190c <main+0x15c>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
		  } //fin if periodo_IOport

		  if (periodo_temp != 0){
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <main+0x160>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <main+0x102>
			  periodo_temp--;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <main+0x160>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <main+0x160>)
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e008      	b.n	80018c4 <main+0x114>
		  }else{
			  update_DHT();
 80018b2:	f7ff fb1d 	bl	8000ef0 <update_DHT>
			  update_ldr();
 80018b6:	f7ff fb45 	bl	8000f44 <update_ldr>
			  refresh_infoDHT();
 80018ba:	f001 ff0b 	bl	80036d4 <refresh_infoDHT>
			  periodo_temp = 99;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <main+0x160>)
 80018c0:	2263      	movs	r2, #99	; 0x63
 80018c2:	701a      	strb	r2, [r3, #0]
//			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, varTest);
////			  HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, varTest);
//			  periodo_test = max_periodoTest; //cada 250 ms o 500 ms
//		  }

		  timeoutMenu();
 80018c4:	f000 f8d0 	bl	8001a68 <timeoutMenu>
		  check_duracionPulsadores();
 80018c8:	f000 f8dc 	bl	8001a84 <check_duracionPulsadores>
		  timeoutTestAuto();
 80018cc:	f7ff fcc4 	bl	8001258 <timeoutTestAuto>


		  flag_tim2 = 0;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <main+0x158>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
	  } //fin if flag_tim2

	  check_menu();
 80018d6:	f000 f8bd 	bl	8001a54 <check_menu>
	  check_luzAuto();
 80018da:	f7ff fbcd 	bl	8001078 <check_luzAuto>
	  update_teclas();
 80018de:	f7ff f8dd 	bl	8000a9c <update_teclas>
#ifndef IWD_OFF
	  __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <main+0x154>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80018ea:	601a      	str	r2, [r3, #0]
	  if (flag_tim2 != 0){
 80018ec:	e7c0      	b.n	8001870 <main+0xc0>
 80018ee:	bf00      	nop
 80018f0:	40011000 	.word	0x40011000
 80018f4:	20000338 	.word	0x20000338
 80018f8:	200001e4 	.word	0x200001e4
 80018fc:	20000163 	.word	0x20000163
 8001900:	20000234 	.word	0x20000234
 8001904:	20000288 	.word	0x20000288
 8001908:	20000162 	.word	0x20000162
 800190c:	20000026 	.word	0x20000026
 8001910:	20000027 	.word	0x20000027

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2228      	movs	r2, #40	; 0x28
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f006 ffb8 	bl	8008898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001944:	230d      	movs	r3, #13
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001952:	2301      	movs	r3, #1
 8001954:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001956:	2301      	movs	r3, #1
 8001958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195e:	2302      	movs	r3, #2
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001962:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001968:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800196c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fce8 	bl	8006348 <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800197e:	f000 f83f 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001992:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 ff52 	bl	8006848 <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019aa:	f000 f829 	bl	8001a00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80019ae:	2303      	movs	r3, #3
 80019b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f005 f8dd 	bl	8006b80 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80019cc:	f000 f818 	bl	8001a00 <Error_Handler>
  }
}
 80019d0:	bf00      	nop
 80019d2:	3750      	adds	r7, #80	; 0x50
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e8:	d102      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
	}
} //fin HAL_TIM_PeriodElapsedCallback()
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000162 	.word	0x20000162

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <Error_Handler+0x6>

08001a08 <start_menu>:
};

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (uint8_t service){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	lcd_CustomChar_create(0, arriba);
 8001a12:	490b      	ldr	r1, [pc, #44]	; (8001a40 <start_menu+0x38>)
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fea1 	bl	800175c <lcd_CustomChar_create>
	lcd_CustomChar_create(1, abajo);
 8001a1a:	490a      	ldr	r1, [pc, #40]	; (8001a44 <start_menu+0x3c>)
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fe9d 	bl	800175c <lcd_CustomChar_create>
	lcd_CustomChar_create(2, grados);
 8001a22:	4909      	ldr	r1, [pc, #36]	; (8001a48 <start_menu+0x40>)
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7ff fe99 	bl	800175c <lcd_CustomChar_create>
	menuActual = &menu[MENU_INFO];
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <start_menu+0x44>)
 8001a2c:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <start_menu+0x48>)
 8001a2e:	601a      	str	r2, [r3, #0]
	menuActual->inicia_menu();
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <start_menu+0x44>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4798      	blx	r3
} //fin start_menu()
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000028 	.word	0x20000028
 8001a44:	20000030 	.word	0x20000030
 8001a48:	20000038 	.word	0x20000038
 8001a4c:	2000029c 	.word	0x2000029c
 8001a50:	20000050 	.word	0x20000050

08001a54 <check_menu>:


void check_menu (void){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	menuActual->accion();
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <check_menu+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4798      	blx	r3
} //fin check_menu()
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000029c 	.word	0x2000029c

08001a68 <timeoutMenu>:


void timeoutMenu (void){
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	timeOut_pantalla++;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <timeoutMenu+0x18>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <timeoutMenu+0x18>)
 8001a76:	801a      	strh	r2, [r3, #0]
} //fin timeoutMenu()
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000196 	.word	0x20000196

08001a84 <check_duracionPulsadores>:


void check_duracionPulsadores (void){
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
	holdBoton++;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <check_duracionPulsadores+0x24>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <check_duracionPulsadores+0x24>)
 8001a92:	701a      	strb	r2, [r3, #0]
	repitePulso++;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <check_duracionPulsadores+0x28>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <check_duracionPulsadores+0x28>)
 8001a9e:	701a      	strb	r2, [r3, #0]
} //fin duracionPulsadores()
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	200001a1 	.word	0x200001a1
 8001aac:	200001a3 	.word	0x200001a3

08001ab0 <init_Info>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_Info (void){
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0

	sensorDHT = get_datosDHT();
 8001ab6:	4c34      	ldr	r4, [pc, #208]	; (8001b88 <init_Info+0xd8>)
 8001ab8:	463b      	mov	r3, r7
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa30 	bl	8000f20 <get_datosDHT>
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac8:	e882 0003 	stmia.w	r2, {r0, r1}
	temperatura = sensorDHT.temp;
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <init_Info+0xd8>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd99 	bl	8000608 <__aeabi_f2iz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <init_Info+0xdc>)
 8001adc:	701a      	strb	r2, [r3, #0]
	humedad = sensorDHT.hum;
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <init_Info+0xd8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd90 	bl	8000608 <__aeabi_f2iz>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	b25a      	sxtb	r2, r3
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <init_Info+0xe0>)
 8001aee:	701a      	strb	r2, [r3, #0]
//	temperatura = 27;
//	humedad = 75;

	lcd_clear();
 8001af0:	f7ff fd82 	bl	80015f8 <lcd_clear>
	lcd_put_cur(0, 0);
 8001af4:	2100      	movs	r1, #0
 8001af6:	2000      	movs	r0, #0
 8001af8:	f7ff fd94 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "Temp: %02d C", temperatura);
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <init_Info+0xdc>)
 8001afe:	f993 3000 	ldrsb.w	r3, [r3]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <init_Info+0xe4>)
 8001b06:	4824      	ldr	r0, [pc, #144]	; (8001b98 <init_Info+0xe8>)
 8001b08:	f006 fece 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001b0c:	4822      	ldr	r0, [pc, #136]	; (8001b98 <init_Info+0xe8>)
 8001b0e:	f7ff fe11 	bl	8001734 <lcd_send_string>
	lcd_put_cur(8, 0);
 8001b12:	2100      	movs	r1, #0
 8001b14:	2008      	movs	r0, #8
 8001b16:	f7ff fd85 	bl	8001624 <lcd_put_cur>
	lcd_send_customChar(2); //grados
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f7ff fd38 	bl	8001590 <lcd_send_data>
	lcd_put_cur(0, 1);
 8001b20:	2101      	movs	r1, #1
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fd7e 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "Humedad: %02d%%", humedad);
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <init_Info+0xe0>)
 8001b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <init_Info+0xec>)
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <init_Info+0xe8>)
 8001b34:	f006 feb8 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001b38:	4817      	ldr	r0, [pc, #92]	; (8001b98 <init_Info+0xe8>)
 8001b3a:	f7ff fdfb 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 2);
 8001b3e:	2102      	movs	r1, #2
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fd6f 	bl	8001624 <lcd_put_cur>
	lcd_send_string("Luz: ");
 8001b46:	4816      	ldr	r0, [pc, #88]	; (8001ba0 <init_Info+0xf0>)
 8001b48:	f7ff fdf4 	bl	8001734 <lcd_send_string>
	lcd_send_string( (getStat_rele() != 0) ? "APAGADA" : "PRENDIDA");
 8001b4c:	f7ff fb7a 	bl	8001244 <getStat_rele>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <init_Info+0xaa>
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <init_Info+0xf4>)
 8001b58:	e000      	b.n	8001b5c <init_Info+0xac>
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <init_Info+0xf8>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fde9 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 3);
 8001b62:	2103      	movs	r1, #3
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fd5d 	bl	8001624 <lcd_put_cur>
	lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL");
 8001b6a:	f7ff fa7b 	bl	8001064 <get_modoLuz>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <init_Info+0xc8>
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <init_Info+0xfc>)
 8001b76:	e000      	b.n	8001b7a <init_Info+0xca>
 8001b78:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <init_Info+0x100>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fdda 	bl	8001734 <lcd_send_string>
} //fin init_Info()
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	200002c0 	.word	0x200002c0
 8001b8c:	200002c8 	.word	0x200002c8
 8001b90:	200002b4 	.word	0x200002b4
 8001b94:	080090ec 	.word	0x080090ec
 8001b98:	20000164 	.word	0x20000164
 8001b9c:	080090fc 	.word	0x080090fc
 8001ba0:	0800910c 	.word	0x0800910c
 8001ba4:	08009114 	.word	0x08009114
 8001ba8:	0800911c 	.word	0x0800911c
 8001bac:	08009128 	.word	0x08009128
 8001bb0:	08009134 	.word	0x08009134

08001bb4 <init_Seleccion>:


void init_Seleccion (void){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	lcd_clear();
 8001bb8:	f7ff fd1e 	bl	80015f8 <lcd_clear>
	lcd_put_cur(7, 0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f7ff fd30 	bl	8001624 <lcd_put_cur>
	lcd_send_string("MENU");
 8001bc4:	4826      	ldr	r0, [pc, #152]	; (8001c60 <init_Seleccion+0xac>)
 8001bc6:	f7ff fdb5 	bl	8001734 <lcd_send_string>
	lcd_put_cur(2, 2);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	2002      	movs	r0, #2
 8001bce:	f7ff fd29 	bl	8001624 <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 8001bd2:	207f      	movs	r0, #127	; 0x7f
 8001bd4:	f7ff fcdc 	bl	8001590 <lcd_send_data>
	switch (cursor){
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <init_Seleccion+0xb0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d834      	bhi.n	8001c4a <init_Seleccion+0x96>
 8001be0:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <init_Seleccion+0x34>)
 8001be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be6:	bf00      	nop
 8001be8:	08001bfd 	.word	0x08001bfd
 8001bec:	08001c0d 	.word	0x08001c0d
 8001bf0:	08001c1d 	.word	0x08001c1d
 8001bf4:	08001c2d 	.word	0x08001c2d
 8001bf8:	08001c3d 	.word	0x08001c3d
		case 0:
			lcd_put_cur(4, 2);
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	2004      	movs	r0, #4
 8001c00:	f7ff fd10 	bl	8001624 <lcd_put_cur>
			lcd_send_string("MODO DE LUZ");
 8001c04:	4818      	ldr	r0, [pc, #96]	; (8001c68 <init_Seleccion+0xb4>)
 8001c06:	f7ff fd95 	bl	8001734 <lcd_send_string>
		break;
 8001c0a:	e01f      	b.n	8001c4c <init_Seleccion+0x98>
		case 1:
			lcd_put_cur(5, 2);
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	2005      	movs	r0, #5
 8001c10:	f7ff fd08 	bl	8001624 <lcd_put_cur>
			lcd_send_string("UMBRAL DIA");
 8001c14:	4815      	ldr	r0, [pc, #84]	; (8001c6c <init_Seleccion+0xb8>)
 8001c16:	f7ff fd8d 	bl	8001734 <lcd_send_string>
		break;
 8001c1a:	e017      	b.n	8001c4c <init_Seleccion+0x98>
		case 2:
			lcd_put_cur(4, 2);
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	2004      	movs	r0, #4
 8001c20:	f7ff fd00 	bl	8001624 <lcd_put_cur>
			lcd_send_string("UMBRAL NOCHE");
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <init_Seleccion+0xbc>)
 8001c26:	f7ff fd85 	bl	8001734 <lcd_send_string>
		break;
 8001c2a:	e00f      	b.n	8001c4c <init_Seleccion+0x98>
		case 3:
			lcd_put_cur(4, 2);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	2004      	movs	r0, #4
 8001c30:	f7ff fcf8 	bl	8001624 <lcd_put_cur>
			lcd_send_string("HORA Y FECHA");
 8001c34:	480f      	ldr	r0, [pc, #60]	; (8001c74 <init_Seleccion+0xc0>)
 8001c36:	f7ff fd7d 	bl	8001734 <lcd_send_string>
		break;
 8001c3a:	e007      	b.n	8001c4c <init_Seleccion+0x98>
		case 4:
			lcd_put_cur(7, 2);
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f7ff fcf0 	bl	8001624 <lcd_put_cur>
			lcd_send_string("DEBUG");
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <init_Seleccion+0xc4>)
 8001c46:	f7ff fd75 	bl	8001734 <lcd_send_string>
		default:
		break;
 8001c4a:	bf00      	nop
	} //fin switch cursor
	lcd_put_cur(17, 2);
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	2011      	movs	r0, #17
 8001c50:	f7ff fce8 	bl	8001624 <lcd_put_cur>
	lcd_send_data(0x7E); //->
 8001c54:	207e      	movs	r0, #126	; 0x7e
 8001c56:	f7ff fc9b 	bl	8001590 <lcd_send_data>
} //fin init_Seleccion()
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800913c 	.word	0x0800913c
 8001c64:	2000019a 	.word	0x2000019a
 8001c68:	08009144 	.word	0x08009144
 8001c6c:	08009150 	.word	0x08009150
 8001c70:	0800915c 	.word	0x0800915c
 8001c74:	0800916c 	.word	0x0800916c
 8001c78:	0800917c 	.word	0x0800917c

08001c7c <init_ModoLuz>:


void init_ModoLuz (void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	lcd_clear();
 8001c80:	f7ff fcba 	bl	80015f8 <lcd_clear>
	lcd_put_cur(0, 0);
 8001c84:	2100      	movs	r1, #0
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fccc 	bl	8001624 <lcd_put_cur>
	lcd_send_string("MODO LUZ AUTOMATICA");
 8001c8c:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <init_ModoLuz+0x68>)
 8001c8e:	f7ff fd51 	bl	8001734 <lcd_send_string>
	lcd_put_cur(4, 2);
 8001c92:	2102      	movs	r1, #2
 8001c94:	2004      	movs	r0, #4
 8001c96:	f7ff fcc5 	bl	8001624 <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 8001c9a:	207f      	movs	r0, #127	; 0x7f
 8001c9c:	f7ff fc78 	bl	8001590 <lcd_send_data>
	lcd_put_cur(9, 2);
 8001ca0:	2102      	movs	r1, #2
 8001ca2:	2009      	movs	r0, #9
 8001ca4:	f7ff fcbe 	bl	8001624 <lcd_put_cur>
	modoLuz = get_modoLuz();
 8001ca8:	f7ff f9dc 	bl	8001064 <get_modoLuz>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <init_ModoLuz+0x6c>)
 8001cb2:	701a      	strb	r2, [r3, #0]
	switch (modoLuz) {
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <init_ModoLuz+0x6c>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <init_ModoLuz+0x46>
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d004      	beq.n	8001cca <init_ModoLuz+0x4e>
		break;
		case 1:
			lcd_send_string("ON");
		break;
		default:
		break;
 8001cc0:	e007      	b.n	8001cd2 <init_ModoLuz+0x56>
			lcd_send_string("OFF");
 8001cc2:	480a      	ldr	r0, [pc, #40]	; (8001cec <init_ModoLuz+0x70>)
 8001cc4:	f7ff fd36 	bl	8001734 <lcd_send_string>
		break;
 8001cc8:	e003      	b.n	8001cd2 <init_ModoLuz+0x56>
			lcd_send_string("ON");
 8001cca:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <init_ModoLuz+0x74>)
 8001ccc:	f7ff fd32 	bl	8001734 <lcd_send_string>
		break;
 8001cd0:	bf00      	nop
	} //fin switch modoLuz
	lcd_put_cur(15, 2);
 8001cd2:	2102      	movs	r1, #2
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f7ff fca5 	bl	8001624 <lcd_put_cur>
	lcd_send_data(0x7E); //->
 8001cda:	207e      	movs	r0, #126	; 0x7e
 8001cdc:	f7ff fc58 	bl	8001590 <lcd_send_data>
} //fin init_ModoLuz()
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	08009184 	.word	0x08009184
 8001ce8:	200002b6 	.word	0x200002b6
 8001cec:	08009198 	.word	0x08009198
 8001cf0:	0800919c 	.word	0x0800919c

08001cf4 <init_LdrPrende>:


void init_LdrPrende (void){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af02      	add	r7, sp, #8
	lcd_clear();
 8001cfa:	f7ff fc7d 	bl	80015f8 <lcd_clear>
	lcd_put_cur(0, 0);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fc8f 	bl	8001624 <lcd_put_cur>
	lcd_send_string("    UMBRAL NOCHE    ");
 8001d06:	4821      	ldr	r0, [pc, #132]	; (8001d8c <init_LdrPrende+0x98>)
 8001d08:	f7ff fd14 	bl	8001734 <lcd_send_string>
	valorUmbral = get_umbralLDR(0);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7ff f939 	bl	8000f84 <get_umbralLDR>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <init_LdrPrende+0x9c>)
 8001d16:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fc82 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <init_LdrPrende+0x9c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	491b      	ldr	r1, [pc, #108]	; (8001d94 <init_LdrPrende+0xa0>)
 8001d28:	481b      	ldr	r0, [pc, #108]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d2a:	f006 fdbd 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001d2e:	481a      	ldr	r0, [pc, #104]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d30:	f7ff fd00 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 2);
 8001d34:	2102      	movs	r1, #2
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fc74 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 8001d3c:	f7ff f918 	bl	8000f70 <get_ldr>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4915      	ldr	r1, [pc, #84]	; (8001d9c <init_LdrPrende+0xa8>)
 8001d46:	4814      	ldr	r0, [pc, #80]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d48:	f006 fdae 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001d4c:	4812      	ldr	r0, [pc, #72]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d4e:	f7ff fcf1 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 3);
 8001d52:	2103      	movs	r1, #3
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff fc65 	bl	8001624 <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001d5a:	4811      	ldr	r0, [pc, #68]	; (8001da0 <init_LdrPrende+0xac>)
 8001d5c:	f7ff fcea 	bl	8001734 <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <init_LdrPrende+0x9c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	237e      	movs	r3, #126	; 0x7e
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	227f      	movs	r2, #127	; 0x7f
 8001d6c:	490d      	ldr	r1, [pc, #52]	; (8001da4 <init_LdrPrende+0xb0>)
 8001d6e:	480a      	ldr	r0, [pc, #40]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d70:	f006 fd9a 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <init_LdrPrende+0xa4>)
 8001d76:	f7ff fcdd 	bl	8001734 <lcd_send_string>
	pantallaUmbral = 0;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <init_LdrPrende+0xb4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001d80:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <init_LdrPrende+0xb8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]
} //fin init_LdrPrende()
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	080091a0 	.word	0x080091a0
 8001d90:	200002b0 	.word	0x200002b0
 8001d94:	080091b8 	.word	0x080091b8
 8001d98:	20000164 	.word	0x20000164
 8001d9c:	080091d0 	.word	0x080091d0
 8001da0:	080091e4 	.word	0x080091e4
 8001da4:	080091f4 	.word	0x080091f4
 8001da8:	2000019b 	.word	0x2000019b
 8001dac:	20000196 	.word	0x20000196

08001db0 <init_LdrApaga>:


void init_LdrApaga (void){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af02      	add	r7, sp, #8
	lcd_clear();
 8001db6:	f7ff fc1f 	bl	80015f8 <lcd_clear>
	lcd_put_cur(0, 0);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff fc31 	bl	8001624 <lcd_put_cur>
	lcd_send_string("     UMBRAL DIA     ");
 8001dc2:	4821      	ldr	r0, [pc, #132]	; (8001e48 <init_LdrApaga+0x98>)
 8001dc4:	f7ff fcb6 	bl	8001734 <lcd_send_string>
	valorUmbral = get_umbralLDR(1);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff f8db 	bl	8000f84 <get_umbralLDR>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <init_LdrApaga+0x9c>)
 8001dd2:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff fc24 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <init_LdrApaga+0x9c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	491b      	ldr	r1, [pc, #108]	; (8001e50 <init_LdrApaga+0xa0>)
 8001de4:	481b      	ldr	r0, [pc, #108]	; (8001e54 <init_LdrApaga+0xa4>)
 8001de6:	f006 fd5f 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001dea:	481a      	ldr	r0, [pc, #104]	; (8001e54 <init_LdrApaga+0xa4>)
 8001dec:	f7ff fca2 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 2);
 8001df0:	2102      	movs	r1, #2
 8001df2:	2000      	movs	r0, #0
 8001df4:	f7ff fc16 	bl	8001624 <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 8001df8:	f7ff f8ba 	bl	8000f70 <get_ldr>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4915      	ldr	r1, [pc, #84]	; (8001e58 <init_LdrApaga+0xa8>)
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <init_LdrApaga+0xa4>)
 8001e04:	f006 fd50 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <init_LdrApaga+0xa4>)
 8001e0a:	f7ff fc93 	bl	8001734 <lcd_send_string>
	lcd_put_cur(0, 3);
 8001e0e:	2103      	movs	r1, #3
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fc07 	bl	8001624 <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001e16:	4811      	ldr	r0, [pc, #68]	; (8001e5c <init_LdrApaga+0xac>)
 8001e18:	f7ff fc8c 	bl	8001734 <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <init_LdrApaga+0x9c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	237e      	movs	r3, #126	; 0x7e
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4613      	mov	r3, r2
 8001e26:	227f      	movs	r2, #127	; 0x7f
 8001e28:	490d      	ldr	r1, [pc, #52]	; (8001e60 <init_LdrApaga+0xb0>)
 8001e2a:	480a      	ldr	r0, [pc, #40]	; (8001e54 <init_LdrApaga+0xa4>)
 8001e2c:	f006 fd3c 	bl	80088a8 <siprintf>
	lcd_send_string(texto);
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <init_LdrApaga+0xa4>)
 8001e32:	f7ff fc7f 	bl	8001734 <lcd_send_string>
	pantallaUmbral = 0;
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <init_LdrApaga+0xb4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <init_LdrApaga+0xb8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]
} //fin init_LdrApaga()
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	08009200 	.word	0x08009200
 8001e4c:	200002b0 	.word	0x200002b0
 8001e50:	080091b8 	.word	0x080091b8
 8001e54:	20000164 	.word	0x20000164
 8001e58:	080091d0 	.word	0x080091d0
 8001e5c:	080091e4 	.word	0x080091e4
 8001e60:	080091f4 	.word	0x080091f4
 8001e64:	2000019b 	.word	0x2000019b
 8001e68:	20000196 	.word	0x20000196

08001e6c <init_setHora>:


void init_setHora (void){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af02      	add	r7, sp, #8
	lcd_clear();
 8001e72:	f7ff fbc1 	bl	80015f8 <lcd_clear>
	lcd_put_cur(0, 0);
 8001e76:	2100      	movs	r1, #0
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fbd3 	bl	8001624 <lcd_put_cur>
	lcd_send_string("AJUSTE HORA Y FECHA:");
 8001e7e:	4831      	ldr	r0, [pc, #196]	; (8001f44 <init_setHora+0xd8>)
 8001e80:	f7ff fc58 	bl	8001734 <lcd_send_string>
	update_horaFecha();
 8001e84:	f7ff fa76 	bl	8001374 <update_horaFecha>
	muestraHora = get_hora();
 8001e88:	f7ff fa88 	bl	800139c <get_hora>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <init_setHora+0xdc>)
 8001e90:	4611      	mov	r1, r2
 8001e92:	7019      	strb	r1, [r3, #0]
 8001e94:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001e98:	7059      	strb	r1, [r3, #1]
 8001e9a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001e9e:	709a      	strb	r2, [r3, #2]
	muestraFecha = get_fecha();
 8001ea0:	f7ff fa96 	bl	80013d0 <get_fecha>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <init_setHora+0xe0>)
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	7019      	strb	r1, [r3, #0]
 8001eac:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8001eb0:	7059      	strb	r1, [r3, #1]
 8001eb2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8001eb6:	7099      	strb	r1, [r3, #2]
 8001eb8:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8001ebc:	70da      	strb	r2, [r3, #3]
	sprintf(texto, "%02d:%02d:%02d", muestraHora.Hours, muestraHora.Minutes, muestraHora.Seconds);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <init_setHora+0xdc>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <init_setHora+0xdc>)
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <init_setHora+0xdc>)
 8001ecc:	789b      	ldrb	r3, [r3, #2]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	491f      	ldr	r1, [pc, #124]	; (8001f50 <init_setHora+0xe4>)
 8001ed4:	481f      	ldr	r0, [pc, #124]	; (8001f54 <init_setHora+0xe8>)
 8001ed6:	f006 fce7 	bl	80088a8 <siprintf>
	lcd_put_cur(0, 2);
 8001eda:	2102      	movs	r1, #2
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff fba1 	bl	8001624 <lcd_put_cur>
	lcd_send_string(texto);
 8001ee2:	481c      	ldr	r0, [pc, #112]	; (8001f54 <init_setHora+0xe8>)
 8001ee4:	f7ff fc26 	bl	8001734 <lcd_send_string>
	sprintf(texto, "%02d/%02d/%02d", muestraFecha.Date, muestraFecha.Month, muestraFecha.Year);
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <init_setHora+0xe0>)
 8001eea:	789b      	ldrb	r3, [r3, #2]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <init_setHora+0xe0>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <init_setHora+0xe0>)
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	4916      	ldr	r1, [pc, #88]	; (8001f58 <init_setHora+0xec>)
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <init_setHora+0xe8>)
 8001f00:	f006 fcd2 	bl	80088a8 <siprintf>
	lcd_put_cur(12, 2);
 8001f04:	2102      	movs	r1, #2
 8001f06:	200c      	movs	r0, #12
 8001f08:	f7ff fb8c 	bl	8001624 <lcd_put_cur>
	lcd_send_string(texto);
 8001f0c:	4811      	ldr	r0, [pc, #68]	; (8001f54 <init_setHora+0xe8>)
 8001f0e:	f7ff fc11 	bl	8001734 <lcd_send_string>
	lcd_put_cur(9, 3);
 8001f12:	2103      	movs	r1, #3
 8001f14:	2009      	movs	r0, #9
 8001f16:	f7ff fb85 	bl	8001624 <lcd_put_cur>
	lcd_send_string("OK");
 8001f1a:	4810      	ldr	r0, [pc, #64]	; (8001f5c <init_setHora+0xf0>)
 8001f1c:	f7ff fc0a 	bl	8001734 <lcd_send_string>

	cursor_fechaHora = 0;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <init_setHora+0xf4>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
//	lcd_put_cur(cursor_fechaHora, 1);
//	lcd_send_customChar(3); //arriba
//	lcd_put_cur(cursor_fechaHora, 3);
//	lcd_send_customChar(4); //abajo
	lcd_put_cur(cursor_fechaHora, 2);
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <init_setHora+0xf4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fb79 	bl	8001624 <lcd_put_cur>
	lcd_blinkCursOn;
 8001f32:	200d      	movs	r0, #13
 8001f34:	f7ff faf8 	bl	8001528 <lcd_send_cmd>

	pant_horaFecha = PANT_HORA_FECHA;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <init_setHora+0xf8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
} //init_setHora()
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08009218 	.word	0x08009218
 8001f48:	200002b8 	.word	0x200002b8
 8001f4c:	200002a4 	.word	0x200002a4
 8001f50:	08009230 	.word	0x08009230
 8001f54:	20000164 	.word	0x20000164
 8001f58:	08009240 	.word	0x08009240
 8001f5c:	08009250 	.word	0x08009250
 8001f60:	2000019c 	.word	0x2000019c
 8001f64:	2000019d 	.word	0x2000019d

08001f68 <init_debug>:


void init_debug (void){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af04      	add	r7, sp, #16
	lcd_clear();
 8001f6e:	f7ff fb43 	bl	80015f8 <lcd_clear>
	lcd_put_cur(7, 0);
 8001f72:	2100      	movs	r1, #0
 8001f74:	2007      	movs	r0, #7
 8001f76:	f7ff fb55 	bl	8001624 <lcd_put_cur>
	lcd_send_string("DEBUG");
 8001f7a:	4828      	ldr	r0, [pc, #160]	; (800201c <init_debug+0xb4>)
 8001f7c:	f7ff fbda 	bl	8001734 <lcd_send_string>
	lcd_put_cur(1, 2);
 8001f80:	2102      	movs	r1, #2
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fb4e 	bl	8001624 <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 8001f88:	207f      	movs	r0, #127	; 0x7f
 8001f8a:	f7ff fb01 	bl	8001590 <lcd_send_data>
	validaLectura = HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &cuentaResets, 1, 100);
 8001f8e:	2364      	movs	r3, #100	; 0x64
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	2301      	movs	r3, #1
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <init_debug+0xb8>)
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	21a0      	movs	r1, #160	; 0xa0
 8001fa0:	4820      	ldr	r0, [pc, #128]	; (8002024 <init_debug+0xbc>)
 8001fa2:	f003 faf3 	bl	800558c <HAL_I2C_Mem_Read>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <init_debug+0xc0>)
 8001fac:	701a      	strb	r2, [r3, #0]
	switch (cursor_debug) {
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <init_debug+0xc4>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d828      	bhi.n	8002008 <init_debug+0xa0>
 8001fb6:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <init_debug+0x54>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001ff3 	.word	0x08001ff3
 8001fc4:	08001ffb 	.word	0x08001ffb
 8001fc8:	08002003 	.word	0x08002003
		case 0:
			if (validaLectura != HAL_OK){
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <init_debug+0xc0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <init_debug+0x74>
				lcd_send_string("  LOG RESET --  ");
 8001fd4:	4816      	ldr	r0, [pc, #88]	; (8002030 <init_debug+0xc8>)
 8001fd6:	f7ff fbad 	bl	8001734 <lcd_send_string>
			}else{
				sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
				lcd_send_string(texto);
			}
		break;
 8001fda:	e016      	b.n	800200a <init_debug+0xa2>
				sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <init_debug+0xb8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4914      	ldr	r1, [pc, #80]	; (8002034 <init_debug+0xcc>)
 8001fe4:	4814      	ldr	r0, [pc, #80]	; (8002038 <init_debug+0xd0>)
 8001fe6:	f006 fc5f 	bl	80088a8 <siprintf>
				lcd_send_string(texto);
 8001fea:	4813      	ldr	r0, [pc, #76]	; (8002038 <init_debug+0xd0>)
 8001fec:	f7ff fba2 	bl	8001734 <lcd_send_string>
		break;
 8001ff0:	e00b      	b.n	800200a <init_debug+0xa2>
		case 1:
			lcd_send_string("  CLEAR RESETS  ");
 8001ff2:	4812      	ldr	r0, [pc, #72]	; (800203c <init_debug+0xd4>)
 8001ff4:	f7ff fb9e 	bl	8001734 <lcd_send_string>
		break;
 8001ff8:	e007      	b.n	800200a <init_debug+0xa2>
		case 2:
			lcd_send_string("  REG HORA OFF  ");
 8001ffa:	4811      	ldr	r0, [pc, #68]	; (8002040 <init_debug+0xd8>)
 8001ffc:	f7ff fb9a 	bl	8001734 <lcd_send_string>
		break;
 8002000:	e003      	b.n	800200a <init_debug+0xa2>
		case 3:
			lcd_send_string("TIEMPO ENCENDIDO");
 8002002:	4810      	ldr	r0, [pc, #64]	; (8002044 <init_debug+0xdc>)
 8002004:	f7ff fb96 	bl	8001734 <lcd_send_string>
		default:
		break;
 8002008:	bf00      	nop
	} //fin switch modoLuz
	lcd_send_data(0x7E); //->
 800200a:	207e      	movs	r0, #126	; 0x7e
 800200c:	f7ff fac0 	bl	8001590 <lcd_send_data>
	pantDebug = PANT_DEBUG;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <init_debug+0xe0>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
} //fin init_debug()
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0800917c 	.word	0x0800917c
 8002020:	2000019f 	.word	0x2000019f
 8002024:	20000234 	.word	0x20000234
 8002028:	200002b5 	.word	0x200002b5
 800202c:	2000019e 	.word	0x2000019e
 8002030:	08009254 	.word	0x08009254
 8002034:	08009268 	.word	0x08009268
 8002038:	20000164 	.word	0x20000164
 800203c:	0800927c 	.word	0x0800927c
 8002040:	08009290 	.word	0x08009290
 8002044:	080092a4 	.word	0x080092a4
 8002048:	200001a0 	.word	0x200001a0

0800204c <acc_Info>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_Info (void){
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0

	if (flag_infoDHT != 0){
 8002052:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <acc_Info+0x154>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <acc_Info+0xe8>
		sensorDHT = get_datosDHT();
 800205a:	4c52      	ldr	r4, [pc, #328]	; (80021a4 <acc_Info+0x158>)
 800205c:	463b      	mov	r3, r7
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ff5e 	bl	8000f20 <get_datosDHT>
 8002064:	4622      	mov	r2, r4
 8002066:	463b      	mov	r3, r7
 8002068:	e893 0003 	ldmia.w	r3, {r0, r1}
 800206c:	e882 0003 	stmia.w	r2, {r0, r1}
		temperatura = sensorDHT.temp;
 8002070:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <acc_Info+0x158>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fac7 	bl	8000608 <__aeabi_f2iz>
 800207a:	4603      	mov	r3, r0
 800207c:	b25a      	sxtb	r2, r3
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <acc_Info+0x15c>)
 8002080:	701a      	strb	r2, [r3, #0]
		humedad = sensorDHT.hum;
 8002082:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <acc_Info+0x158>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fabe 	bl	8000608 <__aeabi_f2iz>
 800208c:	4603      	mov	r3, r0
 800208e:	b25a      	sxtb	r2, r3
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <acc_Info+0x160>)
 8002092:	701a      	strb	r2, [r3, #0]
//		temperatura = 27;
//		humedad = 75;

		lcd_put_cur(6, 0);
 8002094:	2100      	movs	r1, #0
 8002096:	2006      	movs	r0, #6
 8002098:	f7ff fac4 	bl	8001624 <lcd_put_cur>
		sprintf(texto, "%02d  ", temperatura);
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <acc_Info+0x15c>)
 800209e:	f993 3000 	ldrsb.w	r3, [r3]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4942      	ldr	r1, [pc, #264]	; (80021b0 <acc_Info+0x164>)
 80020a6:	4843      	ldr	r0, [pc, #268]	; (80021b4 <acc_Info+0x168>)
 80020a8:	f006 fbfe 	bl	80088a8 <siprintf>
		lcd_send_string(texto);
 80020ac:	4841      	ldr	r0, [pc, #260]	; (80021b4 <acc_Info+0x168>)
 80020ae:	f7ff fb41 	bl	8001734 <lcd_send_string>
		lcd_put_cur(8, 0);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2008      	movs	r0, #8
 80020b6:	f7ff fab5 	bl	8001624 <lcd_put_cur>
		lcd_send_customChar(2); //grados
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff fa68 	bl	8001590 <lcd_send_data>
		lcd_put_cur(9, 0);
 80020c0:	2100      	movs	r1, #0
 80020c2:	2009      	movs	r0, #9
 80020c4:	f7ff faae 	bl	8001624 <lcd_put_cur>
		lcd_send_string("C");
 80020c8:	483b      	ldr	r0, [pc, #236]	; (80021b8 <acc_Info+0x16c>)
 80020ca:	f7ff fb33 	bl	8001734 <lcd_send_string>

		lcd_put_cur(9, 1);
 80020ce:	2101      	movs	r1, #1
 80020d0:	2009      	movs	r0, #9
 80020d2:	f7ff faa7 	bl	8001624 <lcd_put_cur>
		sprintf(texto, "%02d%%  ", humedad);
 80020d6:	4b35      	ldr	r3, [pc, #212]	; (80021ac <acc_Info+0x160>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	461a      	mov	r2, r3
 80020de:	4937      	ldr	r1, [pc, #220]	; (80021bc <acc_Info+0x170>)
 80020e0:	4834      	ldr	r0, [pc, #208]	; (80021b4 <acc_Info+0x168>)
 80020e2:	f006 fbe1 	bl	80088a8 <siprintf>
		lcd_send_string(texto);
 80020e6:	4833      	ldr	r0, [pc, #204]	; (80021b4 <acc_Info+0x168>)
 80020e8:	f7ff fb24 	bl	8001734 <lcd_send_string>

		lcd_put_cur(5, 2);
 80020ec:	2102      	movs	r1, #2
 80020ee:	2005      	movs	r0, #5
 80020f0:	f7ff fa98 	bl	8001624 <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 80020f4:	f7ff f8a6 	bl	8001244 <getStat_rele>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <acc_Info+0xb6>
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <acc_Info+0x174>)
 8002100:	e000      	b.n	8002104 <acc_Info+0xb8>
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <acc_Info+0x178>)
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fb15 	bl	8001734 <lcd_send_string>
		lcd_put_cur(0, 3);
 800210a:	2103      	movs	r1, #3
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff fa89 	bl	8001624 <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8002112:	f7fe ffa7 	bl	8001064 <get_modoLuz>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <acc_Info+0xd4>
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <acc_Info+0x17c>)
 800211e:	e000      	b.n	8002122 <acc_Info+0xd6>
 8002120:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <acc_Info+0x180>)
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb06 	bl	8001734 <lcd_send_string>

		flag_infoDHT = 0;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <acc_Info+0x154>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
		flag_infoModo = 0;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <acc_Info+0x184>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
	} //fin if flag_infoDHT

	if (flag_infoModo != 0){
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <acc_Info+0x184>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <acc_Info+0x132>
		lcd_put_cur(5, 2);
 800213c:	2102      	movs	r1, #2
 800213e:	2005      	movs	r0, #5
 8002140:	f7ff fa70 	bl	8001624 <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 8002144:	f7ff f87e 	bl	8001244 <getStat_rele>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <acc_Info+0x106>
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <acc_Info+0x174>)
 8002150:	e000      	b.n	8002154 <acc_Info+0x108>
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <acc_Info+0x178>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff faed 	bl	8001734 <lcd_send_string>
		lcd_put_cur(0, 3);
 800215a:	2103      	movs	r1, #3
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fa61 	bl	8001624 <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8002162:	f7fe ff7f 	bl	8001064 <get_modoLuz>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <acc_Info+0x124>
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <acc_Info+0x17c>)
 800216e:	e000      	b.n	8002172 <acc_Info+0x126>
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <acc_Info+0x180>)
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fade 	bl	8001734 <lcd_send_string>

		flag_infoModo = 0;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <acc_Info+0x184>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
	}

	if (getStatBoton(IN_OK) == FALL){
 800217e:	2003      	movs	r0, #3
 8002180:	f7fe fcb8 	bl	8000af4 <getStatBoton>
 8002184:	4603      	mov	r3, r0
 8002186:	2b02      	cmp	r3, #2
 8002188:	d106      	bne.n	8002198 <acc_Info+0x14c>
		menuActual = &menu[MENU_SELECCION];
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <acc_Info+0x188>)
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <acc_Info+0x18c>)
 800218e:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <acc_Info+0x188>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_Info()
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bd90      	pop	{r4, r7, pc}
 80021a0:	20000198 	.word	0x20000198
 80021a4:	200002c0 	.word	0x200002c0
 80021a8:	200002c8 	.word	0x200002c8
 80021ac:	200002b4 	.word	0x200002b4
 80021b0:	080092b8 	.word	0x080092b8
 80021b4:	20000164 	.word	0x20000164
 80021b8:	080092c0 	.word	0x080092c0
 80021bc:	080092c4 	.word	0x080092c4
 80021c0:	080092d0 	.word	0x080092d0
 80021c4:	0800911c 	.word	0x0800911c
 80021c8:	08009128 	.word	0x08009128
 80021cc:	080092dc 	.word	0x080092dc
 80021d0:	20000199 	.word	0x20000199
 80021d4:	2000029c 	.word	0x2000029c
 80021d8:	20000060 	.word	0x20000060

080021dc <acc_Seleccion>:


void acc_Seleccion (void){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_BACK) == FALL){
 80021e0:	2002      	movs	r0, #2
 80021e2:	f7fe fc87 	bl	8000af4 <getStatBoton>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d106      	bne.n	80021fa <acc_Seleccion+0x1e>
		menuActual = &menu[MENU_INFO];
 80021ec:	4b5b      	ldr	r3, [pc, #364]	; (800235c <acc_Seleccion+0x180>)
 80021ee:	4a5c      	ldr	r2, [pc, #368]	; (8002360 <acc_Seleccion+0x184>)
 80021f0:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <acc_Seleccion+0x180>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7fe fc7a 	bl	8000af4 <getStatBoton>
 8002200:	4603      	mov	r3, r0
 8002202:	2b02      	cmp	r3, #2
 8002204:	d136      	bne.n	8002274 <acc_Seleccion+0x98>
		cursor--;
 8002206:	4b57      	ldr	r3, [pc, #348]	; (8002364 <acc_Seleccion+0x188>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b55      	ldr	r3, [pc, #340]	; (8002364 <acc_Seleccion+0x188>)
 8002210:	701a      	strb	r2, [r3, #0]
		if (cursor > 4) cursor = 4;
 8002212:	4b54      	ldr	r3, [pc, #336]	; (8002364 <acc_Seleccion+0x188>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b04      	cmp	r3, #4
 8002218:	d902      	bls.n	8002220 <acc_Seleccion+0x44>
 800221a:	4b52      	ldr	r3, [pc, #328]	; (8002364 <acc_Seleccion+0x188>)
 800221c:	2204      	movs	r2, #4
 800221e:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 8002220:	2102      	movs	r1, #2
 8002222:	2003      	movs	r0, #3
 8002224:	f7ff f9fe 	bl	8001624 <lcd_put_cur>
		switch (cursor){
 8002228:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <acc_Seleccion+0x188>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d823      	bhi.n	8002278 <acc_Seleccion+0x9c>
 8002230:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <acc_Seleccion+0x5c>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	0800224d 	.word	0x0800224d
 800223c:	08002255 	.word	0x08002255
 8002240:	0800225d 	.word	0x0800225d
 8002244:	08002265 	.word	0x08002265
 8002248:	0800226d 	.word	0x0800226d
			case 0:
				lcd_send_string(" MODO DE LUZ  ");
 800224c:	4846      	ldr	r0, [pc, #280]	; (8002368 <acc_Seleccion+0x18c>)
 800224e:	f7ff fa71 	bl	8001734 <lcd_send_string>
			break;
 8002252:	e012      	b.n	800227a <acc_Seleccion+0x9e>
			case 1:
				lcd_send_string("  UMBRAL DIA  ");
 8002254:	4845      	ldr	r0, [pc, #276]	; (800236c <acc_Seleccion+0x190>)
 8002256:	f7ff fa6d 	bl	8001734 <lcd_send_string>
			break;
 800225a:	e00e      	b.n	800227a <acc_Seleccion+0x9e>
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
 800225c:	4844      	ldr	r0, [pc, #272]	; (8002370 <acc_Seleccion+0x194>)
 800225e:	f7ff fa69 	bl	8001734 <lcd_send_string>
			break;
 8002262:	e00a      	b.n	800227a <acc_Seleccion+0x9e>
			case 3:
				lcd_send_string(" HORA Y FECHA ");
 8002264:	4843      	ldr	r0, [pc, #268]	; (8002374 <acc_Seleccion+0x198>)
 8002266:	f7ff fa65 	bl	8001734 <lcd_send_string>
			break;
 800226a:	e006      	b.n	800227a <acc_Seleccion+0x9e>
			case 4:
				lcd_send_string("    DEBUG     ");
 800226c:	4842      	ldr	r0, [pc, #264]	; (8002378 <acc_Seleccion+0x19c>)
 800226e:	f7ff fa61 	bl	8001734 <lcd_send_string>
			break;
 8002272:	e002      	b.n	800227a <acc_Seleccion+0x9e>
			default:
			break;
		} //fin switch cursor
	} //fin if IN_LEFT
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <acc_Seleccion+0x9e>
			break;
 8002278:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 800227a:	2001      	movs	r0, #1
 800227c:	f7fe fc3a 	bl	8000af4 <getStatBoton>
 8002280:	4603      	mov	r3, r0
 8002282:	2b02      	cmp	r3, #2
 8002284:	d136      	bne.n	80022f4 <acc_Seleccion+0x118>
		cursor++;
 8002286:	4b37      	ldr	r3, [pc, #220]	; (8002364 <acc_Seleccion+0x188>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b35      	ldr	r3, [pc, #212]	; (8002364 <acc_Seleccion+0x188>)
 8002290:	701a      	strb	r2, [r3, #0]
		if (cursor > 4) cursor = 0;
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <acc_Seleccion+0x188>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b04      	cmp	r3, #4
 8002298:	d902      	bls.n	80022a0 <acc_Seleccion+0xc4>
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <acc_Seleccion+0x188>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 80022a0:	2102      	movs	r1, #2
 80022a2:	2003      	movs	r0, #3
 80022a4:	f7ff f9be 	bl	8001624 <lcd_put_cur>
		switch (cursor){
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <acc_Seleccion+0x188>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d823      	bhi.n	80022f8 <acc_Seleccion+0x11c>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <acc_Seleccion+0xdc>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022cd 	.word	0x080022cd
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022dd 	.word	0x080022dd
 80022c4:	080022e5 	.word	0x080022e5
 80022c8:	080022ed 	.word	0x080022ed
			case 0:
				lcd_send_string(" MODO DE LUZ  ");
 80022cc:	4826      	ldr	r0, [pc, #152]	; (8002368 <acc_Seleccion+0x18c>)
 80022ce:	f7ff fa31 	bl	8001734 <lcd_send_string>
			break;
 80022d2:	e012      	b.n	80022fa <acc_Seleccion+0x11e>
			case 1:
				lcd_send_string("  UMBRAL DIA  ");
 80022d4:	4825      	ldr	r0, [pc, #148]	; (800236c <acc_Seleccion+0x190>)
 80022d6:	f7ff fa2d 	bl	8001734 <lcd_send_string>
			break;
 80022da:	e00e      	b.n	80022fa <acc_Seleccion+0x11e>
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
 80022dc:	4824      	ldr	r0, [pc, #144]	; (8002370 <acc_Seleccion+0x194>)
 80022de:	f7ff fa29 	bl	8001734 <lcd_send_string>
			break;
 80022e2:	e00a      	b.n	80022fa <acc_Seleccion+0x11e>
			case 3:
				lcd_send_string(" HORA Y FECHA ");
 80022e4:	4823      	ldr	r0, [pc, #140]	; (8002374 <acc_Seleccion+0x198>)
 80022e6:	f7ff fa25 	bl	8001734 <lcd_send_string>
			break;
 80022ea:	e006      	b.n	80022fa <acc_Seleccion+0x11e>
			case 4:
				lcd_send_string("    DEBUG     ");
 80022ec:	4822      	ldr	r0, [pc, #136]	; (8002378 <acc_Seleccion+0x19c>)
 80022ee:	f7ff fa21 	bl	8001734 <lcd_send_string>
			break;
 80022f2:	e002      	b.n	80022fa <acc_Seleccion+0x11e>
			default:
			break;
		} //fin switch cursor
	} //fin if IN_RIGHT
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <acc_Seleccion+0x11e>
			break;
 80022f8:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 80022fa:	2003      	movs	r0, #3
 80022fc:	f7fe fbfa 	bl	8000af4 <getStatBoton>
 8002300:	4603      	mov	r3, r0
 8002302:	2b02      	cmp	r3, #2
 8002304:	d128      	bne.n	8002358 <acc_Seleccion+0x17c>
		switch (cursor){
 8002306:	4b17      	ldr	r3, [pc, #92]	; (8002364 <acc_Seleccion+0x188>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d81f      	bhi.n	800234e <acc_Seleccion+0x172>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <acc_Seleccion+0x138>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002329 	.word	0x08002329
 8002318:	08002331 	.word	0x08002331
 800231c:	08002339 	.word	0x08002339
 8002320:	08002341 	.word	0x08002341
 8002324:	08002349 	.word	0x08002349
			case 0:
				menuActual = &menu[MENU_MODO_LUZ];
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <acc_Seleccion+0x180>)
 800232a:	4a14      	ldr	r2, [pc, #80]	; (800237c <acc_Seleccion+0x1a0>)
 800232c:	601a      	str	r2, [r3, #0]
			break;
 800232e:	e00f      	b.n	8002350 <acc_Seleccion+0x174>
			case 1:
				menuActual = &menu[MENU_LDR_APAGA];
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <acc_Seleccion+0x180>)
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <acc_Seleccion+0x1a4>)
 8002334:	601a      	str	r2, [r3, #0]
			break;
 8002336:	e00b      	b.n	8002350 <acc_Seleccion+0x174>
			case 2:
				menuActual = &menu[MENU_LDR_PRENDE];
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <acc_Seleccion+0x180>)
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <acc_Seleccion+0x1a8>)
 800233c:	601a      	str	r2, [r3, #0]
			break;
 800233e:	e007      	b.n	8002350 <acc_Seleccion+0x174>
			case 3:
				menuActual = &menu[MENU_SET_HORA];
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <acc_Seleccion+0x180>)
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <acc_Seleccion+0x1ac>)
 8002344:	601a      	str	r2, [r3, #0]
			break;
 8002346:	e003      	b.n	8002350 <acc_Seleccion+0x174>
			case 4:
				menuActual = &menu[MENU_DEBUG];
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <acc_Seleccion+0x180>)
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <acc_Seleccion+0x1b0>)
 800234c:	601a      	str	r2, [r3, #0]
			default:
			break;
 800234e:	bf00      	nop
		} //fin switch cursor
		menuActual->inicia_menu();
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <acc_Seleccion+0x180>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4798      	blx	r3
	} //fin if IN_OK

} //fin acc_Seleccion()
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2000029c 	.word	0x2000029c
 8002360:	20000050 	.word	0x20000050
 8002364:	2000019a 	.word	0x2000019a
 8002368:	080092e8 	.word	0x080092e8
 800236c:	080092f8 	.word	0x080092f8
 8002370:	08009308 	.word	0x08009308
 8002374:	08009318 	.word	0x08009318
 8002378:	08009328 	.word	0x08009328
 800237c:	20000070 	.word	0x20000070
 8002380:	20000090 	.word	0x20000090
 8002384:	20000080 	.word	0x20000080
 8002388:	200000a0 	.word	0x200000a0
 800238c:	200000b0 	.word	0x200000b0

08002390 <acc_ModoLuz>:


void acc_ModoLuz (void){
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
	if (getStatBoton(IN_BACK) == FALL){
 8002394:	2002      	movs	r0, #2
 8002396:	f7fe fbad 	bl	8000af4 <getStatBoton>
 800239a:	4603      	mov	r3, r0
 800239c:	2b02      	cmp	r3, #2
 800239e:	d106      	bne.n	80023ae <acc_ModoLuz+0x1e>
		menuActual = &menu[MENU_SELECCION];
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <acc_ModoLuz+0xdc>)
 80023a2:	4a33      	ldr	r2, [pc, #204]	; (8002470 <acc_ModoLuz+0xe0>)
 80023a4:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <acc_ModoLuz+0xdc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fba0 	bl	8000af4 <getStatBoton>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d11d      	bne.n	80023f6 <acc_ModoLuz+0x66>
		if (modoLuz != 0){
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <acc_ModoLuz+0xe4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <acc_ModoLuz+0x3a>
			modoLuz = 0;
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <acc_ModoLuz+0xe4>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e002      	b.n	80023d0 <acc_ModoLuz+0x40>
		}else{
			modoLuz = 1;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <acc_ModoLuz+0xe4>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 80023d0:	2102      	movs	r1, #2
 80023d2:	2009      	movs	r0, #9
 80023d4:	f7ff f926 	bl	8001624 <lcd_put_cur>
		switch (modoLuz) {
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <acc_ModoLuz+0xe4>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <acc_ModoLuz+0x56>
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d004      	beq.n	80023ee <acc_ModoLuz+0x5e>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 80023e4:	e008      	b.n	80023f8 <acc_ModoLuz+0x68>
				lcd_send_string("OFF");
 80023e6:	4824      	ldr	r0, [pc, #144]	; (8002478 <acc_ModoLuz+0xe8>)
 80023e8:	f7ff f9a4 	bl	8001734 <lcd_send_string>
			break;
 80023ec:	e004      	b.n	80023f8 <acc_ModoLuz+0x68>
				lcd_send_string("ON ");
 80023ee:	4823      	ldr	r0, [pc, #140]	; (800247c <acc_ModoLuz+0xec>)
 80023f0:	f7ff f9a0 	bl	8001734 <lcd_send_string>
			break;
 80023f4:	e000      	b.n	80023f8 <acc_ModoLuz+0x68>
		} //fin switch modoLuz
	} //fin if IN_LEFT
 80023f6:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe fb7b 	bl	8000af4 <getStatBoton>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11d      	bne.n	8002440 <acc_ModoLuz+0xb0>
		if (modoLuz != 0){
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <acc_ModoLuz+0xe4>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <acc_ModoLuz+0x84>
			modoLuz = 0;
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <acc_ModoLuz+0xe4>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e002      	b.n	800241a <acc_ModoLuz+0x8a>
		}else{
			modoLuz = 1;
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <acc_ModoLuz+0xe4>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 800241a:	2102      	movs	r1, #2
 800241c:	2009      	movs	r0, #9
 800241e:	f7ff f901 	bl	8001624 <lcd_put_cur>
		switch (modoLuz) {
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <acc_ModoLuz+0xe4>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <acc_ModoLuz+0xa0>
 800242a:	2b01      	cmp	r3, #1
 800242c:	d004      	beq.n	8002438 <acc_ModoLuz+0xa8>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 800242e:	e008      	b.n	8002442 <acc_ModoLuz+0xb2>
				lcd_send_string("OFF");
 8002430:	4811      	ldr	r0, [pc, #68]	; (8002478 <acc_ModoLuz+0xe8>)
 8002432:	f7ff f97f 	bl	8001734 <lcd_send_string>
			break;
 8002436:	e004      	b.n	8002442 <acc_ModoLuz+0xb2>
				lcd_send_string("ON ");
 8002438:	4810      	ldr	r0, [pc, #64]	; (800247c <acc_ModoLuz+0xec>)
 800243a:	f7ff f97b 	bl	8001734 <lcd_send_string>
			break;
 800243e:	e000      	b.n	8002442 <acc_ModoLuz+0xb2>
		} //fin switch modoLuz
	} //fin if IN_RIGHT
 8002440:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 8002442:	2003      	movs	r0, #3
 8002444:	f7fe fb56 	bl	8000af4 <getStatBoton>
 8002448:	4603      	mov	r3, r0
 800244a:	2b02      	cmp	r3, #2
 800244c:	d10b      	bne.n	8002466 <acc_ModoLuz+0xd6>
//		if (modoLuz != 0){
//			setOutput(OUT_MODO, 0); //logica negativa
//		}else{
//			setOutput(OUT_MODO, 1); //logica negativa
//		}
		set_modoLuz(modoLuz);
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <acc_ModoLuz+0xe4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fdde 	bl	8001014 <set_modoLuz>

		menuActual = &menu[MENU_SELECCION];
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <acc_ModoLuz+0xdc>)
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <acc_ModoLuz+0xe0>)
 800245c:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 800245e:	4b03      	ldr	r3, [pc, #12]	; (800246c <acc_ModoLuz+0xdc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_ModoLuz()
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000029c 	.word	0x2000029c
 8002470:	20000060 	.word	0x20000060
 8002474:	200002b6 	.word	0x200002b6
 8002478:	08009198 	.word	0x08009198
 800247c:	08009338 	.word	0x08009338

08002480 <acc_LdrPrende>:


void acc_LdrPrende (void){
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 8002484:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <acc_LdrPrende+0x254>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <acc_LdrPrende+0x14>
 800248c:	2b01      	cmp	r3, #1
 800248e:	f000 8101 	beq.w	8002694 <acc_LdrPrende+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 8002492:	e11c      	b.n	80026ce <acc_LdrPrende+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 8002494:	2002      	movs	r0, #2
 8002496:	f7fe fb2d 	bl	8000af4 <getStatBoton>
 800249a:	4603      	mov	r3, r0
 800249c:	2b02      	cmp	r3, #2
 800249e:	d107      	bne.n	80024b0 <acc_LdrPrende+0x30>
				menuActual = &menu[MENU_SELECCION];
 80024a0:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <acc_LdrPrende+0x258>)
 80024a2:	4a8e      	ldr	r2, [pc, #568]	; (80026dc <acc_LdrPrende+0x25c>)
 80024a4:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80024a6:	4b8c      	ldr	r3, [pc, #560]	; (80026d8 <acc_LdrPrende+0x258>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4798      	blx	r3
				break;
 80024ae:	e10e      	b.n	80026ce <acc_LdrPrende+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fb1f 	bl	8000af4 <getStatBoton>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d004      	beq.n	80024c6 <acc_LdrPrende+0x46>
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d053      	beq.n	8002568 <acc_LdrPrende+0xe8>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d021      	beq.n	8002508 <acc_LdrPrende+0x88>
				break;
 80024c4:	e055      	b.n	8002572 <acc_LdrPrende+0xf2>
					valorUmbral--;
 80024c6:	4b86      	ldr	r3, [pc, #536]	; (80026e0 <acc_LdrPrende+0x260>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	4a84      	ldr	r2, [pc, #528]	; (80026e0 <acc_LdrPrende+0x260>)
 80024ce:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 80024d0:	4b83      	ldr	r3, [pc, #524]	; (80026e0 <acc_LdrPrende+0x260>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80024d8:	4293      	cmp	r3, r2
 80024da:	d903      	bls.n	80024e4 <acc_LdrPrende+0x64>
 80024dc:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <acc_LdrPrende+0x260>)
 80024de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80024e2:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 80024e4:	2103      	movs	r1, #3
 80024e6:	200e      	movs	r0, #14
 80024e8:	f7ff f89c 	bl	8001624 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 80024ec:	4b7c      	ldr	r3, [pc, #496]	; (80026e0 <acc_LdrPrende+0x260>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	497c      	ldr	r1, [pc, #496]	; (80026e4 <acc_LdrPrende+0x264>)
 80024f4:	487c      	ldr	r0, [pc, #496]	; (80026e8 <acc_LdrPrende+0x268>)
 80024f6:	f006 f9d7 	bl	80088a8 <siprintf>
					lcd_send_string(texto);
 80024fa:	487b      	ldr	r0, [pc, #492]	; (80026e8 <acc_LdrPrende+0x268>)
 80024fc:	f7ff f91a 	bl	8001734 <lcd_send_string>
					holdBoton = 0;
 8002500:	4b7a      	ldr	r3, [pc, #488]	; (80026ec <acc_LdrPrende+0x26c>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
				break;
 8002506:	e034      	b.n	8002572 <acc_LdrPrende+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 8002508:	4b78      	ldr	r3, [pc, #480]	; (80026ec <acc_LdrPrende+0x26c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b96      	cmp	r3, #150	; 0x96
 800250e:	d902      	bls.n	8002516 <acc_LdrPrende+0x96>
						flag_holdBoton = 1;
 8002510:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <acc_LdrPrende+0x270>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <acc_LdrPrende+0x270>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d028      	beq.n	8002570 <acc_LdrPrende+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 800251e:	4b75      	ldr	r3, [pc, #468]	; (80026f4 <acc_LdrPrende+0x274>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b18      	cmp	r3, #24
 8002524:	d924      	bls.n	8002570 <acc_LdrPrende+0xf0>
							valorUmbral -= 10;
 8002526:	4b6e      	ldr	r3, [pc, #440]	; (80026e0 <acc_LdrPrende+0x260>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3b0a      	subs	r3, #10
 800252c:	4a6c      	ldr	r2, [pc, #432]	; (80026e0 <acc_LdrPrende+0x260>)
 800252e:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 8002530:	4b6b      	ldr	r3, [pc, #428]	; (80026e0 <acc_LdrPrende+0x260>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002538:	4293      	cmp	r3, r2
 800253a:	d903      	bls.n	8002544 <acc_LdrPrende+0xc4>
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <acc_LdrPrende+0x260>)
 800253e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002542:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002544:	2103      	movs	r1, #3
 8002546:	200e      	movs	r0, #14
 8002548:	f7ff f86c 	bl	8001624 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 800254c:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <acc_LdrPrende+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	4964      	ldr	r1, [pc, #400]	; (80026e4 <acc_LdrPrende+0x264>)
 8002554:	4864      	ldr	r0, [pc, #400]	; (80026e8 <acc_LdrPrende+0x268>)
 8002556:	f006 f9a7 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 800255a:	4863      	ldr	r0, [pc, #396]	; (80026e8 <acc_LdrPrende+0x268>)
 800255c:	f7ff f8ea 	bl	8001734 <lcd_send_string>
							repitePulso = 0;
 8002560:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <acc_LdrPrende+0x274>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
				break;
 8002566:	e003      	b.n	8002570 <acc_LdrPrende+0xf0>
					flag_holdBoton = 0;
 8002568:	4b61      	ldr	r3, [pc, #388]	; (80026f0 <acc_LdrPrende+0x270>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
				break;
 800256e:	e000      	b.n	8002572 <acc_LdrPrende+0xf2>
				break;
 8002570:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe fabe 	bl	8000af4 <getStatBoton>
 8002578:	4603      	mov	r3, r0
 800257a:	2b02      	cmp	r3, #2
 800257c:	d004      	beq.n	8002588 <acc_LdrPrende+0x108>
 800257e:	2b03      	cmp	r3, #3
 8002580:	d051      	beq.n	8002626 <acc_LdrPrende+0x1a6>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <acc_LdrPrende+0x148>
				break;
 8002586:	e053      	b.n	8002630 <acc_LdrPrende+0x1b0>
					valorUmbral++;
 8002588:	4b55      	ldr	r3, [pc, #340]	; (80026e0 <acc_LdrPrende+0x260>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <acc_LdrPrende+0x260>)
 8002590:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <acc_LdrPrende+0x260>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800259a:	4293      	cmp	r3, r2
 800259c:	d902      	bls.n	80025a4 <acc_LdrPrende+0x124>
 800259e:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <acc_LdrPrende+0x260>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 80025a4:	2103      	movs	r1, #3
 80025a6:	200e      	movs	r0, #14
 80025a8:	f7ff f83c 	bl	8001624 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 80025ac:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <acc_LdrPrende+0x260>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	494c      	ldr	r1, [pc, #304]	; (80026e4 <acc_LdrPrende+0x264>)
 80025b4:	484c      	ldr	r0, [pc, #304]	; (80026e8 <acc_LdrPrende+0x268>)
 80025b6:	f006 f977 	bl	80088a8 <siprintf>
					lcd_send_string(texto);
 80025ba:	484b      	ldr	r0, [pc, #300]	; (80026e8 <acc_LdrPrende+0x268>)
 80025bc:	f7ff f8ba 	bl	8001734 <lcd_send_string>
					holdBoton = 0;
 80025c0:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <acc_LdrPrende+0x26c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
				break;
 80025c6:	e033      	b.n	8002630 <acc_LdrPrende+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <acc_LdrPrende+0x26c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b96      	cmp	r3, #150	; 0x96
 80025ce:	d902      	bls.n	80025d6 <acc_LdrPrende+0x156>
						flag_holdBoton = 1;
 80025d0:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <acc_LdrPrende+0x270>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 80025d6:	4b46      	ldr	r3, [pc, #280]	; (80026f0 <acc_LdrPrende+0x270>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <acc_LdrPrende+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 80025de:	4b45      	ldr	r3, [pc, #276]	; (80026f4 <acc_LdrPrende+0x274>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b18      	cmp	r3, #24
 80025e4:	d923      	bls.n	800262e <acc_LdrPrende+0x1ae>
							valorUmbral += 10;
 80025e6:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <acc_LdrPrende+0x260>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330a      	adds	r3, #10
 80025ec:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <acc_LdrPrende+0x260>)
 80025ee:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <acc_LdrPrende+0x260>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d902      	bls.n	8002602 <acc_LdrPrende+0x182>
 80025fc:	4b38      	ldr	r3, [pc, #224]	; (80026e0 <acc_LdrPrende+0x260>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002602:	2103      	movs	r1, #3
 8002604:	200e      	movs	r0, #14
 8002606:	f7ff f80d 	bl	8001624 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 800260a:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <acc_LdrPrende+0x260>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4934      	ldr	r1, [pc, #208]	; (80026e4 <acc_LdrPrende+0x264>)
 8002612:	4835      	ldr	r0, [pc, #212]	; (80026e8 <acc_LdrPrende+0x268>)
 8002614:	f006 f948 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 8002618:	4833      	ldr	r0, [pc, #204]	; (80026e8 <acc_LdrPrende+0x268>)
 800261a:	f7ff f88b 	bl	8001734 <lcd_send_string>
							repitePulso = 0;
 800261e:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <acc_LdrPrende+0x274>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
				break;
 8002624:	e003      	b.n	800262e <acc_LdrPrende+0x1ae>
					flag_holdBoton = 0;
 8002626:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <acc_LdrPrende+0x270>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
				break;
 800262c:	e000      	b.n	8002630 <acc_LdrPrende+0x1b0>
				break;
 800262e:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <acc_LdrPrende+0x278>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	2b63      	cmp	r3, #99	; 0x63
 8002636:	d911      	bls.n	800265c <acc_LdrPrende+0x1dc>
				lcd_put_cur(14, 2);
 8002638:	2102      	movs	r1, #2
 800263a:	200e      	movs	r0, #14
 800263c:	f7fe fff2 	bl	8001624 <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 8002640:	f7fe fc96 	bl	8000f70 <get_ldr>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4926      	ldr	r1, [pc, #152]	; (80026e4 <acc_LdrPrende+0x264>)
 800264a:	4827      	ldr	r0, [pc, #156]	; (80026e8 <acc_LdrPrende+0x268>)
 800264c:	f006 f92c 	bl	80088a8 <siprintf>
				lcd_send_string(texto);
 8002650:	4825      	ldr	r0, [pc, #148]	; (80026e8 <acc_LdrPrende+0x268>)
 8002652:	f7ff f86f 	bl	8001734 <lcd_send_string>
				timeOut_pantalla = 0;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <acc_LdrPrende+0x278>)
 8002658:	2200      	movs	r2, #0
 800265a:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 800265c:	2003      	movs	r0, #3
 800265e:	f7fe fa49 	bl	8000af4 <getStatBoton>
 8002662:	4603      	mov	r3, r0
 8002664:	2b02      	cmp	r3, #2
 8002666:	d12f      	bne.n	80026c8 <acc_LdrPrende+0x248>
				set_umbralLDR(0, valorUmbral);
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <acc_LdrPrende+0x260>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	2000      	movs	r0, #0
 8002670:	f7fe fc9e 	bl	8000fb0 <set_umbralLDR>
				lcd_clear();
 8002674:	f7fe ffc0 	bl	80015f8 <lcd_clear>
				lcd_put_cur(0, 1);
 8002678:	2101      	movs	r1, #1
 800267a:	2000      	movs	r0, #0
 800267c:	f7fe ffd2 	bl	8001624 <lcd_put_cur>
				lcd_send_string("UMBRAL NOCHE GRABADO");
 8002680:	481e      	ldr	r0, [pc, #120]	; (80026fc <acc_LdrPrende+0x27c>)
 8002682:	f7ff f857 	bl	8001734 <lcd_send_string>
				pantallaUmbral = 1;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <acc_LdrPrende+0x254>)
 8002688:	2201      	movs	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <acc_LdrPrende+0x278>)
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
				break;
 8002692:	e01c      	b.n	80026ce <acc_LdrPrende+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 8002694:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <acc_LdrPrende+0x278>)
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800269c:	d306      	bcc.n	80026ac <acc_LdrPrende+0x22c>
				menuActual = &menu[MENU_SELECCION];
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <acc_LdrPrende+0x258>)
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <acc_LdrPrende+0x25c>)
 80026a2:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <acc_LdrPrende+0x258>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 80026ac:	2002      	movs	r0, #2
 80026ae:	f7fe fa21 	bl	8000af4 <getStatBoton>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d109      	bne.n	80026cc <acc_LdrPrende+0x24c>
				menuActual = &menu[MENU_SELECCION];
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <acc_LdrPrende+0x258>)
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <acc_LdrPrende+0x25c>)
 80026bc:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <acc_LdrPrende+0x258>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	4798      	blx	r3
		break;
 80026c6:	e001      	b.n	80026cc <acc_LdrPrende+0x24c>
		break;
 80026c8:	bf00      	nop
 80026ca:	e000      	b.n	80026ce <acc_LdrPrende+0x24e>
		break;
 80026cc:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrPrende()
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000019b 	.word	0x2000019b
 80026d8:	2000029c 	.word	0x2000029c
 80026dc:	20000060 	.word	0x20000060
 80026e0:	200002b0 	.word	0x200002b0
 80026e4:	0800933c 	.word	0x0800933c
 80026e8:	20000164 	.word	0x20000164
 80026ec:	200001a1 	.word	0x200001a1
 80026f0:	200001a2 	.word	0x200001a2
 80026f4:	200001a3 	.word	0x200001a3
 80026f8:	20000196 	.word	0x20000196
 80026fc:	08009344 	.word	0x08009344

08002700 <acc_LdrApaga>:


void acc_LdrApaga (void){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 8002704:	4b93      	ldr	r3, [pc, #588]	; (8002954 <acc_LdrApaga+0x254>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <acc_LdrApaga+0x14>
 800270c:	2b01      	cmp	r3, #1
 800270e:	f000 8101 	beq.w	8002914 <acc_LdrApaga+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 8002712:	e11c      	b.n	800294e <acc_LdrApaga+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 8002714:	2002      	movs	r0, #2
 8002716:	f7fe f9ed 	bl	8000af4 <getStatBoton>
 800271a:	4603      	mov	r3, r0
 800271c:	2b02      	cmp	r3, #2
 800271e:	d107      	bne.n	8002730 <acc_LdrApaga+0x30>
				menuActual = &menu[MENU_SELECCION];
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <acc_LdrApaga+0x258>)
 8002722:	4a8e      	ldr	r2, [pc, #568]	; (800295c <acc_LdrApaga+0x25c>)
 8002724:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002726:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <acc_LdrApaga+0x258>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	4798      	blx	r3
				break;
 800272e:	e10e      	b.n	800294e <acc_LdrApaga+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f9df 	bl	8000af4 <getStatBoton>
 8002736:	4603      	mov	r3, r0
 8002738:	2b02      	cmp	r3, #2
 800273a:	d004      	beq.n	8002746 <acc_LdrApaga+0x46>
 800273c:	2b03      	cmp	r3, #3
 800273e:	d053      	beq.n	80027e8 <acc_LdrApaga+0xe8>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d021      	beq.n	8002788 <acc_LdrApaga+0x88>
				break;
 8002744:	e055      	b.n	80027f2 <acc_LdrApaga+0xf2>
					valorUmbral--;
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <acc_LdrApaga+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	4a84      	ldr	r2, [pc, #528]	; (8002960 <acc_LdrApaga+0x260>)
 800274e:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 8002750:	4b83      	ldr	r3, [pc, #524]	; (8002960 <acc_LdrApaga+0x260>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002758:	4293      	cmp	r3, r2
 800275a:	d903      	bls.n	8002764 <acc_LdrApaga+0x64>
 800275c:	4b80      	ldr	r3, [pc, #512]	; (8002960 <acc_LdrApaga+0x260>)
 800275e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002762:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8002764:	2103      	movs	r1, #3
 8002766:	200e      	movs	r0, #14
 8002768:	f7fe ff5c 	bl	8001624 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 800276c:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <acc_LdrApaga+0x260>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	497c      	ldr	r1, [pc, #496]	; (8002964 <acc_LdrApaga+0x264>)
 8002774:	487c      	ldr	r0, [pc, #496]	; (8002968 <acc_LdrApaga+0x268>)
 8002776:	f006 f897 	bl	80088a8 <siprintf>
					lcd_send_string(texto);
 800277a:	487b      	ldr	r0, [pc, #492]	; (8002968 <acc_LdrApaga+0x268>)
 800277c:	f7fe ffda 	bl	8001734 <lcd_send_string>
					holdBoton = 0;
 8002780:	4b7a      	ldr	r3, [pc, #488]	; (800296c <acc_LdrApaga+0x26c>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
				break;
 8002786:	e034      	b.n	80027f2 <acc_LdrApaga+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 8002788:	4b78      	ldr	r3, [pc, #480]	; (800296c <acc_LdrApaga+0x26c>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b96      	cmp	r3, #150	; 0x96
 800278e:	d902      	bls.n	8002796 <acc_LdrApaga+0x96>
						flag_holdBoton = 1;
 8002790:	4b77      	ldr	r3, [pc, #476]	; (8002970 <acc_LdrApaga+0x270>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <acc_LdrApaga+0x270>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d028      	beq.n	80027f0 <acc_LdrApaga+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 800279e:	4b75      	ldr	r3, [pc, #468]	; (8002974 <acc_LdrApaga+0x274>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d924      	bls.n	80027f0 <acc_LdrApaga+0xf0>
							valorUmbral -= 10;
 80027a6:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <acc_LdrApaga+0x260>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3b0a      	subs	r3, #10
 80027ac:	4a6c      	ldr	r2, [pc, #432]	; (8002960 <acc_LdrApaga+0x260>)
 80027ae:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <acc_LdrApaga+0x260>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d903      	bls.n	80027c4 <acc_LdrApaga+0xc4>
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <acc_LdrApaga+0x260>)
 80027be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027c2:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 80027c4:	2103      	movs	r1, #3
 80027c6:	200e      	movs	r0, #14
 80027c8:	f7fe ff2c 	bl	8001624 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 80027cc:	4b64      	ldr	r3, [pc, #400]	; (8002960 <acc_LdrApaga+0x260>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	461a      	mov	r2, r3
 80027d2:	4964      	ldr	r1, [pc, #400]	; (8002964 <acc_LdrApaga+0x264>)
 80027d4:	4864      	ldr	r0, [pc, #400]	; (8002968 <acc_LdrApaga+0x268>)
 80027d6:	f006 f867 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 80027da:	4863      	ldr	r0, [pc, #396]	; (8002968 <acc_LdrApaga+0x268>)
 80027dc:	f7fe ffaa 	bl	8001734 <lcd_send_string>
							repitePulso = 0;
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <acc_LdrApaga+0x274>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
				break;
 80027e6:	e003      	b.n	80027f0 <acc_LdrApaga+0xf0>
					flag_holdBoton = 0;
 80027e8:	4b61      	ldr	r3, [pc, #388]	; (8002970 <acc_LdrApaga+0x270>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
				break;
 80027ee:	e000      	b.n	80027f2 <acc_LdrApaga+0xf2>
				break;
 80027f0:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe f97e 	bl	8000af4 <getStatBoton>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d004      	beq.n	8002808 <acc_LdrApaga+0x108>
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d051      	beq.n	80028a6 <acc_LdrApaga+0x1a6>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <acc_LdrApaga+0x148>
				break;
 8002806:	e053      	b.n	80028b0 <acc_LdrApaga+0x1b0>
					valorUmbral++;
 8002808:	4b55      	ldr	r3, [pc, #340]	; (8002960 <acc_LdrApaga+0x260>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a54      	ldr	r2, [pc, #336]	; (8002960 <acc_LdrApaga+0x260>)
 8002810:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 8002812:	4b53      	ldr	r3, [pc, #332]	; (8002960 <acc_LdrApaga+0x260>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800281a:	4293      	cmp	r3, r2
 800281c:	d902      	bls.n	8002824 <acc_LdrApaga+0x124>
 800281e:	4b50      	ldr	r3, [pc, #320]	; (8002960 <acc_LdrApaga+0x260>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8002824:	2103      	movs	r1, #3
 8002826:	200e      	movs	r0, #14
 8002828:	f7fe fefc 	bl	8001624 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <acc_LdrApaga+0x260>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	494c      	ldr	r1, [pc, #304]	; (8002964 <acc_LdrApaga+0x264>)
 8002834:	484c      	ldr	r0, [pc, #304]	; (8002968 <acc_LdrApaga+0x268>)
 8002836:	f006 f837 	bl	80088a8 <siprintf>
					lcd_send_string(texto);
 800283a:	484b      	ldr	r0, [pc, #300]	; (8002968 <acc_LdrApaga+0x268>)
 800283c:	f7fe ff7a 	bl	8001734 <lcd_send_string>
					holdBoton = 0;
 8002840:	4b4a      	ldr	r3, [pc, #296]	; (800296c <acc_LdrApaga+0x26c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
				break;
 8002846:	e033      	b.n	80028b0 <acc_LdrApaga+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 8002848:	4b48      	ldr	r3, [pc, #288]	; (800296c <acc_LdrApaga+0x26c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b96      	cmp	r3, #150	; 0x96
 800284e:	d902      	bls.n	8002856 <acc_LdrApaga+0x156>
						flag_holdBoton = 1;
 8002850:	4b47      	ldr	r3, [pc, #284]	; (8002970 <acc_LdrApaga+0x270>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8002856:	4b46      	ldr	r3, [pc, #280]	; (8002970 <acc_LdrApaga+0x270>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d027      	beq.n	80028ae <acc_LdrApaga+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <acc_LdrApaga+0x274>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b18      	cmp	r3, #24
 8002864:	d923      	bls.n	80028ae <acc_LdrApaga+0x1ae>
							valorUmbral += 10;
 8002866:	4b3e      	ldr	r3, [pc, #248]	; (8002960 <acc_LdrApaga+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330a      	adds	r3, #10
 800286c:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <acc_LdrApaga+0x260>)
 800286e:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 8002870:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <acc_LdrApaga+0x260>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002878:	4293      	cmp	r3, r2
 800287a:	d902      	bls.n	8002882 <acc_LdrApaga+0x182>
 800287c:	4b38      	ldr	r3, [pc, #224]	; (8002960 <acc_LdrApaga+0x260>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002882:	2103      	movs	r1, #3
 8002884:	200e      	movs	r0, #14
 8002886:	f7fe fecd 	bl	8001624 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 800288a:	4b35      	ldr	r3, [pc, #212]	; (8002960 <acc_LdrApaga+0x260>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4934      	ldr	r1, [pc, #208]	; (8002964 <acc_LdrApaga+0x264>)
 8002892:	4835      	ldr	r0, [pc, #212]	; (8002968 <acc_LdrApaga+0x268>)
 8002894:	f006 f808 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 8002898:	4833      	ldr	r0, [pc, #204]	; (8002968 <acc_LdrApaga+0x268>)
 800289a:	f7fe ff4b 	bl	8001734 <lcd_send_string>
							repitePulso = 0;
 800289e:	4b35      	ldr	r3, [pc, #212]	; (8002974 <acc_LdrApaga+0x274>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
				break;
 80028a4:	e003      	b.n	80028ae <acc_LdrApaga+0x1ae>
					flag_holdBoton = 0;
 80028a6:	4b32      	ldr	r3, [pc, #200]	; (8002970 <acc_LdrApaga+0x270>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
				break;
 80028ac:	e000      	b.n	80028b0 <acc_LdrApaga+0x1b0>
				break;
 80028ae:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 80028b0:	4b31      	ldr	r3, [pc, #196]	; (8002978 <acc_LdrApaga+0x278>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2b63      	cmp	r3, #99	; 0x63
 80028b6:	d911      	bls.n	80028dc <acc_LdrApaga+0x1dc>
				lcd_put_cur(14, 2);
 80028b8:	2102      	movs	r1, #2
 80028ba:	200e      	movs	r0, #14
 80028bc:	f7fe feb2 	bl	8001624 <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 80028c0:	f7fe fb56 	bl	8000f70 <get_ldr>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	4926      	ldr	r1, [pc, #152]	; (8002964 <acc_LdrApaga+0x264>)
 80028ca:	4827      	ldr	r0, [pc, #156]	; (8002968 <acc_LdrApaga+0x268>)
 80028cc:	f005 ffec 	bl	80088a8 <siprintf>
				lcd_send_string(texto);
 80028d0:	4825      	ldr	r0, [pc, #148]	; (8002968 <acc_LdrApaga+0x268>)
 80028d2:	f7fe ff2f 	bl	8001734 <lcd_send_string>
				timeOut_pantalla = 0;
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <acc_LdrApaga+0x278>)
 80028d8:	2200      	movs	r2, #0
 80028da:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 80028dc:	2003      	movs	r0, #3
 80028de:	f7fe f909 	bl	8000af4 <getStatBoton>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d12f      	bne.n	8002948 <acc_LdrApaga+0x248>
				set_umbralLDR(1, valorUmbral);
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <acc_LdrApaga+0x260>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4619      	mov	r1, r3
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7fe fb5e 	bl	8000fb0 <set_umbralLDR>
				lcd_clear();
 80028f4:	f7fe fe80 	bl	80015f8 <lcd_clear>
				lcd_put_cur(0, 1);
 80028f8:	2101      	movs	r1, #1
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fe92 	bl	8001624 <lcd_put_cur>
				lcd_send_string("UMBRAL DIA GRABADO");
 8002900:	481e      	ldr	r0, [pc, #120]	; (800297c <acc_LdrApaga+0x27c>)
 8002902:	f7fe ff17 	bl	8001734 <lcd_send_string>
				pantallaUmbral = 1;
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <acc_LdrApaga+0x254>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <acc_LdrApaga+0x278>)
 800290e:	2200      	movs	r2, #0
 8002910:	801a      	strh	r2, [r3, #0]
				break;
 8002912:	e01c      	b.n	800294e <acc_LdrApaga+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <acc_LdrApaga+0x278>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800291c:	d306      	bcc.n	800292c <acc_LdrApaga+0x22c>
				menuActual = &menu[MENU_SELECCION];
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <acc_LdrApaga+0x258>)
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <acc_LdrApaga+0x25c>)
 8002922:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <acc_LdrApaga+0x258>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 800292c:	2002      	movs	r0, #2
 800292e:	f7fe f8e1 	bl	8000af4 <getStatBoton>
 8002932:	4603      	mov	r3, r0
 8002934:	2b02      	cmp	r3, #2
 8002936:	d109      	bne.n	800294c <acc_LdrApaga+0x24c>
				menuActual = &menu[MENU_SELECCION];
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <acc_LdrApaga+0x258>)
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <acc_LdrApaga+0x25c>)
 800293c:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <acc_LdrApaga+0x258>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4798      	blx	r3
		break;
 8002946:	e001      	b.n	800294c <acc_LdrApaga+0x24c>
		break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <acc_LdrApaga+0x24e>
		break;
 800294c:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrApaga()
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000019b 	.word	0x2000019b
 8002958:	2000029c 	.word	0x2000029c
 800295c:	20000060 	.word	0x20000060
 8002960:	200002b0 	.word	0x200002b0
 8002964:	0800933c 	.word	0x0800933c
 8002968:	20000164 	.word	0x20000164
 800296c:	200001a1 	.word	0x200001a1
 8002970:	200001a2 	.word	0x200001a2
 8002974:	200001a3 	.word	0x200001a3
 8002978:	20000196 	.word	0x20000196
 800297c:	0800935c 	.word	0x0800935c

08002980 <acc_setHora>:


void acc_setHora (void){
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0

	switch (pant_horaFecha){
 8002984:	4bba      	ldr	r3, [pc, #744]	; (8002c70 <acc_setHora+0x2f0>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b03      	cmp	r3, #3
 800298a:	f200 8400 	bhi.w	800318e <acc_setHora+0x80e>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <acc_setHora+0x14>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080030e7 	.word	0x080030e7
 800299c:	08003139 	.word	0x08003139
 80029a0:	0800316f 	.word	0x0800316f
		case PANT_HORA_FECHA:

			if (getStatBoton(IN_BACK) == FALL){
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7fe f8a5 	bl	8000af4 <getStatBoton>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d10a      	bne.n	80029c6 <acc_setHora+0x46>
				lcd_blinkCursOff;
 80029b0:	200c      	movs	r0, #12
 80029b2:	f7fe fdb9 	bl	8001528 <lcd_send_cmd>
				menuActual = &menu[MENU_SELECCION];
 80029b6:	4baf      	ldr	r3, [pc, #700]	; (8002c74 <acc_setHora+0x2f4>)
 80029b8:	4aaf      	ldr	r2, [pc, #700]	; (8002c78 <acc_setHora+0x2f8>)
 80029ba:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80029bc:	4bad      	ldr	r3, [pc, #692]	; (8002c74 <acc_setHora+0x2f4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	4798      	blx	r3
				return;
 80029c4:	e3ea      	b.n	800319c <acc_setHora+0x81c>
			}

			if (getStatBoton(IN_RIGHT) == FALL){
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe f894 	bl	8000af4 <getStatBoton>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d160      	bne.n	8002a94 <acc_setHora+0x114>
//				lcd_put_cur(cursor_fechaHora, 1);
//				lcd_send_string(" ");
//				lcd_put_cur(cursor_fechaHora, 3);
//				lcd_send_string(" ");

				switch (cursor_fechaHora) {
 80029d2:	4baa      	ldr	r3, [pc, #680]	; (8002c7c <acc_setHora+0x2fc>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b14      	cmp	r3, #20
 80029d8:	d84c      	bhi.n	8002a74 <acc_setHora+0xf4>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <acc_setHora+0x60>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a35 	.word	0x08002a35
 80029e4:	08002a43 	.word	0x08002a43
 80029e8:	08002a75 	.word	0x08002a75
 80029ec:	08002a35 	.word	0x08002a35
 80029f0:	08002a43 	.word	0x08002a43
 80029f4:	08002a75 	.word	0x08002a75
 80029f8:	08002a35 	.word	0x08002a35
 80029fc:	08002a5f 	.word	0x08002a5f
 8002a00:	08002a75 	.word	0x08002a75
 8002a04:	08002a51 	.word	0x08002a51
 8002a08:	08002a75 	.word	0x08002a75
 8002a0c:	08002a75 	.word	0x08002a75
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a43 	.word	0x08002a43
 8002a18:	08002a75 	.word	0x08002a75
 8002a1c:	08002a35 	.word	0x08002a35
 8002a20:	08002a43 	.word	0x08002a43
 8002a24:	08002a75 	.word	0x08002a75
 8002a28:	08002a35 	.word	0x08002a35
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002a6d 	.word	0x08002a6d
					case 6:
					case 12:
					case 15:
					case 18:
					case 19:
						cursor_fechaHora++;
 8002a34:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <acc_setHora+0x2fc>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	; (8002c7c <acc_setHora+0x2fc>)
 8002a3e:	701a      	strb	r2, [r3, #0]
					break;
 8002a40:	e019      	b.n	8002a76 <acc_setHora+0xf6>
					case 1:
					case 4:
					case 13:
					case 16:
						cursor_fechaHora += 2;
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <acc_setHora+0x2fc>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	3302      	adds	r3, #2
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b8c      	ldr	r3, [pc, #560]	; (8002c7c <acc_setHora+0x2fc>)
 8002a4c:	701a      	strb	r2, [r3, #0]
					break;
 8002a4e:	e012      	b.n	8002a76 <acc_setHora+0xf6>
					case 9:
						cursor_fechaHora += 3;
 8002a50:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <acc_setHora+0x2fc>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3303      	adds	r3, #3
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <acc_setHora+0x2fc>)
 8002a5a:	701a      	strb	r2, [r3, #0]
					break;
 8002a5c:	e00b      	b.n	8002a76 <acc_setHora+0xf6>
					case 7:
						cursor_fechaHora += 5;
 8002a5e:	4b87      	ldr	r3, [pc, #540]	; (8002c7c <acc_setHora+0x2fc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3305      	adds	r3, #5
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b85      	ldr	r3, [pc, #532]	; (8002c7c <acc_setHora+0x2fc>)
 8002a68:	701a      	strb	r2, [r3, #0]
					break;
 8002a6a:	e004      	b.n	8002a76 <acc_setHora+0xf6>
					case 20:
						cursor_fechaHora = 0;
 8002a6c:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <acc_setHora+0x2fc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
					break;
 8002a72:	e000      	b.n	8002a76 <acc_setHora+0xf6>
					default:
					break;
 8002a74:	bf00      	nop
				} //fin switch cursor_fechaHora

				if (cursor_fechaHora != 20){
 8002a76:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <acc_setHora+0x2fc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b14      	cmp	r3, #20
 8002a7c:	d006      	beq.n	8002a8c <acc_setHora+0x10c>
					lcd_put_cur(cursor_fechaHora, 2);
 8002a7e:	4b7f      	ldr	r3, [pc, #508]	; (8002c7c <acc_setHora+0x2fc>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2102      	movs	r1, #2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fdcd 	bl	8001624 <lcd_put_cur>
 8002a8a:	e003      	b.n	8002a94 <acc_setHora+0x114>
				}else{
					lcd_put_cur(9, 3);
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	2009      	movs	r0, #9
 8002a90:	f7fe fdc8 	bl	8001624 <lcd_put_cur>
				} //fin if (cursor_fechaHora != 20)

			} //fin if IN_RIGHT

			if (getStatBoton(IN_LEFT) == FALL){
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe f82d 	bl	8000af4 <getStatBoton>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d15a      	bne.n	8002b56 <acc_setHora+0x1d6>

				switch (cursor_fechaHora) {
 8002aa0:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <acc_setHora+0x2fc>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b14      	cmp	r3, #20
 8002aa6:	d846      	bhi.n	8002b36 <acc_setHora+0x1b6>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <acc_setHora+0x130>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002b05 	.word	0x08002b05
 8002ab4:	08002b1b 	.word	0x08002b1b
 8002ab8:	08002b37 	.word	0x08002b37
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002b1b 	.word	0x08002b1b
 8002ac4:	08002b37 	.word	0x08002b37
 8002ac8:	08002b0d 	.word	0x08002b0d
 8002acc:	08002b1b 	.word	0x08002b1b
 8002ad0:	08002b37 	.word	0x08002b37
 8002ad4:	08002b0d 	.word	0x08002b0d
 8002ad8:	08002b37 	.word	0x08002b37
 8002adc:	08002b37 	.word	0x08002b37
 8002ae0:	08002b29 	.word	0x08002b29
 8002ae4:	08002b1b 	.word	0x08002b1b
 8002ae8:	08002b37 	.word	0x08002b37
 8002aec:	08002b0d 	.word	0x08002b0d
 8002af0:	08002b1b 	.word	0x08002b1b
 8002af4:	08002b37 	.word	0x08002b37
 8002af8:	08002b0d 	.word	0x08002b0d
 8002afc:	08002b1b 	.word	0x08002b1b
 8002b00:	08002b1b 	.word	0x08002b1b
					case 0:
						cursor_fechaHora = 20;
 8002b04:	4b5d      	ldr	r3, [pc, #372]	; (8002c7c <acc_setHora+0x2fc>)
 8002b06:	2214      	movs	r2, #20
 8002b08:	701a      	strb	r2, [r3, #0]
					break;
 8002b0a:	e015      	b.n	8002b38 <acc_setHora+0x1b8>
					case 3:
					case 6:
					case 9:
					case 15:
					case 18:
						cursor_fechaHora -= 2;
 8002b0c:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <acc_setHora+0x2fc>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	3b02      	subs	r3, #2
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <acc_setHora+0x2fc>)
 8002b16:	701a      	strb	r2, [r3, #0]
					break;
 8002b18:	e00e      	b.n	8002b38 <acc_setHora+0x1b8>
					case 7:
					case 13:
					case 16:
					case 19:
					case 20:
						cursor_fechaHora--;
 8002b1a:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <acc_setHora+0x2fc>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4b56      	ldr	r3, [pc, #344]	; (8002c7c <acc_setHora+0x2fc>)
 8002b24:	701a      	strb	r2, [r3, #0]
					break;
 8002b26:	e007      	b.n	8002b38 <acc_setHora+0x1b8>
					case 12:
						cursor_fechaHora -= 5;
 8002b28:	4b54      	ldr	r3, [pc, #336]	; (8002c7c <acc_setHora+0x2fc>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	3b05      	subs	r3, #5
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	4b52      	ldr	r3, [pc, #328]	; (8002c7c <acc_setHora+0x2fc>)
 8002b32:	701a      	strb	r2, [r3, #0]
					break;
 8002b34:	e000      	b.n	8002b38 <acc_setHora+0x1b8>
					default:
					break;
 8002b36:	bf00      	nop
				} //fin switch cursor_fechaHora

				if (cursor_fechaHora != 20){
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <acc_setHora+0x2fc>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b14      	cmp	r3, #20
 8002b3e:	d006      	beq.n	8002b4e <acc_setHora+0x1ce>
					lcd_put_cur(cursor_fechaHora, 2);
 8002b40:	4b4e      	ldr	r3, [pc, #312]	; (8002c7c <acc_setHora+0x2fc>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fd6c 	bl	8001624 <lcd_put_cur>
 8002b4c:	e003      	b.n	8002b56 <acc_setHora+0x1d6>
				}else{
					lcd_put_cur(9, 3);
 8002b4e:	2103      	movs	r1, #3
 8002b50:	2009      	movs	r0, #9
 8002b52:	f7fe fd67 	bl	8001624 <lcd_put_cur>
				} //fin if (cursor_fechaHora != 20)

			} //fin if IN_LEFT

			if (getStatBoton(IN_OK) == FALL){
 8002b56:	2003      	movs	r0, #3
 8002b58:	f7fd ffcc 	bl	8000af4 <getStatBoton>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	f040 82bd 	bne.w	80030de <acc_setHora+0x75e>
				switch (cursor_fechaHora) {
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <acc_setHora+0x2fc>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b14      	cmp	r3, #20
 8002b6a:	f200 82ba 	bhi.w	80030e2 <acc_setHora+0x762>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <acc_setHora+0x1f4>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002bc9 	.word	0x08002bc9
 8002b78:	08002c27 	.word	0x08002c27
 8002b7c:	080030e3 	.word	0x080030e3
 8002b80:	08002c91 	.word	0x08002c91
 8002b84:	08002cef 	.word	0x08002cef
 8002b88:	080030e3 	.word	0x080030e3
 8002b8c:	08002d39 	.word	0x08002d39
 8002b90:	08002d97 	.word	0x08002d97
 8002b94:	080030e3 	.word	0x080030e3
 8002b98:	080030e3 	.word	0x080030e3
 8002b9c:	080030e3 	.word	0x080030e3
 8002ba0:	080030e3 	.word	0x080030e3
 8002ba4:	08002de1 	.word	0x08002de1
 8002ba8:	08002e53 	.word	0x08002e53
 8002bac:	080030e3 	.word	0x080030e3
 8002bb0:	08002e9d 	.word	0x08002e9d
 8002bb4:	08002f29 	.word	0x08002f29
 8002bb8:	080030e3 	.word	0x080030e3
 8002bbc:	08002f73 	.word	0x08002f73
 8002bc0:	08002fbf 	.word	0x08002fbf
 8002bc4:	0800300d 	.word	0x0800300d
					case 0:
						muestraHora.Hours += 10;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <acc_setHora+0x300>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	330a      	adds	r3, #10
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <acc_setHora+0x300>)
 8002bd2:	701a      	strb	r2, [r3, #0]
						if (muestraHora.Hours > 23) muestraHora.Hours %= 10;
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <acc_setHora+0x300>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b17      	cmp	r3, #23
 8002bda:	d90d      	bls.n	8002bf8 <acc_setHora+0x278>
 8002bdc:	4b28      	ldr	r3, [pc, #160]	; (8002c80 <acc_setHora+0x300>)
 8002bde:	781a      	ldrb	r2, [r3, #0]
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <acc_setHora+0x304>)
 8002be2:	fba3 1302 	umull	r1, r3, r3, r2
 8002be6:	08d9      	lsrs	r1, r3, #3
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <acc_setHora+0x300>)
 8002bf6:	701a      	strb	r2, [r3, #0]

						lcd_put_cur(cursor_fechaHora, 2);
 8002bf8:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <acc_setHora+0x2fc>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe fd10 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Hours);
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <acc_setHora+0x300>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	491f      	ldr	r1, [pc, #124]	; (8002c88 <acc_setHora+0x308>)
 8002c0c:	481f      	ldr	r0, [pc, #124]	; (8002c8c <acc_setHora+0x30c>)
 8002c0e:	f005 fe4b 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002c12:	481e      	ldr	r0, [pc, #120]	; (8002c8c <acc_setHora+0x30c>)
 8002c14:	f7fe fd8e 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002c18:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <acc_setHora+0x2fc>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fd00 	bl	8001624 <lcd_put_cur>
					break;
 8002c24:	e25e      	b.n	80030e4 <acc_setHora+0x764>
					case 1:
						muestraHora.Hours++;
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <acc_setHora+0x300>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <acc_setHora+0x300>)
 8002c30:	701a      	strb	r2, [r3, #0]
						if (muestraHora.Hours > 23) muestraHora.Hours = 0;
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <acc_setHora+0x300>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b17      	cmp	r3, #23
 8002c38:	d902      	bls.n	8002c40 <acc_setHora+0x2c0>
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <acc_setHora+0x300>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <acc_setHora+0x2fc>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fceb 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Hours);
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <acc_setHora+0x300>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	; (8002c88 <acc_setHora+0x308>)
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <acc_setHora+0x30c>)
 8002c58:	f005 fe26 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <acc_setHora+0x30c>)
 8002c5e:	f7fe fd69 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002c62:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <acc_setHora+0x2fc>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2102      	movs	r1, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fcdb 	bl	8001624 <lcd_put_cur>
					break;
 8002c6e:	e239      	b.n	80030e4 <acc_setHora+0x764>
 8002c70:	2000019d 	.word	0x2000019d
 8002c74:	2000029c 	.word	0x2000029c
 8002c78:	20000060 	.word	0x20000060
 8002c7c:	2000019c 	.word	0x2000019c
 8002c80:	200002b8 	.word	0x200002b8
 8002c84:	cccccccd 	.word	0xcccccccd
 8002c88:	08009370 	.word	0x08009370
 8002c8c:	20000164 	.word	0x20000164
					case 3:
						muestraHora.Minutes += 10;
 8002c90:	4b9f      	ldr	r3, [pc, #636]	; (8002f10 <acc_setHora+0x590>)
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	330a      	adds	r3, #10
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b9d      	ldr	r3, [pc, #628]	; (8002f10 <acc_setHora+0x590>)
 8002c9a:	705a      	strb	r2, [r3, #1]
						if (muestraHora.Minutes > 59) muestraHora.Minutes %= 10;
 8002c9c:	4b9c      	ldr	r3, [pc, #624]	; (8002f10 <acc_setHora+0x590>)
 8002c9e:	785b      	ldrb	r3, [r3, #1]
 8002ca0:	2b3b      	cmp	r3, #59	; 0x3b
 8002ca2:	d90d      	bls.n	8002cc0 <acc_setHora+0x340>
 8002ca4:	4b9a      	ldr	r3, [pc, #616]	; (8002f10 <acc_setHora+0x590>)
 8002ca6:	785a      	ldrb	r2, [r3, #1]
 8002ca8:	4b9a      	ldr	r3, [pc, #616]	; (8002f14 <acc_setHora+0x594>)
 8002caa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cae:	08d9      	lsrs	r1, r3, #3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b94      	ldr	r3, [pc, #592]	; (8002f10 <acc_setHora+0x590>)
 8002cbe:	705a      	strb	r2, [r3, #1]

						lcd_put_cur(cursor_fechaHora, 2);
 8002cc0:	4b95      	ldr	r3, [pc, #596]	; (8002f18 <acc_setHora+0x598>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2102      	movs	r1, #2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fcac 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Minutes);
 8002ccc:	4b90      	ldr	r3, [pc, #576]	; (8002f10 <acc_setHora+0x590>)
 8002cce:	785b      	ldrb	r3, [r3, #1]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4992      	ldr	r1, [pc, #584]	; (8002f1c <acc_setHora+0x59c>)
 8002cd4:	4892      	ldr	r0, [pc, #584]	; (8002f20 <acc_setHora+0x5a0>)
 8002cd6:	f005 fde7 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002cda:	4891      	ldr	r0, [pc, #580]	; (8002f20 <acc_setHora+0x5a0>)
 8002cdc:	f7fe fd2a 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002ce0:	4b8d      	ldr	r3, [pc, #564]	; (8002f18 <acc_setHora+0x598>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fe fc9c 	bl	8001624 <lcd_put_cur>
					break;
 8002cec:	e1fa      	b.n	80030e4 <acc_setHora+0x764>
					case 4:
						muestraHora.Minutes++;
 8002cee:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <acc_setHora+0x590>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b86      	ldr	r3, [pc, #536]	; (8002f10 <acc_setHora+0x590>)
 8002cf8:	705a      	strb	r2, [r3, #1]
						if (muestraHora.Minutes > 59) muestraHora.Minutes = 0;
 8002cfa:	4b85      	ldr	r3, [pc, #532]	; (8002f10 <acc_setHora+0x590>)
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b3b      	cmp	r3, #59	; 0x3b
 8002d00:	d902      	bls.n	8002d08 <acc_setHora+0x388>
 8002d02:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <acc_setHora+0x590>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	705a      	strb	r2, [r3, #1]

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002d08:	4b83      	ldr	r3, [pc, #524]	; (8002f18 <acc_setHora+0x598>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fe fc87 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Minutes);
 8002d16:	4b7e      	ldr	r3, [pc, #504]	; (8002f10 <acc_setHora+0x590>)
 8002d18:	785b      	ldrb	r3, [r3, #1]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	497f      	ldr	r1, [pc, #508]	; (8002f1c <acc_setHora+0x59c>)
 8002d1e:	4880      	ldr	r0, [pc, #512]	; (8002f20 <acc_setHora+0x5a0>)
 8002d20:	f005 fdc2 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002d24:	487e      	ldr	r0, [pc, #504]	; (8002f20 <acc_setHora+0x5a0>)
 8002d26:	f7fe fd05 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002d2a:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <acc_setHora+0x598>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fc77 	bl	8001624 <lcd_put_cur>
					break;
 8002d36:	e1d5      	b.n	80030e4 <acc_setHora+0x764>
					case 6:
						muestraHora.Seconds += 10;
 8002d38:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <acc_setHora+0x590>)
 8002d3a:	789b      	ldrb	r3, [r3, #2]
 8002d3c:	330a      	adds	r3, #10
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <acc_setHora+0x590>)
 8002d42:	709a      	strb	r2, [r3, #2]
						if (muestraHora.Seconds > 59) muestraHora.Seconds %= 10;
 8002d44:	4b72      	ldr	r3, [pc, #456]	; (8002f10 <acc_setHora+0x590>)
 8002d46:	789b      	ldrb	r3, [r3, #2]
 8002d48:	2b3b      	cmp	r3, #59	; 0x3b
 8002d4a:	d90d      	bls.n	8002d68 <acc_setHora+0x3e8>
 8002d4c:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <acc_setHora+0x590>)
 8002d4e:	789a      	ldrb	r2, [r3, #2]
 8002d50:	4b70      	ldr	r3, [pc, #448]	; (8002f14 <acc_setHora+0x594>)
 8002d52:	fba3 1302 	umull	r1, r3, r3, r2
 8002d56:	08d9      	lsrs	r1, r3, #3
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b6a      	ldr	r3, [pc, #424]	; (8002f10 <acc_setHora+0x590>)
 8002d66:	709a      	strb	r2, [r3, #2]

						lcd_put_cur(cursor_fechaHora, 2);
 8002d68:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <acc_setHora+0x598>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fc58 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Seconds);
 8002d74:	4b66      	ldr	r3, [pc, #408]	; (8002f10 <acc_setHora+0x590>)
 8002d76:	789b      	ldrb	r3, [r3, #2]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4968      	ldr	r1, [pc, #416]	; (8002f1c <acc_setHora+0x59c>)
 8002d7c:	4868      	ldr	r0, [pc, #416]	; (8002f20 <acc_setHora+0x5a0>)
 8002d7e:	f005 fd93 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002d82:	4867      	ldr	r0, [pc, #412]	; (8002f20 <acc_setHora+0x5a0>)
 8002d84:	f7fe fcd6 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002d88:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <acc_setHora+0x598>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe fc48 	bl	8001624 <lcd_put_cur>
					break;
 8002d94:	e1a6      	b.n	80030e4 <acc_setHora+0x764>
					case 7:
						muestraHora.Seconds++;
 8002d96:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <acc_setHora+0x590>)
 8002d98:	789b      	ldrb	r3, [r3, #2]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	; (8002f10 <acc_setHora+0x590>)
 8002da0:	709a      	strb	r2, [r3, #2]
						if (muestraHora.Seconds > 59) muestraHora.Seconds = 0;
 8002da2:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <acc_setHora+0x590>)
 8002da4:	789b      	ldrb	r3, [r3, #2]
 8002da6:	2b3b      	cmp	r3, #59	; 0x3b
 8002da8:	d902      	bls.n	8002db0 <acc_setHora+0x430>
 8002daa:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <acc_setHora+0x590>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	709a      	strb	r2, [r3, #2]

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <acc_setHora+0x598>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	2102      	movs	r1, #2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fc33 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraHora.Seconds);
 8002dbe:	4b54      	ldr	r3, [pc, #336]	; (8002f10 <acc_setHora+0x590>)
 8002dc0:	789b      	ldrb	r3, [r3, #2]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4955      	ldr	r1, [pc, #340]	; (8002f1c <acc_setHora+0x59c>)
 8002dc6:	4856      	ldr	r0, [pc, #344]	; (8002f20 <acc_setHora+0x5a0>)
 8002dc8:	f005 fd6e 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002dcc:	4854      	ldr	r0, [pc, #336]	; (8002f20 <acc_setHora+0x5a0>)
 8002dce:	f7fe fcb1 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <acc_setHora+0x598>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fc23 	bl	8001624 <lcd_put_cur>
					break;
 8002dde:	e181      	b.n	80030e4 <acc_setHora+0x764>
					case 12:
						muestraFecha.Date += 10;
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <acc_setHora+0x5a4>)
 8002de2:	789b      	ldrb	r3, [r3, #2]
 8002de4:	330a      	adds	r3, #10
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <acc_setHora+0x5a4>)
 8002dea:	709a      	strb	r2, [r3, #2]
						if (muestraFecha.Date > 31) muestraFecha.Date %= 10;
 8002dec:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <acc_setHora+0x5a4>)
 8002dee:	789b      	ldrb	r3, [r3, #2]
 8002df0:	2b1f      	cmp	r3, #31
 8002df2:	d90d      	bls.n	8002e10 <acc_setHora+0x490>
 8002df4:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <acc_setHora+0x5a4>)
 8002df6:	789a      	ldrb	r2, [r3, #2]
 8002df8:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <acc_setHora+0x594>)
 8002dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfe:	08d9      	lsrs	r1, r3, #3
 8002e00:	460b      	mov	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b45      	ldr	r3, [pc, #276]	; (8002f24 <acc_setHora+0x5a4>)
 8002e0e:	709a      	strb	r2, [r3, #2]
						if (!muestraFecha.Date) muestraFecha.Date++;
 8002e10:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <acc_setHora+0x5a4>)
 8002e12:	789b      	ldrb	r3, [r3, #2]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <acc_setHora+0x4a4>
 8002e18:	4b42      	ldr	r3, [pc, #264]	; (8002f24 <acc_setHora+0x5a4>)
 8002e1a:	789b      	ldrb	r3, [r3, #2]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b40      	ldr	r3, [pc, #256]	; (8002f24 <acc_setHora+0x5a4>)
 8002e22:	709a      	strb	r2, [r3, #2]

						lcd_put_cur(cursor_fechaHora, 2);
 8002e24:	4b3c      	ldr	r3, [pc, #240]	; (8002f18 <acc_setHora+0x598>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fbfa 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Date);
 8002e30:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <acc_setHora+0x5a4>)
 8002e32:	789b      	ldrb	r3, [r3, #2]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4939      	ldr	r1, [pc, #228]	; (8002f1c <acc_setHora+0x59c>)
 8002e38:	4839      	ldr	r0, [pc, #228]	; (8002f20 <acc_setHora+0x5a0>)
 8002e3a:	f005 fd35 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002e3e:	4838      	ldr	r0, [pc, #224]	; (8002f20 <acc_setHora+0x5a0>)
 8002e40:	f7fe fc78 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <acc_setHora+0x598>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2102      	movs	r1, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fbea 	bl	8001624 <lcd_put_cur>
					break;
 8002e50:	e148      	b.n	80030e4 <acc_setHora+0x764>
					case 13:
						muestraFecha.Date++;
 8002e52:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <acc_setHora+0x5a4>)
 8002e54:	789b      	ldrb	r3, [r3, #2]
 8002e56:	3301      	adds	r3, #1
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <acc_setHora+0x5a4>)
 8002e5c:	709a      	strb	r2, [r3, #2]
						if (muestraFecha.Date > 31) muestraFecha.Date = 1;
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <acc_setHora+0x5a4>)
 8002e60:	789b      	ldrb	r3, [r3, #2]
 8002e62:	2b1f      	cmp	r3, #31
 8002e64:	d902      	bls.n	8002e6c <acc_setHora+0x4ec>
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <acc_setHora+0x5a4>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	709a      	strb	r2, [r3, #2]

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <acc_setHora+0x598>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	3b01      	subs	r3, #1
 8002e72:	2102      	movs	r1, #2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fbd5 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Date);
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <acc_setHora+0x5a4>)
 8002e7c:	789b      	ldrb	r3, [r3, #2]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4926      	ldr	r1, [pc, #152]	; (8002f1c <acc_setHora+0x59c>)
 8002e82:	4827      	ldr	r0, [pc, #156]	; (8002f20 <acc_setHora+0x5a0>)
 8002e84:	f005 fd10 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002e88:	4825      	ldr	r0, [pc, #148]	; (8002f20 <acc_setHora+0x5a0>)
 8002e8a:	f7fe fc53 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <acc_setHora+0x598>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe fbc5 	bl	8001624 <lcd_put_cur>
					break;
 8002e9a:	e123      	b.n	80030e4 <acc_setHora+0x764>
					case 15:
						muestraFecha.Month += 10;
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <acc_setHora+0x5a4>)
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	330a      	adds	r3, #10
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <acc_setHora+0x5a4>)
 8002ea6:	705a      	strb	r2, [r3, #1]
						if (muestraFecha.Month > 12) muestraFecha.Month %= 10;
 8002ea8:	4b1e      	ldr	r3, [pc, #120]	; (8002f24 <acc_setHora+0x5a4>)
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d90d      	bls.n	8002ecc <acc_setHora+0x54c>
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <acc_setHora+0x5a4>)
 8002eb2:	785a      	ldrb	r2, [r3, #1]
 8002eb4:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <acc_setHora+0x594>)
 8002eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eba:	08d9      	lsrs	r1, r3, #3
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <acc_setHora+0x5a4>)
 8002eca:	705a      	strb	r2, [r3, #1]
						if (!muestraFecha.Month) muestraFecha.Month++;
 8002ecc:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <acc_setHora+0x5a4>)
 8002ece:	785b      	ldrb	r3, [r3, #1]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <acc_setHora+0x560>
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <acc_setHora+0x5a4>)
 8002ed6:	785b      	ldrb	r3, [r3, #1]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <acc_setHora+0x5a4>)
 8002ede:	705a      	strb	r2, [r3, #1]

						lcd_put_cur(cursor_fechaHora, 2);
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <acc_setHora+0x598>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fb9c 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Month);
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <acc_setHora+0x5a4>)
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	490a      	ldr	r1, [pc, #40]	; (8002f1c <acc_setHora+0x59c>)
 8002ef4:	480a      	ldr	r0, [pc, #40]	; (8002f20 <acc_setHora+0x5a0>)
 8002ef6:	f005 fcd7 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002efa:	4809      	ldr	r0, [pc, #36]	; (8002f20 <acc_setHora+0x5a0>)
 8002efc:	f7fe fc1a 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <acc_setHora+0x598>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2102      	movs	r1, #2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fb8c 	bl	8001624 <lcd_put_cur>
					break;
 8002f0c:	e0ea      	b.n	80030e4 <acc_setHora+0x764>
 8002f0e:	bf00      	nop
 8002f10:	200002b8 	.word	0x200002b8
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	2000019c 	.word	0x2000019c
 8002f1c:	08009370 	.word	0x08009370
 8002f20:	20000164 	.word	0x20000164
 8002f24:	200002a4 	.word	0x200002a4
					case 16:
						muestraFecha.Month++;
 8002f28:	4b9d      	ldr	r3, [pc, #628]	; (80031a0 <acc_setHora+0x820>)
 8002f2a:	785b      	ldrb	r3, [r3, #1]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	4b9b      	ldr	r3, [pc, #620]	; (80031a0 <acc_setHora+0x820>)
 8002f32:	705a      	strb	r2, [r3, #1]
						if (muestraFecha.Month > 12) muestraFecha.Month = 1;
 8002f34:	4b9a      	ldr	r3, [pc, #616]	; (80031a0 <acc_setHora+0x820>)
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d902      	bls.n	8002f42 <acc_setHora+0x5c2>
 8002f3c:	4b98      	ldr	r3, [pc, #608]	; (80031a0 <acc_setHora+0x820>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	705a      	strb	r2, [r3, #1]

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002f42:	4b98      	ldr	r3, [pc, #608]	; (80031a4 <acc_setHora+0x824>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fb6a 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Month);
 8002f50:	4b93      	ldr	r3, [pc, #588]	; (80031a0 <acc_setHora+0x820>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4994      	ldr	r1, [pc, #592]	; (80031a8 <acc_setHora+0x828>)
 8002f58:	4894      	ldr	r0, [pc, #592]	; (80031ac <acc_setHora+0x82c>)
 8002f5a:	f005 fca5 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002f5e:	4893      	ldr	r0, [pc, #588]	; (80031ac <acc_setHora+0x82c>)
 8002f60:	f7fe fbe8 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <acc_setHora+0x824>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2102      	movs	r1, #2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fb5a 	bl	8001624 <lcd_put_cur>
					break;
 8002f70:	e0b8      	b.n	80030e4 <acc_setHora+0x764>
					case 18:
						muestraFecha.Year += 10;
 8002f72:	4b8b      	ldr	r3, [pc, #556]	; (80031a0 <acc_setHora+0x820>)
 8002f74:	78db      	ldrb	r3, [r3, #3]
 8002f76:	330a      	adds	r3, #10
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b89      	ldr	r3, [pc, #548]	; (80031a0 <acc_setHora+0x820>)
 8002f7c:	70da      	strb	r2, [r3, #3]
						if (muestraFecha.Year > 2099) muestraFecha.Year = 2000;

						lcd_put_cur(cursor_fechaHora, 2);
 8002f7e:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <acc_setHora+0x824>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fe fb4d 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Year%100);
 8002f8a:	4b85      	ldr	r3, [pc, #532]	; (80031a0 <acc_setHora+0x820>)
 8002f8c:	78db      	ldrb	r3, [r3, #3]
 8002f8e:	4a88      	ldr	r2, [pc, #544]	; (80031b0 <acc_setHora+0x830>)
 8002f90:	fba2 1203 	umull	r1, r2, r2, r3
 8002f94:	0952      	lsrs	r2, r2, #5
 8002f96:	2164      	movs	r1, #100	; 0x64
 8002f98:	fb01 f202 	mul.w	r2, r1, r2
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4981      	ldr	r1, [pc, #516]	; (80031a8 <acc_setHora+0x828>)
 8002fa4:	4881      	ldr	r0, [pc, #516]	; (80031ac <acc_setHora+0x82c>)
 8002fa6:	f005 fc7f 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002faa:	4880      	ldr	r0, [pc, #512]	; (80031ac <acc_setHora+0x82c>)
 8002fac:	f7fe fbc2 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002fb0:	4b7c      	ldr	r3, [pc, #496]	; (80031a4 <acc_setHora+0x824>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2102      	movs	r1, #2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fb34 	bl	8001624 <lcd_put_cur>
					break;
 8002fbc:	e092      	b.n	80030e4 <acc_setHora+0x764>
					case 19:
						muestraFecha.Year++;
 8002fbe:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <acc_setHora+0x820>)
 8002fc0:	78db      	ldrb	r3, [r3, #3]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <acc_setHora+0x820>)
 8002fc8:	70da      	strb	r2, [r3, #3]
						if (muestraFecha.Year > 2099) muestraFecha.Year = 2000;

						lcd_put_cur(cursor_fechaHora-1, 2);
 8002fca:	4b76      	ldr	r3, [pc, #472]	; (80031a4 <acc_setHora+0x824>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	2102      	movs	r1, #2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fb26 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "%02d", muestraFecha.Year%100);
 8002fd8:	4b71      	ldr	r3, [pc, #452]	; (80031a0 <acc_setHora+0x820>)
 8002fda:	78db      	ldrb	r3, [r3, #3]
 8002fdc:	4a74      	ldr	r2, [pc, #464]	; (80031b0 <acc_setHora+0x830>)
 8002fde:	fba2 1203 	umull	r1, r2, r2, r3
 8002fe2:	0952      	lsrs	r2, r2, #5
 8002fe4:	2164      	movs	r1, #100	; 0x64
 8002fe6:	fb01 f202 	mul.w	r2, r1, r2
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	496d      	ldr	r1, [pc, #436]	; (80031a8 <acc_setHora+0x828>)
 8002ff2:	486e      	ldr	r0, [pc, #440]	; (80031ac <acc_setHora+0x82c>)
 8002ff4:	f005 fc58 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 8002ff8:	486c      	ldr	r0, [pc, #432]	; (80031ac <acc_setHora+0x82c>)
 8002ffa:	f7fe fb9b 	bl	8001734 <lcd_send_string>
						lcd_put_cur(cursor_fechaHora, 2);
 8002ffe:	4b69      	ldr	r3, [pc, #420]	; (80031a4 <acc_setHora+0x824>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2102      	movs	r1, #2
 8003004:	4618      	mov	r0, r3
 8003006:	f7fe fb0d 	bl	8001624 <lcd_put_cur>
					break;
 800300a:	e06b      	b.n	80030e4 <acc_setHora+0x764>
					case 20:
						lcd_blinkCursOff;
 800300c:	200c      	movs	r0, #12
 800300e:	f7fe fa8b 	bl	8001528 <lcd_send_cmd>
						if ( (muestraFecha.Year % 4 == 0 && muestraFecha.Year % 100 != 0) || (muestraFecha.Year % 400 == 0) ){
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <acc_setHora+0x820>)
 8003014:	78db      	ldrb	r3, [r3, #3]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10c      	bne.n	800303a <acc_setHora+0x6ba>
 8003020:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <acc_setHora+0x820>)
 8003022:	78db      	ldrb	r3, [r3, #3]
 8003024:	4a62      	ldr	r2, [pc, #392]	; (80031b0 <acc_setHora+0x830>)
 8003026:	fba2 1203 	umull	r1, r2, r2, r3
 800302a:	0952      	lsrs	r2, r2, #5
 800302c:	2164      	movs	r1, #100	; 0x64
 800302e:	fb01 f202 	mul.w	r2, r1, r2
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <acc_setHora+0x6da>
 800303a:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <acc_setHora+0x820>)
 800303c:	78db      	ldrb	r3, [r3, #3]
 800303e:	461a      	mov	r2, r3
 8003040:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <acc_setHora+0x830>)
 8003042:	fb83 1302 	smull	r1, r3, r3, r2
 8003046:	11d9      	asrs	r1, r3, #7
 8003048:	17d3      	asrs	r3, r2, #31
 800304a:	1acb      	subs	r3, r1, r3
 800304c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <acc_setHora+0x6e2>
							diasPorMes[2] = 29;
 800305a:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <acc_setHora+0x834>)
 800305c:	221d      	movs	r2, #29
 800305e:	709a      	strb	r2, [r3, #2]
 8003060:	e002      	b.n	8003068 <acc_setHora+0x6e8>
						}else{
							diasPorMes[2] = 28;
 8003062:	4b54      	ldr	r3, [pc, #336]	; (80031b4 <acc_setHora+0x834>)
 8003064:	221c      	movs	r2, #28
 8003066:	709a      	strb	r2, [r3, #2]
						}

						if (muestraFecha.Date > diasPorMes[muestraFecha.Month]){
 8003068:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <acc_setHora+0x820>)
 800306a:	789a      	ldrb	r2, [r3, #2]
 800306c:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <acc_setHora+0x820>)
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	4619      	mov	r1, r3
 8003072:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <acc_setHora+0x834>)
 8003074:	5c5b      	ldrb	r3, [r3, r1]
 8003076:	429a      	cmp	r2, r3
 8003078:	d90e      	bls.n	8003098 <acc_setHora+0x718>
							lcd_clear();
 800307a:	f7fe fabd 	bl	80015f8 <lcd_clear>
							lcd_put_cur(3, 1);
 800307e:	2101      	movs	r1, #1
 8003080:	2003      	movs	r0, #3
 8003082:	f7fe facf 	bl	8001624 <lcd_put_cur>
							lcd_send_string("FECHA INVALIDA");
 8003086:	484c      	ldr	r0, [pc, #304]	; (80031b8 <acc_setHora+0x838>)
 8003088:	f7fe fb54 	bl	8001734 <lcd_send_string>
							timeOut_pantalla = 0;
 800308c:	4b4b      	ldr	r3, [pc, #300]	; (80031bc <acc_setHora+0x83c>)
 800308e:	2200      	movs	r2, #0
 8003090:	801a      	strh	r2, [r3, #0]
							pant_horaFecha = PANT_ERROR_H_F;
 8003092:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <acc_setHora+0x840>)
 8003094:	2203      	movs	r2, #3
 8003096:	701a      	strb	r2, [r3, #0]
						} //fin if (muestraFecha.Date > diasPorMes[muestraFecha.Month])

						diaSemana = calculaDiaSemana(muestraFecha.Year, muestraFecha.Month, muestraFecha.Date);
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <acc_setHora+0x820>)
 800309a:	78db      	ldrb	r3, [r3, #3]
 800309c:	4618      	mov	r0, r3
 800309e:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <acc_setHora+0x820>)
 80030a0:	785b      	ldrb	r3, [r3, #1]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <acc_setHora+0x820>)
 80030a6:	789b      	ldrb	r3, [r3, #2]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 fb2b 	bl	8003704 <calculaDiaSemana>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <acc_setHora+0x844>)
 80030b4:	701a      	strb	r2, [r3, #0]

						lcd_clear();
 80030b6:	f7fe fa9f 	bl	80015f8 <lcd_clear>
						lcd_put_cur(0, 0);
 80030ba:	2100      	movs	r1, #0
 80030bc:	2000      	movs	r0, #0
 80030be:	f7fe fab1 	bl	8001624 <lcd_put_cur>
						lcd_send_string("CONF. HORA Y FECHA?");
 80030c2:	4841      	ldr	r0, [pc, #260]	; (80031c8 <acc_setHora+0x848>)
 80030c4:	f7fe fb36 	bl	8001734 <lcd_send_string>
						lcd_put_cur(0, 2);
 80030c8:	2102      	movs	r1, #2
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fe faaa 	bl	8001624 <lcd_put_cur>
						lcd_send_string("ATRAS:NO  ACEPTAR:SI");
 80030d0:	483e      	ldr	r0, [pc, #248]	; (80031cc <acc_setHora+0x84c>)
 80030d2:	f7fe fb2f 	bl	8001734 <lcd_send_string>

						pant_horaFecha = PANT_CONFIR_H_F;
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <acc_setHora+0x840>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]

					break;
 80030dc:	e002      	b.n	80030e4 <acc_setHora+0x764>
					default:
					break;
				} //fin switch cursor_fechaHora
			} //fin if IN_UP
 80030de:	bf00      	nop
 80030e0:	e05c      	b.n	800319c <acc_setHora+0x81c>
					break;
 80030e2:	bf00      	nop

		break;
 80030e4:	e05a      	b.n	800319c <acc_setHora+0x81c>
		case PANT_CONFIR_H_F:
			if (getStatBoton(IN_BACK) == FALL){
 80030e6:	2002      	movs	r0, #2
 80030e8:	f7fd fd04 	bl	8000af4 <getStatBoton>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d102      	bne.n	80030f8 <acc_setHora+0x778>
				init_setHora();
 80030f2:	f7fe febb 	bl	8001e6c <init_setHora>
				return;
 80030f6:	e051      	b.n	800319c <acc_setHora+0x81c>
			} //fin if IN_BACK

			if (getStatBoton(IN_OK) == FALL){
 80030f8:	2003      	movs	r0, #3
 80030fa:	f7fd fcfb 	bl	8000af4 <getStatBoton>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b02      	cmp	r3, #2
 8003102:	d146      	bne.n	8003192 <acc_setHora+0x812>
				HAL_RTC_SetTime(&hrtc, &muestraHora, RTC_FORMAT_BIN);
 8003104:	2200      	movs	r2, #0
 8003106:	4932      	ldr	r1, [pc, #200]	; (80031d0 <acc_setHora+0x850>)
 8003108:	4832      	ldr	r0, [pc, #200]	; (80031d4 <acc_setHora+0x854>)
 800310a:	f003 ff41 	bl	8006f90 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &muestraFecha, RTC_FORMAT_BIN);
 800310e:	2200      	movs	r2, #0
 8003110:	4923      	ldr	r1, [pc, #140]	; (80031a0 <acc_setHora+0x820>)
 8003112:	4830      	ldr	r0, [pc, #192]	; (80031d4 <acc_setHora+0x854>)
 8003114:	f004 f8ac 	bl	8007270 <HAL_RTC_SetDate>
				lcd_clear();
 8003118:	f7fe fa6e 	bl	80015f8 <lcd_clear>
				lcd_put_cur(3, 1);
 800311c:	2101      	movs	r1, #1
 800311e:	2003      	movs	r0, #3
 8003120:	f7fe fa80 	bl	8001624 <lcd_put_cur>
				lcd_send_string("AJUSTE GRABADO.");
 8003124:	482c      	ldr	r0, [pc, #176]	; (80031d8 <acc_setHora+0x858>)
 8003126:	f7fe fb05 	bl	8001734 <lcd_send_string>
				pant_horaFecha = PANT_GRABADO_H_F;
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <acc_setHora+0x840>)
 800312c:	2202      	movs	r2, #2
 800312e:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <acc_setHora+0x83c>)
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]
				break;
 8003136:	e031      	b.n	800319c <acc_setHora+0x81c>
			} //fin if IN_OK
		break;
		case PANT_GRABADO_H_F:
			if (timeOut_pantalla > 349){ // 3.5 segundos pasaron
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <acc_setHora+0x83c>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8003140:	d307      	bcc.n	8003152 <acc_setHora+0x7d2>
				menuActual = &menu[MENU_SELECCION];
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <acc_setHora+0x85c>)
 8003144:	4a26      	ldr	r2, [pc, #152]	; (80031e0 <acc_setHora+0x860>)
 8003146:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <acc_setHora+0x85c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4798      	blx	r3
				break;
 8003150:	e024      	b.n	800319c <acc_setHora+0x81c>
			} //fin if timeOut...

			if (getStatBoton(IN_BACK) == FALL){
 8003152:	2002      	movs	r0, #2
 8003154:	f7fd fcce 	bl	8000af4 <getStatBoton>
 8003158:	4603      	mov	r3, r0
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11b      	bne.n	8003196 <acc_setHora+0x816>
				menuActual = &menu[MENU_SELECCION];
 800315e:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <acc_setHora+0x85c>)
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <acc_setHora+0x860>)
 8003162:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <acc_setHora+0x85c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4798      	blx	r3
			} //fin if IN_BACK

		break;
 800316c:	e013      	b.n	8003196 <acc_setHora+0x816>
		case PANT_ERROR_H_F:
			if (timeOut_pantalla > 249){ // 2.5 segundos pasaron
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <acc_setHora+0x83c>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	2bf9      	cmp	r3, #249	; 0xf9
 8003174:	d902      	bls.n	800317c <acc_setHora+0x7fc>
				init_setHora();
 8003176:	f7fe fe79 	bl	8001e6c <init_setHora>
				break;
 800317a:	e00f      	b.n	800319c <acc_setHora+0x81c>
			} //fin if timeOut...

			if (getStatBoton(IN_BACK) == FALL){
 800317c:	2002      	movs	r0, #2
 800317e:	f7fd fcb9 	bl	8000af4 <getStatBoton>
 8003182:	4603      	mov	r3, r0
 8003184:	2b02      	cmp	r3, #2
 8003186:	d108      	bne.n	800319a <acc_setHora+0x81a>
				init_setHora();
 8003188:	f7fe fe70 	bl	8001e6c <init_setHora>
				break;
 800318c:	e006      	b.n	800319c <acc_setHora+0x81c>
			} //fin if IN_BACK

		break;
		default:
		break;
 800318e:	bf00      	nop
 8003190:	e004      	b.n	800319c <acc_setHora+0x81c>
		break;
 8003192:	bf00      	nop
 8003194:	e002      	b.n	800319c <acc_setHora+0x81c>
		break;
 8003196:	bf00      	nop
 8003198:	e000      	b.n	800319c <acc_setHora+0x81c>
		break;
 800319a:	bf00      	nop
	} //fin switch pant_horaFecha

} //acc_setHora()
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200002a4 	.word	0x200002a4
 80031a4:	2000019c 	.word	0x2000019c
 80031a8:	08009370 	.word	0x08009370
 80031ac:	20000164 	.word	0x20000164
 80031b0:	51eb851f 	.word	0x51eb851f
 80031b4:	20000040 	.word	0x20000040
 80031b8:	08009378 	.word	0x08009378
 80031bc:	20000196 	.word	0x20000196
 80031c0:	2000019d 	.word	0x2000019d
 80031c4:	200002a0 	.word	0x200002a0
 80031c8:	08009388 	.word	0x08009388
 80031cc:	0800939c 	.word	0x0800939c
 80031d0:	200002b8 	.word	0x200002b8
 80031d4:	200002cc 	.word	0x200002cc
 80031d8:	080093b4 	.word	0x080093b4
 80031dc:	2000029c 	.word	0x2000029c
 80031e0:	20000060 	.word	0x20000060

080031e4 <acc_debug>:


void acc_debug (void){
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af04      	add	r7, sp, #16

	switch (pantDebug){
 80031ea:	4baf      	ldr	r3, [pc, #700]	; (80034a8 <acc_debug+0x2c4>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	f200 824b 	bhi.w	800368a <acc_debug+0x4a6>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <acc_debug+0x18>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	08003211 	.word	0x08003211
 8003200:	08003659 	.word	0x08003659
 8003204:	08003679 	.word	0x08003679
 8003208:	080035dd 	.word	0x080035dd
 800320c:	08003639 	.word	0x08003639
		case PANT_DEBUG:
			if (getStatBoton(IN_BACK) == FALL){
 8003210:	2002      	movs	r0, #2
 8003212:	f7fd fc6f 	bl	8000af4 <getStatBoton>
 8003216:	4603      	mov	r3, r0
 8003218:	2b02      	cmp	r3, #2
 800321a:	d106      	bne.n	800322a <acc_debug+0x46>
				menuActual = &menu[MENU_INFO];
 800321c:	4ba3      	ldr	r3, [pc, #652]	; (80034ac <acc_debug+0x2c8>)
 800321e:	4aa4      	ldr	r2, [pc, #656]	; (80034b0 <acc_debug+0x2cc>)
 8003220:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8003222:	4ba2      	ldr	r3, [pc, #648]	; (80034ac <acc_debug+0x2c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4798      	blx	r3
			} //fin if IN_BACK

			if (getStatBoton(IN_LEFT) == FALL){
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd fc62 	bl	8000af4 <getStatBoton>
 8003230:	4603      	mov	r3, r0
 8003232:	2b02      	cmp	r3, #2
 8003234:	d14f      	bne.n	80032d6 <acc_debug+0xf2>
				cursor_debug--;
 8003236:	4b9f      	ldr	r3, [pc, #636]	; (80034b4 <acc_debug+0x2d0>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	3b01      	subs	r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b9d      	ldr	r3, [pc, #628]	; (80034b4 <acc_debug+0x2d0>)
 8003240:	701a      	strb	r2, [r3, #0]
				if (cursor_debug > 3){
 8003242:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <acc_debug+0x2d0>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d902      	bls.n	8003250 <acc_debug+0x6c>
					cursor_debug = 3;
 800324a:	4b9a      	ldr	r3, [pc, #616]	; (80034b4 <acc_debug+0x2d0>)
 800324c:	2203      	movs	r2, #3
 800324e:	701a      	strb	r2, [r3, #0]
				}
				lcd_put_cur(2, 2);
 8003250:	2102      	movs	r1, #2
 8003252:	2002      	movs	r0, #2
 8003254:	f7fe f9e6 	bl	8001624 <lcd_put_cur>
				switch (cursor_debug) {
 8003258:	4b96      	ldr	r3, [pc, #600]	; (80034b4 <acc_debug+0x2d0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d83c      	bhi.n	80032da <acc_debug+0xf6>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <acc_debug+0x84>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	080032bf 	.word	0x080032bf
 8003270:	080032c7 	.word	0x080032c7
 8003274:	080032cf 	.word	0x080032cf
					case 0:
						validaLectura = HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &cuentaResets, 1, 100);
 8003278:	2364      	movs	r3, #100	; 0x64
 800327a:	9302      	str	r3, [sp, #8]
 800327c:	2301      	movs	r3, #1
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <acc_debug+0x2d4>)
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	2310      	movs	r3, #16
 8003286:	2203      	movs	r2, #3
 8003288:	21a0      	movs	r1, #160	; 0xa0
 800328a:	488c      	ldr	r0, [pc, #560]	; (80034bc <acc_debug+0x2d8>)
 800328c:	f002 f97e 	bl	800558c <HAL_I2C_Mem_Read>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	4b8a      	ldr	r3, [pc, #552]	; (80034c0 <acc_debug+0x2dc>)
 8003296:	701a      	strb	r2, [r3, #0]
						if (validaLectura != HAL_OK){
 8003298:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <acc_debug+0x2dc>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <acc_debug+0xc4>
							lcd_send_string("  LOG RESET --  ");
 80032a0:	4888      	ldr	r0, [pc, #544]	; (80034c4 <acc_debug+0x2e0>)
 80032a2:	f7fe fa47 	bl	8001734 <lcd_send_string>
						}else{
							sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
							lcd_send_string(texto);
						}
					break;
 80032a6:	e019      	b.n	80032dc <acc_debug+0xf8>
							sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
 80032a8:	4b83      	ldr	r3, [pc, #524]	; (80034b8 <acc_debug+0x2d4>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	4986      	ldr	r1, [pc, #536]	; (80034c8 <acc_debug+0x2e4>)
 80032b0:	4886      	ldr	r0, [pc, #536]	; (80034cc <acc_debug+0x2e8>)
 80032b2:	f005 faf9 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 80032b6:	4885      	ldr	r0, [pc, #532]	; (80034cc <acc_debug+0x2e8>)
 80032b8:	f7fe fa3c 	bl	8001734 <lcd_send_string>
					break;
 80032bc:	e00e      	b.n	80032dc <acc_debug+0xf8>
					case 1:
						lcd_send_string("  CLEAR RESETS  ");
 80032be:	4884      	ldr	r0, [pc, #528]	; (80034d0 <acc_debug+0x2ec>)
 80032c0:	f7fe fa38 	bl	8001734 <lcd_send_string>
					break;
 80032c4:	e00a      	b.n	80032dc <acc_debug+0xf8>
					case 2:
						lcd_send_string("  REG HORA OFF  ");
 80032c6:	4883      	ldr	r0, [pc, #524]	; (80034d4 <acc_debug+0x2f0>)
 80032c8:	f7fe fa34 	bl	8001734 <lcd_send_string>
					break;
 80032cc:	e006      	b.n	80032dc <acc_debug+0xf8>
					case 3:
						lcd_send_string("TIEMPO ENCENDIDO");
 80032ce:	4882      	ldr	r0, [pc, #520]	; (80034d8 <acc_debug+0x2f4>)
 80032d0:	f7fe fa30 	bl	8001734 <lcd_send_string>
					break;
 80032d4:	e002      	b.n	80032dc <acc_debug+0xf8>
					default:
					break;
				} //fin switch modoLuz
			} //fin if LEFT
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <acc_debug+0xf8>
					break;
 80032da:	bf00      	nop

			if (getStatBoton(IN_RIGHT) == FALL){
 80032dc:	2001      	movs	r0, #1
 80032de:	f7fd fc09 	bl	8000af4 <getStatBoton>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d14e      	bne.n	8003386 <acc_debug+0x1a2>
				cursor_debug++;
 80032e8:	4b72      	ldr	r3, [pc, #456]	; (80034b4 <acc_debug+0x2d0>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <acc_debug+0x2d0>)
 80032f2:	701a      	strb	r2, [r3, #0]
				if (cursor_debug > 3){
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <acc_debug+0x2d0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d902      	bls.n	8003302 <acc_debug+0x11e>
					cursor_debug = 0;
 80032fc:	4b6d      	ldr	r3, [pc, #436]	; (80034b4 <acc_debug+0x2d0>)
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]
				}
				lcd_put_cur(2, 2);
 8003302:	2102      	movs	r1, #2
 8003304:	2002      	movs	r0, #2
 8003306:	f7fe f98d 	bl	8001624 <lcd_put_cur>
				switch (cursor_debug) {
 800330a:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <acc_debug+0x2d0>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b03      	cmp	r3, #3
 8003310:	d83b      	bhi.n	800338a <acc_debug+0x1a6>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <acc_debug+0x134>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003329 	.word	0x08003329
 800331c:	0800336f 	.word	0x0800336f
 8003320:	08003377 	.word	0x08003377
 8003324:	0800337f 	.word	0x0800337f
					case 0:
						validaLectura = HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &cuentaResets, 1, 100);
 8003328:	2364      	movs	r3, #100	; 0x64
 800332a:	9302      	str	r3, [sp, #8]
 800332c:	2301      	movs	r3, #1
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <acc_debug+0x2d4>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2310      	movs	r3, #16
 8003336:	2203      	movs	r2, #3
 8003338:	21a0      	movs	r1, #160	; 0xa0
 800333a:	4860      	ldr	r0, [pc, #384]	; (80034bc <acc_debug+0x2d8>)
 800333c:	f002 f926 	bl	800558c <HAL_I2C_Mem_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	461a      	mov	r2, r3
 8003344:	4b5e      	ldr	r3, [pc, #376]	; (80034c0 <acc_debug+0x2dc>)
 8003346:	701a      	strb	r2, [r3, #0]
						if (validaLectura != HAL_OK){
 8003348:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <acc_debug+0x2dc>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <acc_debug+0x174>
							lcd_send_string("  LOG RESET --  ");
 8003350:	485c      	ldr	r0, [pc, #368]	; (80034c4 <acc_debug+0x2e0>)
 8003352:	f7fe f9ef 	bl	8001734 <lcd_send_string>
						}else{
							sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
							lcd_send_string(texto);
						}
					break;
 8003356:	e019      	b.n	800338c <acc_debug+0x1a8>
							sprintf(texto, "  LOG RESET %02d  ", cuentaResets);
 8003358:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <acc_debug+0x2d4>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	495a      	ldr	r1, [pc, #360]	; (80034c8 <acc_debug+0x2e4>)
 8003360:	485a      	ldr	r0, [pc, #360]	; (80034cc <acc_debug+0x2e8>)
 8003362:	f005 faa1 	bl	80088a8 <siprintf>
							lcd_send_string(texto);
 8003366:	4859      	ldr	r0, [pc, #356]	; (80034cc <acc_debug+0x2e8>)
 8003368:	f7fe f9e4 	bl	8001734 <lcd_send_string>
					break;
 800336c:	e00e      	b.n	800338c <acc_debug+0x1a8>
					case 1:
						lcd_send_string("  CLEAR RESETS  ");
 800336e:	4858      	ldr	r0, [pc, #352]	; (80034d0 <acc_debug+0x2ec>)
 8003370:	f7fe f9e0 	bl	8001734 <lcd_send_string>
					break;
 8003374:	e00a      	b.n	800338c <acc_debug+0x1a8>
					case 2:
						lcd_send_string("  REG HORA OFF  ");
 8003376:	4857      	ldr	r0, [pc, #348]	; (80034d4 <acc_debug+0x2f0>)
 8003378:	f7fe f9dc 	bl	8001734 <lcd_send_string>
					break;
 800337c:	e006      	b.n	800338c <acc_debug+0x1a8>
					case 3:
						lcd_send_string("TIEMPO ENCENDIDO");
 800337e:	4856      	ldr	r0, [pc, #344]	; (80034d8 <acc_debug+0x2f4>)
 8003380:	f7fe f9d8 	bl	8001734 <lcd_send_string>
					break;
 8003384:	e002      	b.n	800338c <acc_debug+0x1a8>
					default:
					break;
				} //fin switch modoLuz
			} //fin if RIGHT
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <acc_debug+0x1a8>
					break;
 800338a:	bf00      	nop

			if (getStatBoton(IN_OK) == FALL){
 800338c:	2003      	movs	r0, #3
 800338e:	f7fd fbb1 	bl	8000af4 <getStatBoton>
 8003392:	4603      	mov	r3, r0
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 811f 	bne.w	80035d8 <acc_debug+0x3f4>
				switch (cursor_debug){
 800339a:	4b46      	ldr	r3, [pc, #280]	; (80034b4 <acc_debug+0x2d0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d019      	beq.n	80033d6 <acc_debug+0x1f2>
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	f000 80a6 	beq.w	80034f4 <acc_debug+0x310>
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d000      	beq.n	80033ae <acc_debug+0x1ca>
						sprintf(texto, "OFF %02d%02d%02d %02d:%02d", muestraFechaOff.Date, muestraFechaOff.Month, muestraFechaOff.Year, muestraHoraOff.Hours, muestraHoraOff.Minutes);
						lcd_send_string(texto);

						pantDebug = PANT_TIEMPO_VIVO;
					default:
					break;
 80033ac:	e115      	b.n	80035da <acc_debug+0x3f6>
						lcd_clear();
 80033ae:	f7fe f923 	bl	80015f8 <lcd_clear>
						lcd_put_cur(0, 0);
 80033b2:	2100      	movs	r1, #0
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fe f935 	bl	8001624 <lcd_put_cur>
						lcd_send_string("BORRAR LOG RESET?");
 80033ba:	4848      	ldr	r0, [pc, #288]	; (80034dc <acc_debug+0x2f8>)
 80033bc:	f7fe f9ba 	bl	8001734 <lcd_send_string>
						lcd_put_cur(0, 2);
 80033c0:	2102      	movs	r1, #2
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fe f92e 	bl	8001624 <lcd_put_cur>
						lcd_send_string("ATRAS:NO  ACEPTAR:SI");
 80033c8:	4845      	ldr	r0, [pc, #276]	; (80034e0 <acc_debug+0x2fc>)
 80033ca:	f7fe f9b3 	bl	8001734 <lcd_send_string>
						pantDebug = PANT_BORRAR_RESETS;
 80033ce:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <acc_debug+0x2c4>)
 80033d0:	2203      	movs	r2, #3
 80033d2:	701a      	strb	r2, [r3, #0]
					break;
 80033d4:	e101      	b.n	80035da <acc_debug+0x3f6>
						start_regHora();
 80033d6:	f7fd ff4d 	bl	8001274 <start_regHora>
						lcd_clear();
 80033da:	f7fe f90d 	bl	80015f8 <lcd_clear>
						lcd_put_cur(0, 1);
 80033de:	2101      	movs	r1, #1
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fe f91f 	bl	8001624 <lcd_put_cur>
						lcd_send_string("INICIA REG. HORA OFF");
 80033e6:	483f      	ldr	r0, [pc, #252]	; (80034e4 <acc_debug+0x300>)
 80033e8:	f7fe f9a4 	bl	8001734 <lcd_send_string>
						update_horaFecha();
 80033ec:	f7fd ffc2 	bl	8001374 <update_horaFecha>
						muestraHora = get_hora();
 80033f0:	f7fd ffd4 	bl	800139c <get_hora>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <acc_debug+0x304>)
 80033f8:	4611      	mov	r1, r2
 80033fa:	7019      	strb	r1, [r3, #0]
 80033fc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003400:	7059      	strb	r1, [r3, #1]
 8003402:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8003406:	709a      	strb	r2, [r3, #2]
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_HORA_ON, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraHora, 3, 100);
 8003408:	2364      	movs	r3, #100	; 0x64
 800340a:	9302      	str	r3, [sp, #8]
 800340c:	2303      	movs	r3, #3
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <acc_debug+0x304>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2310      	movs	r3, #16
 8003416:	2215      	movs	r2, #21
 8003418:	21a0      	movs	r1, #160	; 0xa0
 800341a:	4828      	ldr	r0, [pc, #160]	; (80034bc <acc_debug+0x2d8>)
 800341c:	f001 ffbc 	bl	8005398 <HAL_I2C_Mem_Write>
						HAL_Delay(10);
 8003420:	200a      	movs	r0, #10
 8003422:	f000 fd1f 	bl	8003e64 <HAL_Delay>
						muestraFecha = get_fecha();
 8003426:	f7fd ffd3 	bl	80013d0 <get_fecha>
 800342a:	4602      	mov	r2, r0
 800342c:	4b2f      	ldr	r3, [pc, #188]	; (80034ec <acc_debug+0x308>)
 800342e:	4611      	mov	r1, r2
 8003430:	7019      	strb	r1, [r3, #0]
 8003432:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003436:	7059      	strb	r1, [r3, #1]
 8003438:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800343c:	7099      	strb	r1, [r3, #2]
 800343e:	f3c2 6207 	ubfx	r2, r2, #24, #8
 8003442:	70da      	strb	r2, [r3, #3]
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_FECHA_ON, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraFecha, 4, 100);
 8003444:	2364      	movs	r3, #100	; 0x64
 8003446:	9302      	str	r3, [sp, #8]
 8003448:	2304      	movs	r3, #4
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <acc_debug+0x308>)
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2310      	movs	r3, #16
 8003452:	2218      	movs	r2, #24
 8003454:	21a0      	movs	r1, #160	; 0xa0
 8003456:	4819      	ldr	r0, [pc, #100]	; (80034bc <acc_debug+0x2d8>)
 8003458:	f001 ff9e 	bl	8005398 <HAL_I2C_Mem_Write>
						HAL_Delay(10);
 800345c:	200a      	movs	r0, #10
 800345e:	f000 fd01 	bl	8003e64 <HAL_Delay>
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_HORA_OFF, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraHora, 3, 100);
 8003462:	2364      	movs	r3, #100	; 0x64
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	2303      	movs	r3, #3
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <acc_debug+0x304>)
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2310      	movs	r3, #16
 8003470:	220e      	movs	r2, #14
 8003472:	21a0      	movs	r1, #160	; 0xa0
 8003474:	4811      	ldr	r0, [pc, #68]	; (80034bc <acc_debug+0x2d8>)
 8003476:	f001 ff8f 	bl	8005398 <HAL_I2C_Mem_Write>
						HAL_Delay(10);
 800347a:	200a      	movs	r0, #10
 800347c:	f000 fcf2 	bl	8003e64 <HAL_Delay>
						HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_FECHA_OFF, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraFecha, 4, 100);
 8003480:	2364      	movs	r3, #100	; 0x64
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	2304      	movs	r3, #4
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <acc_debug+0x308>)
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2310      	movs	r3, #16
 800348e:	2211      	movs	r2, #17
 8003490:	21a0      	movs	r1, #160	; 0xa0
 8003492:	480a      	ldr	r0, [pc, #40]	; (80034bc <acc_debug+0x2d8>)
 8003494:	f001 ff80 	bl	8005398 <HAL_I2C_Mem_Write>
						pantDebug = PANT_REG_OFF;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <acc_debug+0x2c4>)
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
						timeOut_pantalla = 0;
 800349e:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <acc_debug+0x30c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	801a      	strh	r2, [r3, #0]
					break;
 80034a4:	e099      	b.n	80035da <acc_debug+0x3f6>
 80034a6:	bf00      	nop
 80034a8:	200001a0 	.word	0x200001a0
 80034ac:	2000029c 	.word	0x2000029c
 80034b0:	20000050 	.word	0x20000050
 80034b4:	2000019e 	.word	0x2000019e
 80034b8:	2000019f 	.word	0x2000019f
 80034bc:	20000234 	.word	0x20000234
 80034c0:	200002b5 	.word	0x200002b5
 80034c4:	08009254 	.word	0x08009254
 80034c8:	08009268 	.word	0x08009268
 80034cc:	20000164 	.word	0x20000164
 80034d0:	0800927c 	.word	0x0800927c
 80034d4:	08009290 	.word	0x08009290
 80034d8:	080092a4 	.word	0x080092a4
 80034dc:	080093c4 	.word	0x080093c4
 80034e0:	0800939c 	.word	0x0800939c
 80034e4:	080093d8 	.word	0x080093d8
 80034e8:	200002b8 	.word	0x200002b8
 80034ec:	200002a4 	.word	0x200002a4
 80034f0:	20000196 	.word	0x20000196
						HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_HORA_ON, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraHora, 3, 100);
 80034f4:	2364      	movs	r3, #100	; 0x64
 80034f6:	9302      	str	r3, [sp, #8]
 80034f8:	2303      	movs	r3, #3
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <acc_debug+0x4c0>)
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2310      	movs	r3, #16
 8003502:	2215      	movs	r2, #21
 8003504:	21a0      	movs	r1, #160	; 0xa0
 8003506:	4868      	ldr	r0, [pc, #416]	; (80036a8 <acc_debug+0x4c4>)
 8003508:	f002 f840 	bl	800558c <HAL_I2C_Mem_Read>
						HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_FECHA_ON, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraFecha, 4, 100);
 800350c:	2364      	movs	r3, #100	; 0x64
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	2304      	movs	r3, #4
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	4b65      	ldr	r3, [pc, #404]	; (80036ac <acc_debug+0x4c8>)
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2310      	movs	r3, #16
 800351a:	2218      	movs	r2, #24
 800351c:	21a0      	movs	r1, #160	; 0xa0
 800351e:	4862      	ldr	r0, [pc, #392]	; (80036a8 <acc_debug+0x4c4>)
 8003520:	f002 f834 	bl	800558c <HAL_I2C_Mem_Read>
						HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_HORA_OFF, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraHoraOff, 3, 100);
 8003524:	2364      	movs	r3, #100	; 0x64
 8003526:	9302      	str	r3, [sp, #8]
 8003528:	2303      	movs	r3, #3
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <acc_debug+0x4cc>)
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2310      	movs	r3, #16
 8003532:	220e      	movs	r2, #14
 8003534:	21a0      	movs	r1, #160	; 0xa0
 8003536:	485c      	ldr	r0, [pc, #368]	; (80036a8 <acc_debug+0x4c4>)
 8003538:	f002 f828 	bl	800558c <HAL_I2C_Mem_Read>
						HAL_I2C_Mem_Read(&hi2c1, 0x50<<1, OFFSET_FECHA_OFF, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&muestraFechaOff, 4, 100);
 800353c:	2364      	movs	r3, #100	; 0x64
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	2304      	movs	r3, #4
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <acc_debug+0x4d0>)
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2310      	movs	r3, #16
 800354a:	2211      	movs	r2, #17
 800354c:	21a0      	movs	r1, #160	; 0xa0
 800354e:	4856      	ldr	r0, [pc, #344]	; (80036a8 <acc_debug+0x4c4>)
 8003550:	f002 f81c 	bl	800558c <HAL_I2C_Mem_Read>
						lcd_clear();
 8003554:	f7fe f850 	bl	80015f8 <lcd_clear>
						lcd_put_cur(2, 1);
 8003558:	2101      	movs	r1, #1
 800355a:	2002      	movs	r0, #2
 800355c:	f7fe f862 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "ON  %02d%02d%02d %02d:%02d", muestraFecha.Date, muestraFecha.Month, muestraFecha.Year, muestraHora.Hours, muestraHora.Minutes);
 8003560:	4b52      	ldr	r3, [pc, #328]	; (80036ac <acc_debug+0x4c8>)
 8003562:	789b      	ldrb	r3, [r3, #2]
 8003564:	4618      	mov	r0, r3
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <acc_debug+0x4c8>)
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	461c      	mov	r4, r3
 800356c:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <acc_debug+0x4c8>)
 800356e:	78db      	ldrb	r3, [r3, #3]
 8003570:	461a      	mov	r2, r3
 8003572:	4b4c      	ldr	r3, [pc, #304]	; (80036a4 <acc_debug+0x4c0>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <acc_debug+0x4c0>)
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	9101      	str	r1, [sp, #4]
 8003580:	9200      	str	r2, [sp, #0]
 8003582:	4623      	mov	r3, r4
 8003584:	4602      	mov	r2, r0
 8003586:	494c      	ldr	r1, [pc, #304]	; (80036b8 <acc_debug+0x4d4>)
 8003588:	484c      	ldr	r0, [pc, #304]	; (80036bc <acc_debug+0x4d8>)
 800358a:	f005 f98d 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 800358e:	484b      	ldr	r0, [pc, #300]	; (80036bc <acc_debug+0x4d8>)
 8003590:	f7fe f8d0 	bl	8001734 <lcd_send_string>
						lcd_put_cur(2, 2);
 8003594:	2102      	movs	r1, #2
 8003596:	2002      	movs	r0, #2
 8003598:	f7fe f844 	bl	8001624 <lcd_put_cur>
						sprintf(texto, "OFF %02d%02d%02d %02d:%02d", muestraFechaOff.Date, muestraFechaOff.Month, muestraFechaOff.Year, muestraHoraOff.Hours, muestraHoraOff.Minutes);
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <acc_debug+0x4d0>)
 800359e:	789b      	ldrb	r3, [r3, #2]
 80035a0:	4618      	mov	r0, r3
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <acc_debug+0x4d0>)
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	461c      	mov	r4, r3
 80035a8:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <acc_debug+0x4d0>)
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <acc_debug+0x4cc>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4619      	mov	r1, r3
 80035b4:	4b3e      	ldr	r3, [pc, #248]	; (80036b0 <acc_debug+0x4cc>)
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	9302      	str	r3, [sp, #8]
 80035ba:	9101      	str	r1, [sp, #4]
 80035bc:	9200      	str	r2, [sp, #0]
 80035be:	4623      	mov	r3, r4
 80035c0:	4602      	mov	r2, r0
 80035c2:	493f      	ldr	r1, [pc, #252]	; (80036c0 <acc_debug+0x4dc>)
 80035c4:	483d      	ldr	r0, [pc, #244]	; (80036bc <acc_debug+0x4d8>)
 80035c6:	f005 f96f 	bl	80088a8 <siprintf>
						lcd_send_string(texto);
 80035ca:	483c      	ldr	r0, [pc, #240]	; (80036bc <acc_debug+0x4d8>)
 80035cc:	f7fe f8b2 	bl	8001734 <lcd_send_string>
						pantDebug = PANT_TIEMPO_VIVO;
 80035d0:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <acc_debug+0x4e0>)
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
					break;
 80035d6:	e000      	b.n	80035da <acc_debug+0x3f6>
				} //fin switch cursor_debug
			} //fin if OK
 80035d8:	bf00      	nop
		break;
 80035da:	e05f      	b.n	800369c <acc_debug+0x4b8>
		case PANT_BORRAR_RESETS:
			if (getStatBoton(IN_BACK) == FALL){
 80035dc:	2002      	movs	r0, #2
 80035de:	f7fd fa89 	bl	8000af4 <getStatBoton>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d102      	bne.n	80035ee <acc_debug+0x40a>
				init_debug();
 80035e8:	f7fe fcbe 	bl	8001f68 <init_debug>
				break;
 80035ec:	e056      	b.n	800369c <acc_debug+0x4b8>
			} //fin if BACK

			if (getStatBoton(IN_OK) == FALL){
 80035ee:	2003      	movs	r0, #3
 80035f0:	f7fd fa80 	bl	8000af4 <getStatBoton>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d149      	bne.n	800368e <acc_debug+0x4aa>
				lcd_clear();
 80035fa:	f7fd fffd 	bl	80015f8 <lcd_clear>
				lcd_put_cur(1, 1);
 80035fe:	2101      	movs	r1, #1
 8003600:	2001      	movs	r0, #1
 8003602:	f7fe f80f 	bl	8001624 <lcd_put_cur>
				lcd_send_string("LOG RESET BORRADO");
 8003606:	4830      	ldr	r0, [pc, #192]	; (80036c8 <acc_debug+0x4e4>)
 8003608:	f7fe f894 	bl	8001734 <lcd_send_string>
				cuentaResets = 0;
 800360c:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <acc_debug+0x4e8>)
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, 0x50<<1, OFFSET_RESETS, I2C_MEMADD_SIZE_16BIT, &cuentaResets, 1, 100);
 8003612:	2364      	movs	r3, #100	; 0x64
 8003614:	9302      	str	r3, [sp, #8]
 8003616:	2301      	movs	r3, #1
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <acc_debug+0x4e8>)
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2310      	movs	r3, #16
 8003620:	2203      	movs	r2, #3
 8003622:	21a0      	movs	r1, #160	; 0xa0
 8003624:	4820      	ldr	r0, [pc, #128]	; (80036a8 <acc_debug+0x4c4>)
 8003626:	f001 feb7 	bl	8005398 <HAL_I2C_Mem_Write>
				pantDebug = PANT_RESET_BORRADOS;
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <acc_debug+0x4e0>)
 800362c:	2204      	movs	r2, #4
 800362e:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <acc_debug+0x4ec>)
 8003632:	2200      	movs	r2, #0
 8003634:	801a      	strh	r2, [r3, #0]
				break;
 8003636:	e031      	b.n	800369c <acc_debug+0x4b8>
			} //fin if OK
		break;
		case PANT_RESET_BORRADOS:
			if (getStatBoton(IN_BACK) == FALL){
 8003638:	2002      	movs	r0, #2
 800363a:	f7fd fa5b 	bl	8000af4 <getStatBoton>
 800363e:	4603      	mov	r3, r0
 8003640:	2b02      	cmp	r3, #2
 8003642:	d102      	bne.n	800364a <acc_debug+0x466>
				init_debug();
 8003644:	f7fe fc90 	bl	8001f68 <init_debug>
				break;
 8003648:	e028      	b.n	800369c <acc_debug+0x4b8>
			} //fin if BACK

			if (timeOut_pantalla > 249){ // 2.5 segundos pasaron
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <acc_debug+0x4ec>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	2bf9      	cmp	r3, #249	; 0xf9
 8003650:	d91f      	bls.n	8003692 <acc_debug+0x4ae>
				init_debug();
 8003652:	f7fe fc89 	bl	8001f68 <init_debug>
				break;
 8003656:	e021      	b.n	800369c <acc_debug+0x4b8>
			} //fin if timeOut_pantalla
		break;
		case PANT_REG_OFF:
			if (getStatBoton(IN_BACK) == FALL){
 8003658:	2002      	movs	r0, #2
 800365a:	f7fd fa4b 	bl	8000af4 <getStatBoton>
 800365e:	4603      	mov	r3, r0
 8003660:	2b02      	cmp	r3, #2
 8003662:	d102      	bne.n	800366a <acc_debug+0x486>
				init_debug();
 8003664:	f7fe fc80 	bl	8001f68 <init_debug>
				break;
 8003668:	e018      	b.n	800369c <acc_debug+0x4b8>
			} //fin if BACK

			if (timeOut_pantalla > 249){ // 2.5 segundos pasaron
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <acc_debug+0x4ec>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	2bf9      	cmp	r3, #249	; 0xf9
 8003670:	d911      	bls.n	8003696 <acc_debug+0x4b2>
				init_debug();
 8003672:	f7fe fc79 	bl	8001f68 <init_debug>
				break;
 8003676:	e011      	b.n	800369c <acc_debug+0x4b8>
			} //fin if timeOut_pantalla
		break;
		case PANT_TIEMPO_VIVO:
			if (getStatBoton(IN_BACK) == FALL){
 8003678:	2002      	movs	r0, #2
 800367a:	f7fd fa3b 	bl	8000af4 <getStatBoton>
 800367e:	4603      	mov	r3, r0
 8003680:	2b02      	cmp	r3, #2
 8003682:	d10a      	bne.n	800369a <acc_debug+0x4b6>
				init_debug();
 8003684:	f7fe fc70 	bl	8001f68 <init_debug>
				break;
 8003688:	e008      	b.n	800369c <acc_debug+0x4b8>
			} //fin if BACK
		break;
		default:
		break;
 800368a:	bf00      	nop
 800368c:	e006      	b.n	800369c <acc_debug+0x4b8>
		break;
 800368e:	bf00      	nop
 8003690:	e004      	b.n	800369c <acc_debug+0x4b8>
		break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <acc_debug+0x4b8>
		break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <acc_debug+0x4b8>
		break;
 800369a:	bf00      	nop
	} //fin switch pantDebug

} //fin acc_debug()
 800369c:	bf00      	nop
 800369e:	3704      	adds	r7, #4
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}
 80036a4:	200002b8 	.word	0x200002b8
 80036a8:	20000234 	.word	0x20000234
 80036ac:	200002a4 	.word	0x200002a4
 80036b0:	200002ac 	.word	0x200002ac
 80036b4:	200002bc 	.word	0x200002bc
 80036b8:	080093f0 	.word	0x080093f0
 80036bc:	20000164 	.word	0x20000164
 80036c0:	0800940c 	.word	0x0800940c
 80036c4:	200001a0 	.word	0x200001a0
 80036c8:	08009428 	.word	0x08009428
 80036cc:	2000019f 	.word	0x2000019f
 80036d0:	20000196 	.word	0x20000196

080036d4 <refresh_infoDHT>:


void refresh_infoDHT (void){
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	flag_infoDHT = 1;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <refresh_infoDHT+0x14>)
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoDHT()
 80036de:	bf00      	nop
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000198 	.word	0x20000198

080036ec <refresh_infoModo>:


void refresh_infoModo (void){
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
	flag_infoModo = 1;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <refresh_infoModo+0x14>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoModo
 80036f6:	bf00      	nop
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000199 	.word	0x20000199

08003704 <calculaDiaSemana>:


uint8_t calculaDiaSemana (int year, int month, int day) {
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
    if (month < 3) {
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b02      	cmp	r3, #2
 8003714:	dc05      	bgt.n	8003722 <calculaDiaSemana+0x1e>
        month += 12;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	330c      	adds	r3, #12
 800371a:	60bb      	str	r3, [r7, #8]
        year--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
    }

    int k = year % 100;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a2d      	ldr	r2, [pc, #180]	; (80037dc <calculaDiaSemana+0xd8>)
 8003726:	fb82 1203 	smull	r1, r2, r2, r3
 800372a:	1151      	asrs	r1, r2, #5
 800372c:	17da      	asrs	r2, r3, #31
 800372e:	1a8a      	subs	r2, r1, r2
 8003730:	2164      	movs	r1, #100	; 0x64
 8003732:	fb01 f202 	mul.w	r2, r1, r2
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
    int j = year / 100;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <calculaDiaSemana+0xd8>)
 800373e:	fb82 1203 	smull	r1, r2, r2, r3
 8003742:	1152      	asrs	r2, r2, #5
 8003744:	17db      	asrs	r3, r3, #31
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]

    int h = (day + 13 * (month + 1) / 5 + k + k / 4 + j / 4 + 5 * j) % 7;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <calculaDiaSemana+0xdc>)
 800375a:	fb82 1203 	smull	r1, r2, r2, r3
 800375e:	1052      	asrs	r2, r2, #1
 8003760:	17db      	asrs	r3, r3, #31
 8003762:	1ad2      	subs	r2, r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	441a      	add	r2, r3
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	441a      	add	r2, r3
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da00      	bge.n	8003774 <calculaDiaSemana+0x70>
 8003772:	3303      	adds	r3, #3
 8003774:	109b      	asrs	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	da00      	bge.n	8003780 <calculaDiaSemana+0x7c>
 800377e:	3303      	adds	r3, #3
 8003780:	109b      	asrs	r3, r3, #2
 8003782:	18d1      	adds	r1, r2, r3
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	18ca      	adds	r2, r1, r3
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <calculaDiaSemana+0xe0>)
 8003790:	fb83 1302 	smull	r1, r3, r3, r2
 8003794:	4413      	add	r3, r2
 8003796:	1099      	asrs	r1, r3, #2
 8003798:	17d3      	asrs	r3, r2, #31
 800379a:	1ac9      	subs	r1, r1, r3
 800379c:	460b      	mov	r3, r1
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	1a5b      	subs	r3, r3, r1
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	613b      	str	r3, [r7, #16]

    // Ajustamos el resultado para que el domingo sea el día 7.
	uint8_t d = (h + 6) % 7;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1d9a      	adds	r2, r3, #6
 80037aa:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <calculaDiaSemana+0xe0>)
 80037ac:	fb83 1302 	smull	r1, r3, r3, r2
 80037b0:	4413      	add	r3, r2
 80037b2:	1099      	asrs	r1, r3, #2
 80037b4:	17d3      	asrs	r3, r2, #31
 80037b6:	1ac9      	subs	r1, r1, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	1ad1      	subs	r1, r2, r3
 80037c0:	460b      	mov	r3, r1
 80037c2:	77fb      	strb	r3, [r7, #31]

	if (!d) d = 7;
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <calculaDiaSemana+0xca>
 80037ca:	2307      	movs	r3, #7
 80037cc:	77fb      	strb	r3, [r7, #31]

	return d;
 80037ce:	7ffb      	ldrb	r3, [r7, #31]

} //fin calculoDiaSemana()
 80037d0:	4618      	mov	r0, r3
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	51eb851f 	.word	0x51eb851f
 80037e0:	66666667 	.word	0x66666667
 80037e4:	92492493 	.word	0x92492493

080037e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	2100      	movs	r1, #0
 80037f2:	460a      	mov	r2, r1
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	460a      	mov	r2, r1
 80037f8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80037fa:	2300      	movs	r3, #0
 80037fc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <MX_RTC_Init+0x8c>)
 8003800:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <MX_RTC_Init+0x90>)
 8003802:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <MX_RTC_Init+0x8c>)
 8003806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800380a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <MX_RTC_Init+0x8c>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003812:	4818      	ldr	r0, [pc, #96]	; (8003874 <MX_RTC_Init+0x8c>)
 8003814:	f003 fb26 	bl	8006e64 <HAL_RTC_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800381e:	f7fe f8ef 	bl	8001a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003822:	2300      	movs	r3, #0
 8003824:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003826:	2300      	movs	r3, #0
 8003828:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800382a:	2300      	movs	r3, #0
 800382c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	2201      	movs	r2, #1
 8003832:	4619      	mov	r1, r3
 8003834:	480f      	ldr	r0, [pc, #60]	; (8003874 <MX_RTC_Init+0x8c>)
 8003836:	f003 fbab 	bl	8006f90 <HAL_RTC_SetTime>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8003840:	f7fe f8de 	bl	8001a00 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003844:	2301      	movs	r3, #1
 8003846:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003848:	2301      	movs	r3, #1
 800384a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800384c:	2301      	movs	r3, #1
 800384e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003850:	2300      	movs	r3, #0
 8003852:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003854:	463b      	mov	r3, r7
 8003856:	2201      	movs	r2, #1
 8003858:	4619      	mov	r1, r3
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <MX_RTC_Init+0x8c>)
 800385c:	f003 fd08 	bl	8007270 <HAL_RTC_SetDate>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003866:	f7fe f8cb 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200002cc 	.word	0x200002cc
 8003878:	40002800 	.word	0x40002800

0800387c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <HAL_RTC_MspInit+0x3c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d110      	bne.n	80038b0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800388e:	f002 fd4f 	bl	8006330 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RTC_MspInit+0x40>)
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RTC_MspInit+0x40>)
 8003898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800389c:	61d3      	str	r3, [r2, #28]
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_RTC_MspInit+0x40>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RTC_MspInit+0x44>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40002800 	.word	0x40002800
 80038bc:	40021000 	.word	0x40021000
 80038c0:	4242043c 	.word	0x4242043c

080038c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80038c8:	4b17      	ldr	r3, [pc, #92]	; (8003928 <MX_SPI1_Init+0x64>)
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <MX_SPI1_Init+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ce:	4b16      	ldr	r3, [pc, #88]	; (8003928 <MX_SPI1_Init+0x64>)
 80038d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MX_SPI1_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <MX_SPI1_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <MX_SPI1_Init+0x64>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_SPI1_Init+0x64>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_SPI1_Init+0x64>)
 80038f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_SPI1_Init+0x64>)
 80038f8:	2230      	movs	r2, #48	; 0x30
 80038fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <MX_SPI1_Init+0x64>)
 80038fe:	2200      	movs	r2, #0
 8003900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_SPI1_Init+0x64>)
 8003904:	2200      	movs	r2, #0
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <MX_SPI1_Init+0x64>)
 800390a:	2200      	movs	r2, #0
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_SPI1_Init+0x64>)
 8003910:	220a      	movs	r2, #10
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003914:	4804      	ldr	r0, [pc, #16]	; (8003928 <MX_SPI1_Init+0x64>)
 8003916:	f004 f857 	bl	80079c8 <HAL_SPI_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003920:	f7fe f86e 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200002e0 	.word	0x200002e0
 800392c:	40013000 	.word	0x40013000

08003930 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_SPI_MspInit+0x88>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d12f      	bne.n	80039b0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003950:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 8003956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800395a:	6193      	str	r3, [r2, #24]
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	4a13      	ldr	r2, [pc, #76]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	6193      	str	r3, [r2, #24]
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_SPI_MspInit+0x8c>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003980:	23a0      	movs	r3, #160	; 0xa0
 8003982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003984:	2302      	movs	r3, #2
 8003986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003988:	2303      	movs	r3, #3
 800398a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398c:	f107 0310 	add.w	r3, r7, #16
 8003990:	4619      	mov	r1, r3
 8003992:	480b      	ldr	r0, [pc, #44]	; (80039c0 <HAL_SPI_MspInit+0x90>)
 8003994:	f000 ff22 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003998:	2340      	movs	r3, #64	; 0x40
 800399a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a4:	f107 0310 	add.w	r3, r7, #16
 80039a8:	4619      	mov	r1, r3
 80039aa:	4805      	ldr	r0, [pc, #20]	; (80039c0 <HAL_SPI_MspInit+0x90>)
 80039ac:	f000 ff16 	bl	80047dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039b0:	bf00      	nop
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40013000 	.word	0x40013000
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40010800 	.word	0x40010800

080039c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_MspInit+0x5c>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_MspInit+0x5c>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6193      	str	r3, [r2, #24]
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_MspInit+0x5c>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e2:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <HAL_MspInit+0x5c>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <HAL_MspInit+0x5c>)
 80039e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ec:	61d3      	str	r3, [r2, #28]
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_MspInit+0x5c>)
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_MspInit+0x60>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	4a04      	ldr	r2, [pc, #16]	; (8003a24 <HAL_MspInit+0x60>)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40021000 	.word	0x40021000
 8003a24:	40010000 	.word	0x40010000

08003a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <NMI_Handler+0x4>

08003a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <HardFault_Handler+0x4>

08003a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <MemManage_Handler+0x4>

08003a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3e:	e7fe      	b.n	8003a3e <BusFault_Handler+0x4>

08003a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <UsageFault_Handler+0x4>

08003a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a52:	b480      	push	{r7}
 8003a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a6e:	f000 f9dd 	bl	8003e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <TIM2_IRQHandler+0x10>)
 8003a7e:	f004 f852 	bl	8007b26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000338 	.word	0x20000338

08003a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <USART1_IRQHandler+0x10>)
 8003a92:	f004 fbc7 	bl	8008224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000378 	.word	0x20000378

08003aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <_sbrk+0x5c>)
 8003aaa:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <_sbrk+0x60>)
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <_sbrk+0x64>)
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <_sbrk+0x68>)
 8003ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <_sbrk+0x64>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d207      	bcs.n	8003ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad0:	f004 feb8 	bl	8008844 <__errno>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ade:	e009      	b.n	8003af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <_sbrk+0x64>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <_sbrk+0x64>)
 8003af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	20005000 	.word	0x20005000
 8003b00:	00000400 	.word	0x00000400
 8003b04:	200001a4 	.word	0x200001a4
 8003b08:	200003c0 	.word	0x200003c0

08003b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <SystemInit+0x5c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <SystemInit+0x5c>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <SystemInit+0x5c>)
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	4911      	ldr	r1, [pc, #68]	; (8003b68 <SystemInit+0x5c>)
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <SystemInit+0x60>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b28:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <SystemInit+0x5c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <SystemInit+0x5c>)
 8003b2e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <SystemInit+0x5c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <SystemInit+0x5c>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <SystemInit+0x5c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <SystemInit+0x5c>)
 8003b4a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003b4e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SystemInit+0x5c>)
 8003b52:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b56:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <SystemInit+0x64>)
 8003b5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b5e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	f8ff0000 	.word	0xf8ff0000
 8003b70:	e000ed00 	.word	0xe000ed00

08003b74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b7a:	f107 0308 	add.w	r3, r7, #8
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b88:	463b      	mov	r3, r7
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8003b98:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003b9a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003b9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8003ba6:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003bac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bae:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb4:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bba:	4814      	ldr	r0, [pc, #80]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003bbc:	f003 ff65 	bl	8007a8a <HAL_TIM_Base_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003bc6:	f7fd ff1b 	bl	8001a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	480d      	ldr	r0, [pc, #52]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003bd8:	f004 f8ad 	bl	8007d36 <HAL_TIM_ConfigClockSource>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003be2:	f7fd ff0d 	bl	8001a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bee:	463b      	mov	r3, r7
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4806      	ldr	r0, [pc, #24]	; (8003c0c <MX_TIM2_Init+0x98>)
 8003bf4:	f004 fa72 	bl	80080dc <HAL_TIMEx_MasterConfigSynchronization>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003bfe:	f7fd feff 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000338 	.word	0x20000338

08003c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d113      	bne.n	8003c4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_TIM_Base_MspInit+0x44>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_TIM_Base_MspInit+0x44>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	61d3      	str	r3, [r2, #28]
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_TIM_Base_MspInit+0x44>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	201c      	movs	r0, #28
 8003c40:	f000 fd1f 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c44:	201c      	movs	r0, #28
 8003c46:	f000 fd38 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000

08003c58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <MX_USART1_UART_Init+0x50>)
 8003c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c70:	4b0c      	ldr	r3, [pc, #48]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c76:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c7c:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c7e:	220c      	movs	r2, #12
 8003c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c82:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c8e:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <MX_USART1_UART_Init+0x4c>)
 8003c90:	f004 fa7a 	bl	8008188 <HAL_UART_Init>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c9a:	f7fd feb1 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000378 	.word	0x20000378
 8003ca8:	40013800 	.word	0x40013800

08003cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0310 	add.w	r3, r7, #16
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_UART_MspInit+0x9c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d139      	bne.n	8003d40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd6:	6193      	str	r3, [r2, #24]
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce4:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6193      	str	r3, [r2, #24]
 8003cf0:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_UART_MspInit+0xa0>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0a:	f107 0310 	add.w	r3, r7, #16
 8003d0e:	4619      	mov	r1, r3
 8003d10:	480f      	ldr	r0, [pc, #60]	; (8003d50 <HAL_UART_MspInit+0xa4>)
 8003d12:	f000 fd63 	bl	80047dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d24:	f107 0310 	add.w	r3, r7, #16
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4809      	ldr	r0, [pc, #36]	; (8003d50 <HAL_UART_MspInit+0xa4>)
 8003d2c:	f000 fd56 	bl	80047dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	2025      	movs	r0, #37	; 0x25
 8003d36:	f000 fca4 	bl	8004682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d3a:	2025      	movs	r0, #37	; 0x25
 8003d3c:	f000 fcbd 	bl	80046ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003d40:	bf00      	nop
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40010800 	.word	0x40010800

08003d54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003d54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003d56:	e003      	b.n	8003d60 <LoopCopyDataInit>

08003d58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003d5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003d5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003d5e:	3104      	adds	r1, #4

08003d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003d60:	480a      	ldr	r0, [pc, #40]	; (8003d8c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003d64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003d66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003d68:	d3f6      	bcc.n	8003d58 <CopyDataInit>
  ldr r2, =_sbss
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003d6c:	e002      	b.n	8003d74 <LoopFillZerobss>

08003d6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003d6e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003d70:	f842 3b04 	str.w	r3, [r2], #4

08003d74 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003d76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003d78:	d3f9      	bcc.n	8003d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d7a:	f7ff fec7 	bl	8003b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f004 fd67 	bl	8008850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d82:	f7fd fd15 	bl	80017b0 <main>
  bx lr
 8003d86:	4770      	bx	lr
  ldr r3, =_sidata
 8003d88:	080094b8 	.word	0x080094b8
  ldr r0, =_sdata
 8003d8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003d90:	20000130 	.word	0x20000130
  ldr r2, =_sbss
 8003d94:	20000130 	.word	0x20000130
  ldr r3, = _ebss
 8003d98:	200003c0 	.word	0x200003c0

08003d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d9c:	e7fe      	b.n	8003d9c <ADC1_2_IRQHandler>
	...

08003da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_Init+0x28>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <HAL_Init+0x28>)
 8003daa:	f043 0310 	orr.w	r3, r3, #16
 8003dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db0:	2003      	movs	r0, #3
 8003db2:	f000 fc5b 	bl	800466c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003db6:	200f      	movs	r0, #15
 8003db8:	f000 f808 	bl	8003dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dbc:	f7ff fe02 	bl	80039c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40022000 	.word	0x40022000

08003dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_InitTick+0x54>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_InitTick+0x58>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fc73 	bl	80046d6 <HAL_SYSTICK_Config>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00e      	b.n	8003e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b0f      	cmp	r3, #15
 8003dfe:	d80a      	bhi.n	8003e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e00:	2200      	movs	r2, #0
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e08:	f000 fc3b 	bl	8004682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e0c:	4a06      	ldr	r2, [pc, #24]	; (8003e28 <HAL_InitTick+0x5c>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e000      	b.n	8003e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200000c0 	.word	0x200000c0
 8003e24:	200000c8 	.word	0x200000c8
 8003e28:	200000c4 	.word	0x200000c4

08003e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_IncTick+0x1c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_IncTick+0x20>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a03      	ldr	r2, [pc, #12]	; (8003e4c <HAL_IncTick+0x20>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	200000c8 	.word	0x200000c8
 8003e4c:	200003b8 	.word	0x200003b8

08003e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return uwTick;
 8003e54:	4b02      	ldr	r3, [pc, #8]	; (8003e60 <HAL_GetTick+0x10>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	200003b8 	.word	0x200003b8

08003e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e6c:	f7ff fff0 	bl	8003e50 <HAL_GetTick>
 8003e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7c:	d005      	beq.n	8003e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_Delay+0x40>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4413      	add	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e8a:	bf00      	nop
 8003e8c:	f7ff ffe0 	bl	8003e50 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d8f7      	bhi.n	8003e8c <HAL_Delay+0x28>
  {
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200000c8 	.word	0x200000c8

08003ea8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0be      	b.n	8004048 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d109      	bne.n	8003eec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fc ff40 	bl	8000d6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 fab7 	bl	8004460 <ADC_ConversionStop_Disable>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f040 8099 	bne.w	8004036 <HAL_ADC_Init+0x18e>
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 8095 	bne.w	8004036 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f14:	f023 0302 	bic.w	r3, r3, #2
 8003f18:	f043 0202 	orr.w	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7b1b      	ldrb	r3, [r3, #12]
 8003f2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003f30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f40:	d003      	beq.n	8003f4a <HAL_ADC_Init+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_ADC_Init+0xa8>
 8003f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f4e:	e000      	b.n	8003f52 <HAL_ADC_Init+0xaa>
 8003f50:	2300      	movs	r3, #0
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	7d1b      	ldrb	r3, [r3, #20]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d119      	bne.n	8003f94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7b1b      	ldrb	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	035a      	lsls	r2, r3, #13
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e00b      	b.n	8003f94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	f043 0201 	orr.w	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	4b28      	ldr	r3, [pc, #160]	; (8004050 <HAL_ADC_Init+0x1a8>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc4:	d003      	beq.n	8003fce <HAL_ADC_Init+0x126>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d104      	bne.n	8003fd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	051b      	lsls	r3, r3, #20
 8003fd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_ADC_Init+0x1ac>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d10b      	bne.n	8004014 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	f043 0201 	orr.w	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004012:	e018      	b.n	8004046 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f023 0312 	bic.w	r3, r3, #18
 800401c:	f043 0210 	orr.w	r2, r3, #16
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004034:	e007      	b.n	8004046 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	f043 0210 	orr.w	r2, r3, #16
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004046:	7dfb      	ldrb	r3, [r7, #23]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	ffe1f7fd 	.word	0xffe1f7fd
 8004054:	ff1f0efe 	.word	0xff1f0efe

08004058 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_ADC_Start+0x1a>
 800406e:	2302      	movs	r3, #2
 8004070:	e098      	b.n	80041a4 <HAL_ADC_Start+0x14c>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f99e 	bl	80043bc <ADC_Enable>
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f040 8087 	bne.w	800419a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a41      	ldr	r2, [pc, #260]	; (80041ac <HAL_ADC_Start+0x154>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d105      	bne.n	80040b6 <HAL_ADC_Start+0x5e>
 80040aa:	4b41      	ldr	r3, [pc, #260]	; (80041b0 <HAL_ADC_Start+0x158>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d115      	bne.n	80040e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d026      	beq.n	800411e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040e0:	e01d      	b.n	800411e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <HAL_ADC_Start+0x158>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d004      	beq.n	8004102 <HAL_ADC_Start+0xaa>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <HAL_ADC_Start+0x154>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10d      	bne.n	800411e <HAL_ADC_Start+0xc6>
 8004102:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <HAL_ADC_Start+0x158>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004116:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	f023 0206 	bic.w	r2, r3, #6
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	62da      	str	r2, [r3, #44]	; 0x2c
 8004136:	e002      	b.n	800413e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f06f 0202 	mvn.w	r2, #2
 800414e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800415a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800415e:	d113      	bne.n	8004188 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004164:	4a11      	ldr	r2, [pc, #68]	; (80041ac <HAL_ADC_Start+0x154>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d105      	bne.n	8004176 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_ADC_Start+0x158>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	e00c      	b.n	80041a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	e003      	b.n	80041a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40012800 	.word	0x40012800
 80041b0:	40012400 	.word	0x40012400

080041b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x20>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0dc      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1da>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d81c      	bhi.n	8004236 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b05      	subs	r3, #5
 800420e:	221f      	movs	r2, #31
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	4019      	ands	r1, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	3b05      	subs	r3, #5
 8004228:	fa00 f203 	lsl.w	r2, r0, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	635a      	str	r2, [r3, #52]	; 0x34
 8004234:	e03c      	b.n	80042b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d81c      	bhi.n	8004278 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	3b23      	subs	r3, #35	; 0x23
 8004250:	221f      	movs	r2, #31
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	4019      	ands	r1, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b23      	subs	r3, #35	; 0x23
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
 8004276:	e01b      	b.n	80042b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	3b41      	subs	r3, #65	; 0x41
 800428a:	221f      	movs	r2, #31
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	43db      	mvns	r3, r3
 8004292:	4019      	ands	r1, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	3b41      	subs	r3, #65	; 0x41
 80042a4:	fa00 f203 	lsl.w	r2, r0, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	d91c      	bls.n	80042f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68d9      	ldr	r1, [r3, #12]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	3b1e      	subs	r3, #30
 80042ca:	2207      	movs	r2, #7
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43db      	mvns	r3, r3
 80042d2:	4019      	ands	r1, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	6898      	ldr	r0, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4413      	add	r3, r2
 80042e2:	3b1e      	subs	r3, #30
 80042e4:	fa00 f203 	lsl.w	r2, r0, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e019      	b.n	8004326 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6919      	ldr	r1, [r3, #16]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	4413      	add	r3, r2
 8004302:	2207      	movs	r2, #7
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	4019      	ands	r1, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6898      	ldr	r0, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	fa00 f203 	lsl.w	r2, r0, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b10      	cmp	r3, #16
 800432c:	d003      	beq.n	8004336 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004332:	2b11      	cmp	r3, #17
 8004334:	d132      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d125      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d126      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800435c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b10      	cmp	r3, #16
 8004364:	d11a      	bne.n	800439c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	0c9a      	lsrs	r2, r3, #18
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800437c:	e002      	b.n	8004384 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3b01      	subs	r3, #1
 8004382:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f9      	bne.n	800437e <HAL_ADC_ConfigChannel+0x1b2>
 800438a:	e007      	b.n	800439c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	40012400 	.word	0x40012400
 80043b4:	200000c0 	.word	0x200000c0
 80043b8:	431bde83 	.word	0x431bde83

080043bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d039      	beq.n	800444e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <ADC_Enable+0x9c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <ADC_Enable+0xa0>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80043f8:	e002      	b.n	8004400 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f9      	bne.n	80043fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004406:	f7ff fd23 	bl	8003e50 <HAL_GetTick>
 800440a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800440c:	e018      	b.n	8004440 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800440e:	f7ff fd1f 	bl	8003e50 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d911      	bls.n	8004440 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	f043 0210 	orr.w	r2, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e007      	b.n	8004450 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d1df      	bne.n	800440e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	200000c0 	.word	0x200000c0
 800445c:	431bde83 	.word	0x431bde83

08004460 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d127      	bne.n	80044ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800448a:	f7ff fce1 	bl	8003e50 <HAL_GetTick>
 800448e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004490:	e014      	b.n	80044bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004492:	f7ff fcdd 	bl	8003e50 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d90d      	bls.n	80044bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	f043 0210 	orr.w	r2, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e007      	b.n	80044cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d0e3      	beq.n	8004492 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e4:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f0:	4013      	ands	r3, r2
 80044f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <__NVIC_SetPriorityGrouping+0x44>)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	60d3      	str	r3, [r2, #12]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <__NVIC_GetPriorityGrouping+0x18>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 0307 	and.w	r3, r3, #7
}
 800452a:	4618      	mov	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0b      	blt.n	8004562 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	f003 021f 	and.w	r2, r3, #31
 8004550:	4906      	ldr	r1, [pc, #24]	; (800456c <__NVIC_EnableIRQ+0x34>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2001      	movs	r0, #1
 800455a:	fa00 f202 	lsl.w	r2, r0, r2
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr
 800456c:	e000e100 	.word	0xe000e100

08004570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	6039      	str	r1, [r7, #0]
 800457a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800457c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004580:	2b00      	cmp	r3, #0
 8004582:	db0a      	blt.n	800459a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	490c      	ldr	r1, [pc, #48]	; (80045bc <__NVIC_SetPriority+0x4c>)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	0112      	lsls	r2, r2, #4
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	440b      	add	r3, r1
 8004594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004598:	e00a      	b.n	80045b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4908      	ldr	r1, [pc, #32]	; (80045c0 <__NVIC_SetPriority+0x50>)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	3b04      	subs	r3, #4
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	440b      	add	r3, r1
 80045ae:	761a      	strb	r2, [r3, #24]
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000e100 	.word	0xe000e100
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f1c3 0307 	rsb	r3, r3, #7
 80045de:	2b04      	cmp	r3, #4
 80045e0:	bf28      	it	cs
 80045e2:	2304      	movcs	r3, #4
 80045e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d902      	bls.n	80045f4 <NVIC_EncodePriority+0x30>
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3b03      	subs	r3, #3
 80045f2:	e000      	b.n	80045f6 <NVIC_EncodePriority+0x32>
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43da      	mvns	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	401a      	ands	r2, r3
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800460c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa01 f303 	lsl.w	r3, r1, r3
 8004616:	43d9      	mvns	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	4313      	orrs	r3, r2
         );
}
 800461e:	4618      	mov	r0, r3
 8004620:	3724      	adds	r7, #36	; 0x24
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004638:	d301      	bcc.n	800463e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800463a:	2301      	movs	r3, #1
 800463c:	e00f      	b.n	800465e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463e:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <SysTick_Config+0x40>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b01      	subs	r3, #1
 8004644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004646:	210f      	movs	r1, #15
 8004648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464c:	f7ff ff90 	bl	8004570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <SysTick_Config+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SysTick_Config+0x40>)
 8004658:	2207      	movs	r2, #7
 800465a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	e000e010 	.word	0xe000e010

0800466c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff ff2d 	bl	80044d4 <__NVIC_SetPriorityGrouping>
}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004694:	f7ff ff42 	bl	800451c <__NVIC_GetPriorityGrouping>
 8004698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	6978      	ldr	r0, [r7, #20]
 80046a0:	f7ff ff90 	bl	80045c4 <NVIC_EncodePriority>
 80046a4:	4602      	mov	r2, r0
 80046a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046aa:	4611      	mov	r1, r2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff5f 	bl	8004570 <__NVIC_SetPriority>
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b082      	sub	sp, #8
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff35 	bl	8004538 <__NVIC_EnableIRQ>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ffa2 	bl	8004628 <SysTick_Config>
 80046e4:	4603      	mov	r3, r0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004702:	2b02      	cmp	r3, #2
 8004704:	d005      	beq.n	8004712 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2204      	movs	r2, #4
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
 8004710:	e051      	b.n	80047b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 020e 	bic.w	r2, r2, #14
 8004720:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_DMA_Abort_IT+0xd0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d029      	beq.n	8004790 <HAL_DMA_Abort_IT+0xa0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <HAL_DMA_Abort_IT+0xd4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_DMA_Abort_IT+0x9c>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <HAL_DMA_Abort_IT+0xd8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01a      	beq.n	8004786 <HAL_DMA_Abort_IT+0x96>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_DMA_Abort_IT+0xdc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d012      	beq.n	8004780 <HAL_DMA_Abort_IT+0x90>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_DMA_Abort_IT+0xe0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00a      	beq.n	800477a <HAL_DMA_Abort_IT+0x8a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_DMA_Abort_IT+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d102      	bne.n	8004774 <HAL_DMA_Abort_IT+0x84>
 800476e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004772:	e00e      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 8004774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004778:	e00b      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 800477a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800477e:	e008      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 8004780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004784:	e005      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 8004786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800478a:	e002      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 800478c:	2310      	movs	r3, #16
 800478e:	e000      	b.n	8004792 <HAL_DMA_Abort_IT+0xa2>
 8004790:	2301      	movs	r3, #1
 8004792:	4a11      	ldr	r2, [pc, #68]	; (80047d8 <HAL_DMA_Abort_IT+0xe8>)
 8004794:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
    } 
  }
  return status;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40020008 	.word	0x40020008
 80047c4:	4002001c 	.word	0x4002001c
 80047c8:	40020030 	.word	0x40020030
 80047cc:	40020044 	.word	0x40020044
 80047d0:	40020058 	.word	0x40020058
 80047d4:	4002006c 	.word	0x4002006c
 80047d8:	40020000 	.word	0x40020000

080047dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047dc:	b480      	push	{r7}
 80047de:	b08b      	sub	sp, #44	; 0x2c
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ee:	e127      	b.n	8004a40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047f0:	2201      	movs	r2, #1
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	429a      	cmp	r2, r3
 800480a:	f040 8116 	bne.w	8004a3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b12      	cmp	r3, #18
 8004814:	d034      	beq.n	8004880 <HAL_GPIO_Init+0xa4>
 8004816:	2b12      	cmp	r3, #18
 8004818:	d80d      	bhi.n	8004836 <HAL_GPIO_Init+0x5a>
 800481a:	2b02      	cmp	r3, #2
 800481c:	d02b      	beq.n	8004876 <HAL_GPIO_Init+0x9a>
 800481e:	2b02      	cmp	r3, #2
 8004820:	d804      	bhi.n	800482c <HAL_GPIO_Init+0x50>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d031      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004826:	2b01      	cmp	r3, #1
 8004828:	d01c      	beq.n	8004864 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800482a:	e048      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800482c:	2b03      	cmp	r3, #3
 800482e:	d043      	beq.n	80048b8 <HAL_GPIO_Init+0xdc>
 8004830:	2b11      	cmp	r3, #17
 8004832:	d01b      	beq.n	800486c <HAL_GPIO_Init+0x90>
          break;
 8004834:	e043      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004836:	4a89      	ldr	r2, [pc, #548]	; (8004a5c <HAL_GPIO_Init+0x280>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d026      	beq.n	800488a <HAL_GPIO_Init+0xae>
 800483c:	4a87      	ldr	r2, [pc, #540]	; (8004a5c <HAL_GPIO_Init+0x280>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d806      	bhi.n	8004850 <HAL_GPIO_Init+0x74>
 8004842:	4a87      	ldr	r2, [pc, #540]	; (8004a60 <HAL_GPIO_Init+0x284>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d020      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004848:	4a86      	ldr	r2, [pc, #536]	; (8004a64 <HAL_GPIO_Init+0x288>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d01d      	beq.n	800488a <HAL_GPIO_Init+0xae>
          break;
 800484e:	e036      	b.n	80048be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004850:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_GPIO_Init+0x28c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d019      	beq.n	800488a <HAL_GPIO_Init+0xae>
 8004856:	4a85      	ldr	r2, [pc, #532]	; (8004a6c <HAL_GPIO_Init+0x290>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d016      	beq.n	800488a <HAL_GPIO_Init+0xae>
 800485c:	4a84      	ldr	r2, [pc, #528]	; (8004a70 <HAL_GPIO_Init+0x294>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_GPIO_Init+0xae>
          break;
 8004862:	e02c      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	623b      	str	r3, [r7, #32]
          break;
 800486a:	e028      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	3304      	adds	r3, #4
 8004872:	623b      	str	r3, [r7, #32]
          break;
 8004874:	e023      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	3308      	adds	r3, #8
 800487c:	623b      	str	r3, [r7, #32]
          break;
 800487e:	e01e      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	330c      	adds	r3, #12
 8004886:	623b      	str	r3, [r7, #32]
          break;
 8004888:	e019      	b.n	80048be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004892:	2304      	movs	r3, #4
 8004894:	623b      	str	r3, [r7, #32]
          break;
 8004896:	e012      	b.n	80048be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d105      	bne.n	80048ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048a0:	2308      	movs	r3, #8
 80048a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69fa      	ldr	r2, [r7, #28]
 80048a8:	611a      	str	r2, [r3, #16]
          break;
 80048aa:	e008      	b.n	80048be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048ac:	2308      	movs	r3, #8
 80048ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	615a      	str	r2, [r3, #20]
          break;
 80048b6:	e002      	b.n	80048be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
          break;
 80048bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2bff      	cmp	r3, #255	; 0xff
 80048c2:	d801      	bhi.n	80048c8 <HAL_GPIO_Init+0xec>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	e001      	b.n	80048cc <HAL_GPIO_Init+0xf0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2bff      	cmp	r3, #255	; 0xff
 80048d2:	d802      	bhi.n	80048da <HAL_GPIO_Init+0xfe>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_Init+0x104>
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	3b08      	subs	r3, #8
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	210f      	movs	r1, #15
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	fa01 f303 	lsl.w	r3, r1, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	401a      	ands	r2, r3
 80048f2:	6a39      	ldr	r1, [r7, #32]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	431a      	orrs	r2, r3
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8096 	beq.w	8004a3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800490e:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_GPIO_Init+0x298>)
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_GPIO_Init+0x298>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6193      	str	r3, [r2, #24]
 800491a:	4b56      	ldr	r3, [pc, #344]	; (8004a74 <HAL_GPIO_Init+0x298>)
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004926:	4a54      	ldr	r2, [pc, #336]	; (8004a78 <HAL_GPIO_Init+0x29c>)
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	3302      	adds	r3, #2
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	220f      	movs	r2, #15
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4013      	ands	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a4b      	ldr	r2, [pc, #300]	; (8004a7c <HAL_GPIO_Init+0x2a0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0x19e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a4a      	ldr	r2, [pc, #296]	; (8004a80 <HAL_GPIO_Init+0x2a4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00d      	beq.n	8004976 <HAL_GPIO_Init+0x19a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a49      	ldr	r2, [pc, #292]	; (8004a84 <HAL_GPIO_Init+0x2a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_GPIO_Init+0x196>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a48      	ldr	r2, [pc, #288]	; (8004a88 <HAL_GPIO_Init+0x2ac>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_GPIO_Init+0x192>
 800496a:	2303      	movs	r3, #3
 800496c:	e006      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 800496e:	2304      	movs	r3, #4
 8004970:	e004      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 8004972:	2302      	movs	r3, #2
 8004974:	e002      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 8004976:	2301      	movs	r3, #1
 8004978:	e000      	b.n	800497c <HAL_GPIO_Init+0x1a0>
 800497a:	2300      	movs	r3, #0
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	f002 0203 	and.w	r2, r2, #3
 8004982:	0092      	lsls	r2, r2, #2
 8004984:	4093      	lsls	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800498c:	493a      	ldr	r1, [pc, #232]	; (8004a78 <HAL_GPIO_Init+0x29c>)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	3302      	adds	r3, #2
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d006      	beq.n	80049b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80049a6:	4b39      	ldr	r3, [pc, #228]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	4938      	ldr	r1, [pc, #224]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	e006      	b.n	80049c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80049b4:	4b35      	ldr	r3, [pc, #212]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	4933      	ldr	r1, [pc, #204]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049be:	4013      	ands	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d006      	beq.n	80049dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80049ce:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	492e      	ldr	r1, [pc, #184]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
 80049da:	e006      	b.n	80049ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	4929      	ldr	r1, [pc, #164]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049f6:	4b25      	ldr	r3, [pc, #148]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	4924      	ldr	r1, [pc, #144]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
 8004a02:	e006      	b.n	8004a12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	491f      	ldr	r1, [pc, #124]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a1e:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	491a      	ldr	r1, [pc, #104]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
 8004a2a:	e006      	b.n	8004a3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	43db      	mvns	r3, r3
 8004a34:	4915      	ldr	r1, [pc, #84]	; (8004a8c <HAL_GPIO_Init+0x2b0>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	fa22 f303 	lsr.w	r3, r2, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f47f aed0 	bne.w	80047f0 <HAL_GPIO_Init+0x14>
  }
}
 8004a50:	bf00      	nop
 8004a52:	372c      	adds	r7, #44	; 0x2c
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	10210000 	.word	0x10210000
 8004a60:	10110000 	.word	0x10110000
 8004a64:	10120000 	.word	0x10120000
 8004a68:	10310000 	.word	0x10310000
 8004a6c:	10320000 	.word	0x10320000
 8004a70:	10220000 	.word	0x10220000
 8004a74:	40021000 	.word	0x40021000
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40010800 	.word	0x40010800
 8004a80:	40010c00 	.word	0x40010c00
 8004a84:	40011000 	.word	0x40011000
 8004a88:	40011400 	.word	0x40011400
 8004a8c:	40010400 	.word	0x40010400

08004a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	887b      	ldrh	r3, [r7, #2]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	e001      	b.n	8004ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	807b      	strh	r3, [r7, #2]
 8004aca:	4613      	mov	r3, r2
 8004acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ace:	787b      	ldrb	r3, [r7, #1]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ad4:	887a      	ldrh	r2, [r7, #2]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ada:	e003      	b.n	8004ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004adc:	887b      	ldrh	r3, [r7, #2]
 8004ade:	041a      	lsls	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	611a      	str	r2, [r3, #16]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e10f      	b.n	8004d22 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc fca4 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b34:	f001 ffde 	bl	8006af4 <HAL_RCC_GetPCLK1Freq>
 8004b38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4a7b      	ldr	r2, [pc, #492]	; (8004d2c <HAL_I2C_Init+0x23c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d807      	bhi.n	8004b54 <HAL_I2C_Init+0x64>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_I2C_Init+0x240>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bf94      	ite	ls
 8004b4c:	2301      	movls	r3, #1
 8004b4e:	2300      	movhi	r3, #0
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	e006      	b.n	8004b62 <HAL_I2C_Init+0x72>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a77      	ldr	r2, [pc, #476]	; (8004d34 <HAL_I2C_Init+0x244>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bf94      	ite	ls
 8004b5c:	2301      	movls	r3, #1
 8004b5e:	2300      	movhi	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0db      	b.n	8004d22 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a72      	ldr	r2, [pc, #456]	; (8004d38 <HAL_I2C_Init+0x248>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0c9b      	lsrs	r3, r3, #18
 8004b74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	4a64      	ldr	r2, [pc, #400]	; (8004d2c <HAL_I2C_Init+0x23c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d802      	bhi.n	8004ba4 <HAL_I2C_Init+0xb4>
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	e009      	b.n	8004bb8 <HAL_I2C_Init+0xc8>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	4a63      	ldr	r2, [pc, #396]	; (8004d3c <HAL_I2C_Init+0x24c>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	4956      	ldr	r1, [pc, #344]	; (8004d2c <HAL_I2C_Init+0x23c>)
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	d80d      	bhi.n	8004bf4 <HAL_I2C_Init+0x104>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	1e59      	subs	r1, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	bf38      	it	cc
 8004bf0:	2304      	movcc	r3, #4
 8004bf2:	e04f      	b.n	8004c94 <HAL_I2C_Init+0x1a4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d111      	bne.n	8004c20 <HAL_I2C_Init+0x130>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e012      	b.n	8004c46 <HAL_I2C_Init+0x156>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1e58      	subs	r0, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	0099      	lsls	r1, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c36:	3301      	adds	r3, #1
 8004c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_I2C_Init+0x15e>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e022      	b.n	8004c94 <HAL_I2C_Init+0x1a4>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10e      	bne.n	8004c74 <HAL_I2C_Init+0x184>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1e58      	subs	r0, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c68:	3301      	adds	r3, #1
 8004c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c72:	e00f      	b.n	8004c94 <HAL_I2C_Init+0x1a4>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1e58      	subs	r0, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	0099      	lsls	r1, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	6809      	ldr	r1, [r1, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6911      	ldr	r1, [r2, #16]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68d2      	ldr	r2, [r2, #12]
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	000186a0 	.word	0x000186a0
 8004d30:	001e847f 	.word	0x001e847f
 8004d34:	003d08ff 	.word	0x003d08ff
 8004d38:	431bde83 	.word	0x431bde83
 8004d3c:	10624dd3 	.word	0x10624dd3

08004d40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	817b      	strh	r3, [r7, #10]
 8004d50:	4613      	mov	r3, r2
 8004d52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d54:	f7ff f87c 	bl	8003e50 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	f040 80e0 	bne.w	8004f28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	2319      	movs	r3, #25
 8004d6e:	2201      	movs	r2, #1
 8004d70:	4970      	ldr	r1, [pc, #448]	; (8004f34 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f001 f8c6 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e0d3      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_I2C_Master_Transmit+0x50>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0cc      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d007      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	; 0x21
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2210      	movs	r2, #16
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	893a      	ldrh	r2, [r7, #8]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a50      	ldr	r2, [pc, #320]	; (8004f38 <HAL_I2C_Master_Transmit+0x1f8>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004df8:	8979      	ldrh	r1, [r7, #10]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6a3a      	ldr	r2, [r7, #32]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 fdfa 	bl	80059f8 <I2C_MasterRequestWrite>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e08d      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e24:	e066      	b.n	8004ef4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	6a39      	ldr	r1, [r7, #32]
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 f940 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00d      	beq.n	8004e52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d107      	bne.n	8004e4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e06b      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	781a      	ldrb	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d11b      	bne.n	8004ec8 <HAL_I2C_Master_Transmit+0x188>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d017      	beq.n	8004ec8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	6a39      	ldr	r1, [r7, #32]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f001 f930 	bl	8006132 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d107      	bne.n	8004ef0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e01a      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d194      	bne.n	8004e26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	e000      	b.n	8004f2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f28:	2302      	movs	r3, #2
  }
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	00100002 	.word	0x00100002
 8004f38:	ffff0000 	.word	0xffff0000

08004f3c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08c      	sub	sp, #48	; 0x30
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	461a      	mov	r2, r3
 8004f48:	460b      	mov	r3, r1
 8004f4a:	817b      	strh	r3, [r7, #10]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f50:	f7fe ff7e 	bl	8003e50 <HAL_GetTick>
 8004f54:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	f040 8213 	bne.w	800538a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2319      	movs	r3, #25
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	497e      	ldr	r1, [pc, #504]	; (8005168 <HAL_I2C_Master_Receive+0x22c>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 ffc8 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e206      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2C_Master_Receive+0x50>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e1ff      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d007      	beq.n	8004fb2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2222      	movs	r2, #34	; 0x22
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2210      	movs	r2, #16
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	893a      	ldrh	r2, [r7, #8]
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a5e      	ldr	r2, [pc, #376]	; (800516c <HAL_I2C_Master_Receive+0x230>)
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ff4:	8979      	ldrh	r1, [r7, #10]
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fd72 	bl	8005ae4 <I2C_MasterRequestRead>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e1c0      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	2b00      	cmp	r3, #0
 8005010:	d113      	bne.n	800503a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005012:	2300      	movs	r3, #0
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	623b      	str	r3, [r7, #32]
 8005026:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e194      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503e:	2b01      	cmp	r3, #1
 8005040:	d11d      	bne.n	800507e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800507a:	b662      	cpsie	i
 800507c:	e172      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	2b02      	cmp	r3, #2
 8005084:	d11d      	bne.n	80050c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005094:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005096:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80050be:	b662      	cpsie	i
 80050c0:	e150      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050e8:	e13c      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	f200 80f5 	bhi.w	80052de <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d123      	bne.n	8005144 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f001 f857 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e13d      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005142:	e10f      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	2b02      	cmp	r3, #2
 800514a:	d150      	bne.n	80051ee <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	2200      	movs	r2, #0
 8005154:	4906      	ldr	r1, [pc, #24]	; (8005170 <HAL_I2C_Master_Receive+0x234>)
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fed4 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e112      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
 8005166:	bf00      	nop
 8005168:	00100002 	.word	0x00100002
 800516c:	ffff0000 	.word	0xffff0000
 8005170:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005174:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005184:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80051b8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ec:	e0ba      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2200      	movs	r2, #0
 80051f6:	4967      	ldr	r1, [pc, #412]	; (8005394 <HAL_I2C_Master_Receive+0x458>)
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 fe83 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e0c1      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005216:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005218:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	2200      	movs	r2, #0
 8005254:	494f      	ldr	r1, [pc, #316]	; (8005394 <HAL_I2C_Master_Receive+0x458>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fe54 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e092      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005274:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80052a8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052dc:	e042      	b.n	8005364 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 ff66 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e04c      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d118      	bne.n	8005364 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005368:	2b00      	cmp	r3, #0
 800536a:	f47f aebe 	bne.w	80050ea <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e000      	b.n	800538c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 800538a:	2302      	movs	r3, #2
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	00010004 	.word	0x00010004

08005398 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b088      	sub	sp, #32
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7fe fd4d 	bl	8003e50 <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 80d9 	bne.w	8005578 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2319      	movs	r3, #25
 80053cc:	2201      	movs	r2, #1
 80053ce:	496d      	ldr	r1, [pc, #436]	; (8005584 <HAL_I2C_Mem_Write+0x1ec>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fd97 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	e0cc      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Write+0x56>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e0c5      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2221      	movs	r2, #33	; 0x21
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	; 0x40
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a3a      	ldr	r2, [r7, #32]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a4d      	ldr	r2, [pc, #308]	; (8005588 <HAL_I2C_Mem_Write+0x1f0>)
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005456:	88f8      	ldrh	r0, [r7, #6]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fbf2 	bl	8005c50 <I2C_RequestMemoryWrite>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d052      	beq.n	8005518 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e081      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fe18 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b04      	cmp	r3, #4
 800548c:	d107      	bne.n	800549e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800549c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e06b      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11b      	bne.n	8005518 <HAL_I2C_Mem_Write+0x180>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d017      	beq.n	8005518 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1aa      	bne.n	8005476 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fe04 	bl	8006132 <I2C_WaitOnBTFFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e016      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800555a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000

0800558c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08c      	sub	sp, #48	; 0x30
 8005590:	af02      	add	r7, sp, #8
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	4608      	mov	r0, r1
 8005596:	4611      	mov	r1, r2
 8005598:	461a      	mov	r2, r3
 800559a:	4603      	mov	r3, r0
 800559c:	817b      	strh	r3, [r7, #10]
 800559e:	460b      	mov	r3, r1
 80055a0:	813b      	strh	r3, [r7, #8]
 80055a2:	4613      	mov	r3, r2
 80055a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055a6:	f7fe fc53 	bl	8003e50 <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	f040 8218 	bne.w	80059ea <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	2319      	movs	r3, #25
 80055c0:	2201      	movs	r2, #1
 80055c2:	4981      	ldr	r1, [pc, #516]	; (80057c8 <HAL_I2C_Mem_Read+0x23c>)
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fc9d 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
 80055d2:	e20b      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_I2C_Mem_Read+0x56>
 80055de:	2302      	movs	r3, #2
 80055e0:	e204      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d007      	beq.n	8005608 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005616:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4a61      	ldr	r2, [pc, #388]	; (80057cc <HAL_I2C_Mem_Read+0x240>)
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800564a:	88f8      	ldrh	r0, [r7, #6]
 800564c:	893a      	ldrh	r2, [r7, #8]
 800564e:	8979      	ldrh	r1, [r7, #10]
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	4603      	mov	r3, r0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fb82 	bl	8005d64 <I2C_RequestMemoryRead>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e1c0      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d113      	bne.n	800569a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005672:	2300      	movs	r3, #0
 8005674:	623b      	str	r3, [r7, #32]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	699b      	ldr	r3, [r3, #24]
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	e194      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d11d      	bne.n	80056de <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	61fb      	str	r3, [r7, #28]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80056da:	b662      	cpsie	i
 80056dc:	e172      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d11d      	bne.n	8005722 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80056f6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800571c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800571e:	b662      	cpsie	i
 8005720:	e150      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005730:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005748:	e13c      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	2b03      	cmp	r3, #3
 8005750:	f200 80f5 	bhi.w	800593e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	2b01      	cmp	r3, #1
 800575a:	d123      	bne.n	80057a4 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 fd27 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e13d      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057a2:	e10f      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d150      	bne.n	800584e <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	2200      	movs	r2, #0
 80057b4:	4906      	ldr	r1, [pc, #24]	; (80057d0 <HAL_I2C_Mem_Read+0x244>)
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fba4 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e112      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
 80057c6:	bf00      	nop
 80057c8:	00100002 	.word	0x00100002
 80057cc:	ffff0000 	.word	0xffff0000
 80057d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80057d4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	1c5a      	adds	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005818:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800584c:	e0ba      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2200      	movs	r2, #0
 8005856:	4967      	ldr	r1, [pc, #412]	; (80059f4 <HAL_I2C_Mem_Read+0x468>)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fb53 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0c1      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005878:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	2200      	movs	r2, #0
 80058b4:	494f      	ldr	r1, [pc, #316]	; (80059f4 <HAL_I2C_Mem_Read+0x468>)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fb24 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e092      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005908:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800593c:	e042      	b.n	80059c4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005940:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fc36 	bl	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e04c      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b04      	cmp	r3, #4
 8005990:	d118      	bne.n	80059c4 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f47f aebe 	bne.w	800574a <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3728      	adds	r7, #40	; 0x28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	00010004 	.word	0x00010004

080059f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	607a      	str	r2, [r7, #4]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	460b      	mov	r3, r1
 8005a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d006      	beq.n	8005a22 <I2C_MasterRequestWrite+0x2a>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d003      	beq.n	8005a22 <I2C_MasterRequestWrite+0x2a>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a20:	d108      	bne.n	8005a34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	e00b      	b.n	8005a4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	2b12      	cmp	r3, #18
 8005a3a:	d107      	bne.n	8005a4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 fa53 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e035      	b.n	8005ad4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a70:	d108      	bne.n	8005a84 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a80:	611a      	str	r2, [r3, #16]
 8005a82:	e01b      	b.n	8005abc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a84:	897b      	ldrh	r3, [r7, #10]
 8005a86:	11db      	asrs	r3, r3, #7
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 0306 	and.w	r3, r3, #6
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f063 030f 	orn	r3, r3, #15
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	490e      	ldr	r1, [pc, #56]	; (8005adc <I2C_MasterRequestWrite+0xe4>)
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa85 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e010      	b.n	8005ad4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <I2C_MasterRequestWrite+0xe8>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa75 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	00010008 	.word	0x00010008
 8005ae0:	00010002 	.word	0x00010002

08005ae4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	460b      	mov	r3, r1
 8005af2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d006      	beq.n	8005b1e <I2C_MasterRequestRead+0x3a>
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <I2C_MasterRequestRead+0x3a>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b1c:	d108      	bne.n	8005b30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e00b      	b.n	8005b48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	2b11      	cmp	r3, #17
 8005b36:	d107      	bne.n	8005b48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f9d5 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e06d      	b.n	8005c40 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6c:	d108      	bne.n	8005b80 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	611a      	str	r2, [r3, #16]
 8005b7e:	e053      	b.n	8005c28 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b80:	897b      	ldrh	r3, [r7, #10]
 8005b82:	11db      	asrs	r3, r3, #7
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0306 	and.w	r3, r3, #6
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f063 030f 	orn	r3, r3, #15
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	492a      	ldr	r1, [pc, #168]	; (8005c48 <I2C_MasterRequestRead+0x164>)
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 fa07 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e048      	b.n	8005c40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bae:	897b      	ldrh	r3, [r7, #10]
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	4923      	ldr	r1, [pc, #140]	; (8005c4c <I2C_MasterRequestRead+0x168>)
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f9f7 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e038      	b.n	8005c40 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f97f 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e017      	b.n	8005c40 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c10:	897b      	ldrh	r3, [r7, #10]
 8005c12:	11db      	asrs	r3, r3, #7
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 0306 	and.w	r3, r3, #6
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	f063 030e 	orn	r3, r3, #14
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <I2C_MasterRequestRead+0x168>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f9bf 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e000      	b.n	8005c40 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	00010008 	.word	0x00010008
 8005c4c:	00010002 	.word	0x00010002

08005c50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f93c 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e05f      	b.n	8005d56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ca4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	492d      	ldr	r1, [pc, #180]	; (8005d60 <I2C_RequestMemoryWrite+0x110>)
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f980 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e04c      	b.n	8005d56 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	6a39      	ldr	r1, [r7, #32]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 f9ea 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d107      	bne.n	8005cfa <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e02b      	b.n	8005d56 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d04:	893b      	ldrh	r3, [r7, #8]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	611a      	str	r2, [r3, #16]
 8005d0e:	e021      	b.n	8005d54 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d10:	893b      	ldrh	r3, [r7, #8]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d20:	6a39      	ldr	r1, [r7, #32]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f9c4 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d107      	bne.n	8005d46 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e005      	b.n	8005d56 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d4a:	893b      	ldrh	r3, [r7, #8]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	00010002 	.word	0x00010002

08005d64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	461a      	mov	r2, r3
 8005d72:	4603      	mov	r3, r0
 8005d74:	817b      	strh	r3, [r7, #10]
 8005d76:	460b      	mov	r3, r1
 8005d78:	813b      	strh	r3, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f8aa 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e09e      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dba:	897b      	ldrh	r3, [r7, #10]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	494c      	ldr	r1, [pc, #304]	; (8005f00 <I2C_RequestMemoryRead+0x19c>)
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f8ee 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e08b      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df8:	6a39      	ldr	r1, [r7, #32]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f958 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d107      	bne.n	8005e1e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e06a      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d105      	bne.n	8005e34 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e28:	893b      	ldrh	r3, [r7, #8]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	611a      	str	r2, [r3, #16]
 8005e32:	e021      	b.n	8005e78 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	6a39      	ldr	r1, [r7, #32]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f932 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d107      	bne.n	8005e6a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e044      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e6e:	893b      	ldrh	r3, [r7, #8]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7a:	6a39      	ldr	r1, [r7, #32]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f917 	bl	80060b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00d      	beq.n	8005ea4 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d107      	bne.n	8005ea0 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e029      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f81f 	bl	8005f04 <I2C_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e013      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ed0:	897b      	ldrh	r3, [r7, #10]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	4906      	ldr	r1, [pc, #24]	; (8005f00 <I2C_RequestMemoryRead+0x19c>)
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f863 	bl	8005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	00010002 	.word	0x00010002

08005f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	603b      	str	r3, [r7, #0]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f14:	e025      	b.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f1c:	d021      	beq.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f1e:	f7fd ff97 	bl	8003e50 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d302      	bcc.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d116      	bne.n	8005f62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f043 0220 	orr.w	r2, r3, #32
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e023      	b.n	8005faa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10d      	bne.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	e00c      	b.n	8005fa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4013      	ands	r3, r2
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	bf0c      	ite	eq
 8005f9a:	2301      	moveq	r3, #1
 8005f9c:	2300      	movne	r3, #0
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d0b6      	beq.n	8005f16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fc0:	e051      	b.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd0:	d123      	bne.n	800601a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e046      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006020:	d021      	beq.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fd ff15 	bl	8003e50 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d116      	bne.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f043 0220 	orr.w	r2, r3, #32
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e020      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10c      	bne.n	800608a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	43da      	mvns	r2, r3
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	e00b      	b.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d18d      	bne.n	8005fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060bc:	e02d      	b.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 f8ce 	bl	8006260 <I2C_IsAcknowledgeFailed>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e02d      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d4:	d021      	beq.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fd febb 	bl	8003e50 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d116      	bne.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	f043 0220 	orr.w	r2, r3, #32
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e007      	b.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d1ca      	bne.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b084      	sub	sp, #16
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800613e:	e02d      	b.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f88d 	bl	8006260 <I2C_IsAcknowledgeFailed>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e02d      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006156:	d021      	beq.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006158:	f7fd fe7a 	bl	8003e50 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d302      	bcc.n	800616e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d116      	bne.n	800619c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006188:	f043 0220 	orr.w	r2, r3, #32
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e007      	b.n	80061ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d1ca      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061c0:	e042      	b.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d119      	bne.n	8006204 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0210 	mvn.w	r2, #16
 80061d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e029      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006204:	f7fd fe24 	bl	8003e50 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d116      	bne.n	8006248 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	f043 0220 	orr.w	r2, r3, #32
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e007      	b.n	8006258 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d1b5      	bne.n	80061c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d11b      	bne.n	80062b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006280:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f043 0204 	orr.w	r2, r3, #4
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e02b      	b.n	8006326 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80062d6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f245 5255 	movw	r2, #21845	; 0x5555
 80062e0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6852      	ldr	r2, [r2, #4]
 80062ea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6892      	ldr	r2, [r2, #8]
 80062f4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80062f6:	f7fd fdab 	bl	8003e50 <HAL_GetTick>
 80062fa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != RESET)
 80062fc:	e008      	b.n	8006310 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80062fe:	f7fd fda7 	bl	8003e50 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	d901      	bls.n	8006310 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e00a      	b.n	8006326 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1f1      	bne.n	80062fe <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006322:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	420e0020 	.word	0x420e0020

08006348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e26c      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8087 	beq.w	8006476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006368:	4b92      	ldr	r3, [pc, #584]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 030c 	and.w	r3, r3, #12
 8006370:	2b04      	cmp	r3, #4
 8006372:	d00c      	beq.n	800638e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b08      	cmp	r3, #8
 800637e:	d112      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e>
 8006380:	4b8c      	ldr	r3, [pc, #560]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800638c:	d10b      	bne.n	80063a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800638e:	4b89      	ldr	r3, [pc, #548]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d06c      	beq.n	8006474 <HAL_RCC_OscConfig+0x12c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d168      	bne.n	8006474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e246      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ae:	d106      	bne.n	80063be <HAL_RCC_OscConfig+0x76>
 80063b0:	4b80      	ldr	r3, [pc, #512]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a7f      	ldr	r2, [pc, #508]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e02e      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10c      	bne.n	80063e0 <HAL_RCC_OscConfig+0x98>
 80063c6:	4b7b      	ldr	r3, [pc, #492]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7a      	ldr	r2, [pc, #488]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d0:	6013      	str	r3, [r2, #0]
 80063d2:	4b78      	ldr	r3, [pc, #480]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a77      	ldr	r2, [pc, #476]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e01d      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e8:	d10c      	bne.n	8006404 <HAL_RCC_OscConfig+0xbc>
 80063ea:	4b72      	ldr	r3, [pc, #456]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a71      	ldr	r2, [pc, #452]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b6f      	ldr	r3, [pc, #444]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6e      	ldr	r2, [pc, #440]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e00b      	b.n	800641c <HAL_RCC_OscConfig+0xd4>
 8006404:	4b6b      	ldr	r3, [pc, #428]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6a      	ldr	r2, [pc, #424]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 800640a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	4b68      	ldr	r3, [pc, #416]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a67      	ldr	r2, [pc, #412]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800641a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d013      	beq.n	800644c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006424:	f7fd fd14 	bl	8003e50 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800642c:	f7fd fd10 	bl	8003e50 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b64      	cmp	r3, #100	; 0x64
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e1fa      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	4b5d      	ldr	r3, [pc, #372]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0f0      	beq.n	800642c <HAL_RCC_OscConfig+0xe4>
 800644a:	e014      	b.n	8006476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644c:	f7fd fd00 	bl	8003e50 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006454:	f7fd fcfc 	bl	8003e50 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b64      	cmp	r3, #100	; 0x64
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e1e6      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006466:	4b53      	ldr	r3, [pc, #332]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x10c>
 8006472:	e000      	b.n	8006476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d063      	beq.n	800654a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006482:	4b4c      	ldr	r3, [pc, #304]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800648e:	4b49      	ldr	r3, [pc, #292]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 030c 	and.w	r3, r3, #12
 8006496:	2b08      	cmp	r3, #8
 8006498:	d11c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x18c>
 800649a:	4b46      	ldr	r3, [pc, #280]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d116      	bne.n	80064d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_RCC_OscConfig+0x176>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d001      	beq.n	80064be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e1ba      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064be:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4939      	ldr	r1, [pc, #228]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064d2:	e03a      	b.n	800654a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d020      	beq.n	800651e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <HAL_RCC_OscConfig+0x270>)
 80064de:	2201      	movs	r2, #1
 80064e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e2:	f7fd fcb5 	bl	8003e50 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ea:	f7fd fcb1 	bl	8003e50 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e19b      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064fc:	4b2d      	ldr	r3, [pc, #180]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006508:	4b2a      	ldr	r3, [pc, #168]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4927      	ldr	r1, [pc, #156]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]
 800651c:	e015      	b.n	800654a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651e:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <HAL_RCC_OscConfig+0x270>)
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fd fc94 	bl	8003e50 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800652c:	f7fd fc90 	bl	8003e50 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e17a      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653e:	4b1d      	ldr	r3, [pc, #116]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0308 	and.w	r3, r3, #8
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03a      	beq.n	80065cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d019      	beq.n	8006592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655e:	4b17      	ldr	r3, [pc, #92]	; (80065bc <HAL_RCC_OscConfig+0x274>)
 8006560:	2201      	movs	r2, #1
 8006562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006564:	f7fd fc74 	bl	8003e50 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656c:	f7fd fc70 	bl	8003e50 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e15a      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <HAL_RCC_OscConfig+0x26c>)
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800658a:	2001      	movs	r0, #1
 800658c:	f000 fada 	bl	8006b44 <RCC_Delay>
 8006590:	e01c      	b.n	80065cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006592:	4b0a      	ldr	r3, [pc, #40]	; (80065bc <HAL_RCC_OscConfig+0x274>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7fd fc5a 	bl	8003e50 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800659e:	e00f      	b.n	80065c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a0:	f7fd fc56 	bl	8003e50 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d908      	bls.n	80065c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e140      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
 80065b8:	42420000 	.word	0x42420000
 80065bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c0:	4b9e      	ldr	r3, [pc, #632]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e9      	bne.n	80065a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80a6 	beq.w	8006726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065de:	4b97      	ldr	r3, [pc, #604]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10d      	bne.n	8006606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	4b94      	ldr	r3, [pc, #592]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4a93      	ldr	r2, [pc, #588]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f4:	61d3      	str	r3, [r2, #28]
 80065f6:	4b91      	ldr	r3, [pc, #580]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006602:	2301      	movs	r3, #1
 8006604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006606:	4b8e      	ldr	r3, [pc, #568]	; (8006840 <HAL_RCC_OscConfig+0x4f8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660e:	2b00      	cmp	r3, #0
 8006610:	d118      	bne.n	8006644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006612:	4b8b      	ldr	r3, [pc, #556]	; (8006840 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a8a      	ldr	r2, [pc, #552]	; (8006840 <HAL_RCC_OscConfig+0x4f8>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800661e:	f7fd fc17 	bl	8003e50 <HAL_GetTick>
 8006622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006626:	f7fd fc13 	bl	8003e50 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b64      	cmp	r3, #100	; 0x64
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e0fd      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006638:	4b81      	ldr	r3, [pc, #516]	; (8006840 <HAL_RCC_OscConfig+0x4f8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d0f0      	beq.n	8006626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d106      	bne.n	800665a <HAL_RCC_OscConfig+0x312>
 800664c:	4b7b      	ldr	r3, [pc, #492]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	4a7a      	ldr	r2, [pc, #488]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	6213      	str	r3, [r2, #32]
 8006658:	e02d      	b.n	80066b6 <HAL_RCC_OscConfig+0x36e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0x334>
 8006662:	4b76      	ldr	r3, [pc, #472]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	4a75      	ldr	r2, [pc, #468]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006668:	f023 0301 	bic.w	r3, r3, #1
 800666c:	6213      	str	r3, [r2, #32]
 800666e:	4b73      	ldr	r3, [pc, #460]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	4a72      	ldr	r2, [pc, #456]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	6213      	str	r3, [r2, #32]
 800667a:	e01c      	b.n	80066b6 <HAL_RCC_OscConfig+0x36e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	2b05      	cmp	r3, #5
 8006682:	d10c      	bne.n	800669e <HAL_RCC_OscConfig+0x356>
 8006684:	4b6d      	ldr	r3, [pc, #436]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	4a6c      	ldr	r2, [pc, #432]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800668a:	f043 0304 	orr.w	r3, r3, #4
 800668e:	6213      	str	r3, [r2, #32]
 8006690:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	4a69      	ldr	r2, [pc, #420]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006696:	f043 0301 	orr.w	r3, r3, #1
 800669a:	6213      	str	r3, [r2, #32]
 800669c:	e00b      	b.n	80066b6 <HAL_RCC_OscConfig+0x36e>
 800669e:	4b67      	ldr	r3, [pc, #412]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	4a66      	ldr	r2, [pc, #408]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	6213      	str	r3, [r2, #32]
 80066aa:	4b64      	ldr	r3, [pc, #400]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	4a63      	ldr	r2, [pc, #396]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80066b0:	f023 0304 	bic.w	r3, r3, #4
 80066b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d015      	beq.n	80066ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066be:	f7fd fbc7 	bl	8003e50 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066c4:	e00a      	b.n	80066dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c6:	f7fd fbc3 	bl	8003e50 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e0ab      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066dc:	4b57      	ldr	r3, [pc, #348]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d0ee      	beq.n	80066c6 <HAL_RCC_OscConfig+0x37e>
 80066e8:	e014      	b.n	8006714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ea:	f7fd fbb1 	bl	8003e50 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f0:	e00a      	b.n	8006708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066f2:	f7fd fbad 	bl	8003e50 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006700:	4293      	cmp	r3, r2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e095      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006708:	4b4c      	ldr	r3, [pc, #304]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1ee      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d105      	bne.n	8006726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800671a:	4b48      	ldr	r3, [pc, #288]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4a47      	ldr	r2, [pc, #284]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8081 	beq.w	8006832 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006730:	4b42      	ldr	r3, [pc, #264]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f003 030c 	and.w	r3, r3, #12
 8006738:	2b08      	cmp	r3, #8
 800673a:	d061      	beq.n	8006800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d146      	bne.n	80067d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006744:	4b3f      	ldr	r3, [pc, #252]	; (8006844 <HAL_RCC_OscConfig+0x4fc>)
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674a:	f7fd fb81 	bl	8003e50 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006752:	f7fd fb7d 	bl	8003e50 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e067      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006764:	4b35      	ldr	r3, [pc, #212]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f0      	bne.n	8006752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d108      	bne.n	800678c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800677a:	4b30      	ldr	r3, [pc, #192]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	492d      	ldr	r1, [pc, #180]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 8006788:	4313      	orrs	r3, r2
 800678a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800678c:	4b2b      	ldr	r3, [pc, #172]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a19      	ldr	r1, [r3, #32]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	430b      	orrs	r3, r1
 800679e:	4927      	ldr	r1, [pc, #156]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <HAL_RCC_OscConfig+0x4fc>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fd fb51 	bl	8003e50 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fd fb4d 	bl	8003e50 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e037      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f0      	beq.n	80067b2 <HAL_RCC_OscConfig+0x46a>
 80067d0:	e02f      	b.n	8006832 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <HAL_RCC_OscConfig+0x4fc>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fd fb3a 	bl	8003e50 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fd fb36 	bl	8003e50 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e020      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067f2:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1f0      	bne.n	80067e0 <HAL_RCC_OscConfig+0x498>
 80067fe:	e018      	b.n	8006832 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e013      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCC_OscConfig+0x4f4>)
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	429a      	cmp	r2, r3
 800681e:	d106      	bne.n	800682e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d001      	beq.n	8006832 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40021000 	.word	0x40021000
 8006840:	40007000 	.word	0x40007000
 8006844:	42420060 	.word	0x42420060

08006848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0d0      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d910      	bls.n	800688c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f023 0207 	bic.w	r2, r3, #7
 8006872:	4965      	ldr	r1, [pc, #404]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800687a:	4b63      	ldr	r3, [pc, #396]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0b8      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068a4:	4b59      	ldr	r3, [pc, #356]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a58      	ldr	r2, [pc, #352]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068bc:	4b53      	ldr	r3, [pc, #332]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	4a52      	ldr	r2, [pc, #328]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c8:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	494d      	ldr	r1, [pc, #308]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d040      	beq.n	8006968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d107      	bne.n	80068fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ee:	4b47      	ldr	r3, [pc, #284]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d115      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e07f      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006906:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e073      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06b      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4936      	ldr	r1, [pc, #216]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006938:	f7fd fa8a 	bl	8003e50 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fd fa86 	bl	8003e50 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e053      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d210      	bcs.n	8006998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b24      	ldr	r3, [pc, #144]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 0207 	bic.w	r2, r3, #7
 800697e:	4922      	ldr	r1, [pc, #136]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e032      	b.n	80069fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d008      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069a4:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	4916      	ldr	r1, [pc, #88]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	490e      	ldr	r1, [pc, #56]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069d6:	f000 f821 	bl	8006a1c <HAL_RCC_GetSysClockFreq>
 80069da:	4601      	mov	r1, r0
 80069dc:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069e8:	5cd3      	ldrb	r3, [r2, r3]
 80069ea:	fa21 f303 	lsr.w	r3, r1, r3
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <HAL_RCC_ClockConfig+0x1cc>)
 80069f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_RCC_ClockConfig+0x1d0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd f9e8 	bl	8003dcc <HAL_InitTick>

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40022000 	.word	0x40022000
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	08009464 	.word	0x08009464
 8006a14:	200000c0 	.word	0x200000c0
 8006a18:	200000c4 	.word	0x200000c4

08006a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a1c:	b490      	push	{r4, r7}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a22:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a24:	1d3c      	adds	r4, r7, #4
 8006a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a2c:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	2300      	movs	r3, #0
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 030c 	and.w	r3, r3, #12
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d002      	beq.n	8006a5c <HAL_RCC_GetSysClockFreq+0x40>
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d003      	beq.n	8006a62 <HAL_RCC_GetSysClockFreq+0x46>
 8006a5a:	e02d      	b.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a5c:	4b1e      	ldr	r3, [pc, #120]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a5e:	623b      	str	r3, [r7, #32]
      break;
 8006a60:	e02d      	b.n	8006abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	0c9b      	lsrs	r3, r3, #18
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a6e:	4413      	add	r3, r2
 8006a70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d013      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	0c5b      	lsrs	r3, r3, #17
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a8e:	4413      	add	r3, r2
 8006a90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4a0f      	ldr	r2, [pc, #60]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a9a:	fb02 f203 	mul.w	r2, r2, r3
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	e004      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	4a0c      	ldr	r2, [pc, #48]	; (8006adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aac:	fb02 f303 	mul.w	r3, r2, r3
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	623b      	str	r3, [r7, #32]
      break;
 8006ab6:	e002      	b.n	8006abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aba:	623b      	str	r3, [r7, #32]
      break;
 8006abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006abe:	6a3b      	ldr	r3, [r7, #32]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	; 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc90      	pop	{r4, r7}
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	0800943c 	.word	0x0800943c
 8006ad0:	0800944c 	.word	0x0800944c
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	007a1200 	.word	0x007a1200
 8006adc:	003d0900 	.word	0x003d0900

08006ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ae4:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr
 8006af0:	200000c0 	.word	0x200000c0

08006af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006af8:	f7ff fff2 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006afc:	4601      	mov	r1, r0
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	4a03      	ldr	r2, [pc, #12]	; (8006b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b0a:	5cd3      	ldrb	r3, [r2, r3]
 8006b0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021000 	.word	0x40021000
 8006b18:	08009474 	.word	0x08009474

08006b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b20:	f7ff ffde 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006b24:	4601      	mov	r1, r0
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	0adb      	lsrs	r3, r3, #11
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	4a03      	ldr	r2, [pc, #12]	; (8006b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b32:	5cd3      	ldrb	r3, [r2, r3]
 8006b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	08009474 	.word	0x08009474

08006b44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <RCC_Delay+0x34>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <RCC_Delay+0x38>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	0a5b      	lsrs	r3, r3, #9
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b60:	bf00      	nop
  }
  while (Delay --);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1e5a      	subs	r2, r3, #1
 8006b66:	60fa      	str	r2, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1f9      	bne.n	8006b60 <RCC_Delay+0x1c>
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	200000c0 	.word	0x200000c0
 8006b7c:	10624dd3 	.word	0x10624dd3

08006b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d07d      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ba0:	4b4f      	ldr	r3, [pc, #316]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10d      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bac:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	4a4b      	ldr	r2, [pc, #300]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	61d3      	str	r3, [r2, #28]
 8006bb8:	4b49      	ldr	r3, [pc, #292]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bba:	69db      	ldr	r3, [r3, #28]
 8006bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bc8:	4b46      	ldr	r3, [pc, #280]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d118      	bne.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bd4:	4b43      	ldr	r3, [pc, #268]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a42      	ldr	r2, [pc, #264]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006be0:	f7fd f936 	bl	8003e50 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006be8:	f7fd f932 	bl	8003e50 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e06d      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfa:	4b3a      	ldr	r3, [pc, #232]	; (8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d02e      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d027      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c2e:	4b2e      	ldr	r3, [pc, #184]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c34:	4b2c      	ldr	r3, [pc, #176]	; (8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c3a:	4a29      	ldr	r2, [pc, #164]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4a:	f7fd f901 	bl	8003e50 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c50:	e00a      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c52:	f7fd f8fd 	bl	8003e50 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e036      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c68:	4b1d      	ldr	r3, [pc, #116]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d0ee      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c74:	4b1a      	ldr	r3, [pc, #104]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4917      	ldr	r1, [pc, #92]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d105      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c8c:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d008      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ca4:	4b0e      	ldr	r3, [pc, #56]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	490b      	ldr	r1, [pc, #44]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	4904      	ldr	r1, [pc, #16]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40021000 	.word	0x40021000
 8006ce4:	40007000 	.word	0x40007000
 8006ce8:	42420440 	.word	0x42420440

08006cec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b08d      	sub	sp, #52	; 0x34
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cf4:	4b55      	ldr	r3, [pc, #340]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006cf6:	f107 040c 	add.w	r4, r7, #12
 8006cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d00:	4b53      	ldr	r3, [pc, #332]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0e:	2300      	movs	r3, #0
 8006d10:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	2300      	movs	r3, #0
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d07f      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d002      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d048      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006d28:	e08b      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d30:	4b48      	ldr	r3, [pc, #288]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d07f      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	0c9b      	lsrs	r3, r3, #18
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d48:	4413      	add	r3, r2
 8006d4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d4e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d018      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d5a:	4b3e      	ldr	r3, [pc, #248]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	0c5b      	lsrs	r3, r3, #17
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006d68:	4413      	add	r3, r2
 8006d6a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006d7a:	4a37      	ldr	r2, [pc, #220]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d8a:	e004      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	4a33      	ldr	r2, [pc, #204]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006d96:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da2:	d102      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006da8:	e048      	b.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006db8:	e040      	b.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8006dba:	4b26      	ldr	r3, [pc, #152]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	d108      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8006dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ddc:	e01f      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d109      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006dea:	4b1a      	ldr	r3, [pc, #104]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8006df6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dfc:	e00f      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e08:	d11a      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006e0a:	4b12      	ldr	r3, [pc, #72]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d014      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8006e16:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e1c:	e010      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006e1e:	e00f      	b.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006e20:	f7ff fe7c 	bl	8006b1c <HAL_RCC_GetPCLK2Freq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	0b9b      	lsrs	r3, r3, #14
 8006e2c:	f003 0303 	and.w	r3, r3, #3
 8006e30:	3301      	adds	r3, #1
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e3a:	e002      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006e40:	bf00      	nop
    }
  }
  return (frequency);
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3734      	adds	r7, #52	; 0x34
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd90      	pop	{r4, r7, pc}
 8006e4c:	08009450 	.word	0x08009450
 8006e50:	08009460 	.word	0x08009460
 8006e54:	40021000 	.word	0x40021000
 8006e58:	007a1200 	.word	0x007a1200
 8006e5c:	003d0900 	.word	0x003d0900
 8006e60:	aaaaaaab 	.word	0xaaaaaaab

08006e64 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e084      	b.n	8006f84 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	7c5b      	ldrb	r3, [r3, #17]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fc fcf6 	bl	800387c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 faf4 	bl	8007484 <HAL_RTC_WaitForSynchro>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e06b      	b.n	8006f84 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbad 	bl	800760c <RTC_EnterInitMode>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e060      	b.n	8006f84 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0207 	bic.w	r2, r2, #7
 8006ed0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_RTC_Init+0x128>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <HAL_RTC_Init+0x128>)
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <HAL_RTC_Init+0x128>)
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	4926      	ldr	r1, [pc, #152]	; (8006f8c <HAL_RTC_Init+0x128>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f00:	d003      	beq.n	8006f0a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e00e      	b.n	8006f28 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f7ff feee 	bl	8006cec <HAL_RCCEx_GetPeriphCLKFreq>
 8006f10:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e030      	b.n	8006f84 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f023 010f 	bic.w	r1, r3, #15
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	0c1a      	lsrs	r2, r3, #16
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	b291      	uxth	r1, r2
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	430b      	orrs	r3, r1
 8006f52:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb81 	bl	800765c <RTC_ExitInitMode>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d004      	beq.n	8006f6a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2204      	movs	r2, #4
 8006f64:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00c      	b.n	8006f84 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006f82:	2300      	movs	r3, #0
  }
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40006c00 	.word	0x40006c00

08006f90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006f90:	b590      	push	{r4, r7, lr}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_RTC_SetTime+0x20>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e080      	b.n	80070b6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7c1b      	ldrb	r3, [r3, #16]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d101      	bne.n	8006fc0 <HAL_RTC_SetTime+0x30>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e07a      	b.n	80070b6 <HAL_RTC_SetTime+0x126>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d113      	bne.n	8006ffa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006fdc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	1a5b      	subs	r3, r3, r1
 8006fec:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006fee:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006ff4:	4413      	add	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e01e      	b.n	8007038 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fb71 	bl	80076e6 <RTC_Bcd2ToByte>
 8007004:	4603      	mov	r3, r0
 8007006:	461a      	mov	r2, r3
 8007008:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800700c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	785b      	ldrb	r3, [r3, #1]
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fb66 	bl	80076e6 <RTC_Bcd2ToByte>
 800701a:	4603      	mov	r3, r0
 800701c:	461a      	mov	r2, r3
 800701e:	4613      	mov	r3, r2
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007026:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	789b      	ldrb	r3, [r3, #2]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 fb5a 	bl	80076e6 <RTC_Bcd2ToByte>
 8007032:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007034:	4423      	add	r3, r4
 8007036:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fa7f 	bl	800753e <RTC_WriteTimeCounter>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2204      	movs	r2, #4
 800704a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e02f      	b.n	80070b6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0205 	bic.w	r2, r2, #5
 8007064:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fa90 	bl	800758c <RTC_ReadAlarmCounter>
 800706c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007074:	d018      	beq.n	80070a8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	429a      	cmp	r2, r3
 800707c:	d214      	bcs.n	80070a8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007084:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007088:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800708a:	6939      	ldr	r1, [r7, #16]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fa96 	bl	80075be <RTC_WriteAlarmCounter>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2204      	movs	r2, #4
 800709c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e006      	b.n	80070b6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}
	...

080070c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	2300      	movs	r3, #0
 80070d2:	61fb      	str	r3, [r7, #28]
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	2300      	movs	r3, #0
 80070da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_RTC_GetTime+0x28>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0b5      	b.n	8007258 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e0ac      	b.n	8007258 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f9ed 	bl	80074de <RTC_ReadTimeCounter>
 8007104:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	4a55      	ldr	r2, [pc, #340]	; (8007260 <HAL_RTC_GetTime+0x1a0>)
 800710a:	fba2 2303 	umull	r2, r3, r2, r3
 800710e:	0adb      	lsrs	r3, r3, #11
 8007110:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4b52      	ldr	r3, [pc, #328]	; (8007260 <HAL_RTC_GetTime+0x1a0>)
 8007116:	fba3 1302 	umull	r1, r3, r3, r2
 800711a:	0adb      	lsrs	r3, r3, #11
 800711c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	4a4f      	ldr	r2, [pc, #316]	; (8007264 <HAL_RTC_GetTime+0x1a4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	b2da      	uxtb	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	4a4a      	ldr	r2, [pc, #296]	; (8007260 <HAL_RTC_GetTime+0x1a0>)
 8007138:	fba2 1203 	umull	r1, r2, r2, r3
 800713c:	0ad2      	lsrs	r2, r2, #11
 800713e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007142:	fb01 f202 	mul.w	r2, r1, r2
 8007146:	1a9a      	subs	r2, r3, r2
 8007148:	4b46      	ldr	r3, [pc, #280]	; (8007264 <HAL_RTC_GetTime+0x1a4>)
 800714a:	fba3 1302 	umull	r1, r3, r3, r2
 800714e:	0959      	lsrs	r1, r3, #5
 8007150:	460b      	mov	r3, r1
 8007152:	011b      	lsls	r3, r3, #4
 8007154:	1a5b      	subs	r3, r3, r1
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	1ad1      	subs	r1, r2, r3
 800715a:	b2ca      	uxtb	r2, r1
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2b17      	cmp	r3, #23
 8007164:	d955      	bls.n	8007212 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4a3f      	ldr	r2, [pc, #252]	; (8007268 <HAL_RTC_GetTime+0x1a8>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	091b      	lsrs	r3, r3, #4
 8007170:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8007172:	6939      	ldr	r1, [r7, #16]
 8007174:	4b3c      	ldr	r3, [pc, #240]	; (8007268 <HAL_RTC_GetTime+0x1a8>)
 8007176:	fba3 2301 	umull	r2, r3, r3, r1
 800717a:	091a      	lsrs	r2, r3, #4
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	1aca      	subs	r2, r1, r3
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 f9fd 	bl	800758c <RTC_ReadAlarmCounter>
 8007192:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800719a:	d008      	beq.n	80071ae <HAL_RTC_GetTime+0xee>
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d904      	bls.n	80071ae <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	61fb      	str	r3, [r7, #28]
 80071ac:	e002      	b.n	80071b4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80071ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071b2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	4a2d      	ldr	r2, [pc, #180]	; (800726c <HAL_RTC_GetTime+0x1ac>)
 80071b8:	fb02 f303 	mul.w	r3, r2, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80071c2:	69b9      	ldr	r1, [r7, #24]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f9ba 	bl	800753e <RTC_WriteTimeCounter>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e041      	b.n	8007258 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071da:	d00c      	beq.n	80071f6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	4413      	add	r3, r2
 80071e2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80071e4:	69f9      	ldr	r1, [r7, #28]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f9e9 	bl	80075be <RTC_WriteAlarmCounter>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e030      	b.n	8007258 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80071f6:	69f9      	ldr	r1, [r7, #28]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f9e0 	bl	80075be <RTC_WriteAlarmCounter>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e027      	b.n	8007258 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007208:	6979      	ldr	r1, [r7, #20]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 fa88 	bl	8007720 <RTC_DateUpdate>
 8007210:	e003      	b.n	800721a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01a      	beq.n	8007256 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fa41 	bl	80076ac <RTC_ByteToBcd2>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	785b      	ldrb	r3, [r3, #1]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fa38 	bl	80076ac <RTC_ByteToBcd2>
 800723c:	4603      	mov	r3, r0
 800723e:	461a      	mov	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	789b      	ldrb	r3, [r3, #2]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fa2f 	bl	80076ac <RTC_ByteToBcd2>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	91a2b3c5 	.word	0x91a2b3c5
 8007264:	88888889 	.word	0x88888889
 8007268:	aaaaaaab 	.word	0xaaaaaaab
 800726c:	00015180 	.word	0x00015180

08007270 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	2300      	movs	r3, #0
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_RTC_SetDate+0x24>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e097      	b.n	80073c8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	7c1b      	ldrb	r3, [r3, #16]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_RTC_SetDate+0x34>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e091      	b.n	80073c8 <HAL_RTC_SetDate+0x158>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10c      	bne.n	80072d0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	78da      	ldrb	r2, [r3, #3]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	785a      	ldrb	r2, [r3, #1]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	789a      	ldrb	r2, [r3, #2]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	739a      	strb	r2, [r3, #14]
 80072ce:	e01a      	b.n	8007306 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	78db      	ldrb	r3, [r3, #3]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fa06 	bl	80076e6 <RTC_Bcd2ToByte>
 80072da:	4603      	mov	r3, r0
 80072dc:	461a      	mov	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 f9fd 	bl	80076e6 <RTC_Bcd2ToByte>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 f9f4 	bl	80076e6 <RTC_Bcd2ToByte>
 80072fe:	4603      	mov	r3, r0
 8007300:	461a      	mov	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	7bdb      	ldrb	r3, [r3, #15]
 800730a:	4618      	mov	r0, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	7b59      	ldrb	r1, [r3, #13]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	7b9b      	ldrb	r3, [r3, #14]
 8007314:	461a      	mov	r2, r3
 8007316:	f000 fadf 	bl	80078d8 <RTC_WeekDayNum>
 800731a:	4603      	mov	r3, r0
 800731c:	461a      	mov	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	7b1a      	ldrb	r2, [r3, #12]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f8d7 	bl	80074de <RTC_ReadTimeCounter>
 8007330:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <HAL_RTC_SetDate+0x160>)
 8007336:	fba2 2303 	umull	r2, r3, r2, r3
 800733a:	0adb      	lsrs	r3, r3, #11
 800733c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b18      	cmp	r3, #24
 8007342:	d93a      	bls.n	80073ba <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <HAL_RTC_SetDate+0x164>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	091b      	lsrs	r3, r3, #4
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_RTC_SetDate+0x168>)
 8007350:	fb02 f303 	mul.w	r3, r2, r3
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800735a:	69f9      	ldr	r1, [r7, #28]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 f8ee 	bl	800753e <RTC_WriteTimeCounter>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2204      	movs	r2, #4
 800736c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e027      	b.n	80073c8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f907 	bl	800758c <RTC_ReadAlarmCounter>
 800737e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007386:	d018      	beq.n	80073ba <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	429a      	cmp	r2, r3
 800738e:	d214      	bcs.n	80073ba <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007396:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800739a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800739c:	69b9      	ldr	r1, [r7, #24]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 f90d 	bl	80075be <RTC_WriteAlarmCounter>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2204      	movs	r2, #4
 80073ae:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e006      	b.n	80073c8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2201      	movs	r2, #1
 80073be:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3720      	adds	r7, #32
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	91a2b3c5 	.word	0x91a2b3c5
 80073d4:	aaaaaaab 	.word	0xaaaaaaab
 80073d8:	00015180 	.word	0x00015180

080073dc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	2100      	movs	r1, #0
 80073ee:	460a      	mov	r2, r1
 80073f0:	801a      	strh	r2, [r3, #0]
 80073f2:	460a      	mov	r2, r1
 80073f4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <HAL_RTC_GetDate+0x26>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e03a      	b.n	800747c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007406:	f107 0314 	add.w	r3, r7, #20
 800740a:	2200      	movs	r2, #0
 800740c:	4619      	mov	r1, r3
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff fe56 	bl	80070c0 <HAL_RTC_GetTime>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e02e      	b.n	800747c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	7b1a      	ldrb	r2, [r3, #12]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	7bda      	ldrb	r2, [r3, #15]
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	7b5a      	ldrb	r2, [r3, #13]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	7b9a      	ldrb	r2, [r3, #14]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01a      	beq.n	800747a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	78db      	ldrb	r3, [r3, #3]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f92f 	bl	80076ac <RTC_ByteToBcd2>
 800744e:	4603      	mov	r3, r0
 8007450:	461a      	mov	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	785b      	ldrb	r3, [r3, #1]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f926 	bl	80076ac <RTC_ByteToBcd2>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	789b      	ldrb	r3, [r3, #2]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f91d 	bl	80076ac <RTC_ByteToBcd2>
 8007472:	4603      	mov	r3, r0
 8007474:	461a      	mov	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e01d      	b.n	80074d6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0208 	bic.w	r2, r2, #8
 80074a8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80074aa:	f7fc fcd1 	bl	8003e50 <HAL_GetTick>
 80074ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80074b0:	e009      	b.n	80074c6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80074b2:	f7fc fccd 	bl	8003e50 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074c0:	d901      	bls.n	80074c6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e007      	b.n	80074d6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d0ee      	beq.n	80074b2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	827b      	strh	r3, [r7, #18]
 80074ea:	2300      	movs	r3, #0
 80074ec:	823b      	strh	r3, [r7, #16]
 80074ee:	2300      	movs	r3, #0
 80074f0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800750e:	8a7a      	ldrh	r2, [r7, #18]
 8007510:	8a3b      	ldrh	r3, [r7, #16]
 8007512:	429a      	cmp	r2, r3
 8007514:	d008      	beq.n	8007528 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007516:	8a3b      	ldrh	r3, [r7, #16]
 8007518:	041a      	lsls	r2, r3, #16
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	b29b      	uxth	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e004      	b.n	8007532 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007528:	8a7b      	ldrh	r3, [r7, #18]
 800752a:	041a      	lsls	r2, r3, #16
 800752c:	89fb      	ldrh	r3, [r7, #14]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007532:	697b      	ldr	r3, [r7, #20]
}
 8007534:	4618      	mov	r0, r3
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	bc80      	pop	{r7}
 800753c:	4770      	bx	lr

0800753e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f85d 	bl	800760c <RTC_EnterInitMode>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e011      	b.n	8007582 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	0c12      	lsrs	r2, r2, #16
 8007566:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	b292      	uxth	r2, r2
 8007570:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f872 	bl	800765c <RTC_ExitInitMode>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	81fb      	strh	r3, [r7, #14]
 8007598:	2300      	movs	r3, #0
 800759a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	041a      	lsls	r2, r3, #16
 80075b0:	89bb      	ldrh	r3, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f81d 	bl	800760c <RTC_EnterInitMode>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
 80075dc:	e011      	b.n	8007602 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	0c12      	lsrs	r2, r2, #16
 80075e6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	b292      	uxth	r2, r2
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f832 	bl	800765c <RTC_ExitInitMode>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007618:	f7fc fc1a 	bl	8003e50 <HAL_GetTick>
 800761c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800761e:	e009      	b.n	8007634 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007620:	f7fc fc16 	bl	8003e50 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800762e:	d901      	bls.n	8007634 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e00f      	b.n	8007654 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0ee      	beq.n	8007620 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0210 	orr.w	r2, r2, #16
 8007650:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0210 	bic.w	r2, r2, #16
 8007676:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007678:	f7fc fbea 	bl	8003e50 <HAL_GetTick>
 800767c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800767e:	e009      	b.n	8007694 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007680:	f7fc fbe6 	bl	8003e50 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800768e:	d901      	bls.n	8007694 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e007      	b.n	80076a4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f003 0320 	and.w	r3, r3, #32
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0ee      	beq.n	8007680 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80076ba:	e005      	b.n	80076c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	3b0a      	subs	r3, #10
 80076c6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d8f6      	bhi.n	80076bc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	4313      	orrs	r3, r2
 80076da:	b2db      	uxtb	r3, r3
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr

080076e6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	4603      	mov	r3, r0
 80076ee:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80076f4:	79fb      	ldrb	r3, [r7, #7]
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	b2db      	uxtb	r3, r3
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	bc80      	pop	{r7}
 800771e:	4770      	bx	lr

08007720 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7bdb      	ldrb	r3, [r3, #15]
 800773e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7b5b      	ldrb	r3, [r3, #13]
 8007744:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7b9b      	ldrb	r3, [r3, #14]
 800774a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800774c:	2300      	movs	r3, #0
 800774e:	60bb      	str	r3, [r7, #8]
 8007750:	e06f      	b.n	8007832 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d011      	beq.n	800777c <RTC_DateUpdate+0x5c>
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d00e      	beq.n	800777c <RTC_DateUpdate+0x5c>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b05      	cmp	r3, #5
 8007762:	d00b      	beq.n	800777c <RTC_DateUpdate+0x5c>
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b07      	cmp	r3, #7
 8007768:	d008      	beq.n	800777c <RTC_DateUpdate+0x5c>
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b08      	cmp	r3, #8
 800776e:	d005      	beq.n	800777c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b0a      	cmp	r3, #10
 8007774:	d002      	beq.n	800777c <RTC_DateUpdate+0x5c>
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	2b0c      	cmp	r3, #12
 800777a:	d117      	bne.n	80077ac <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b1e      	cmp	r3, #30
 8007780:	d803      	bhi.n	800778a <RTC_DateUpdate+0x6a>
      {
        day++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007788:	e050      	b.n	800782c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b0c      	cmp	r3, #12
 800778e:	d005      	beq.n	800779c <RTC_DateUpdate+0x7c>
        {
          month++;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	3301      	adds	r3, #1
 8007794:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007796:	2301      	movs	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800779a:	e047      	b.n	800782c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800779c:	2301      	movs	r3, #1
 800779e:	613b      	str	r3, [r7, #16]
          day = 1U;
 80077a0:	2301      	movs	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
          year++;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	3301      	adds	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80077aa:	e03f      	b.n	800782c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d008      	beq.n	80077c4 <RTC_DateUpdate+0xa4>
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b06      	cmp	r3, #6
 80077b6:	d005      	beq.n	80077c4 <RTC_DateUpdate+0xa4>
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	d002      	beq.n	80077c4 <RTC_DateUpdate+0xa4>
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	2b0b      	cmp	r3, #11
 80077c2:	d10c      	bne.n	80077de <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b1d      	cmp	r3, #29
 80077c8:	d803      	bhi.n	80077d2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80077d0:	e02c      	b.n	800782c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	3301      	adds	r3, #1
 80077d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80077dc:	e026      	b.n	800782c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d123      	bne.n	800782c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b1b      	cmp	r3, #27
 80077e8:	d803      	bhi.n	80077f2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e01c      	b.n	800782c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b1c      	cmp	r3, #28
 80077f6:	d111      	bne.n	800781c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 f839 	bl	8007874 <RTC_IsLeapYear>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <RTC_DateUpdate+0xf0>
        {
          day++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	e00d      	b.n	800782c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	3301      	adds	r3, #1
 8007814:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007816:	2301      	movs	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	e007      	b.n	800782c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b1d      	cmp	r3, #29
 8007820:	d104      	bne.n	800782c <RTC_DateUpdate+0x10c>
      {
        month++;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3301      	adds	r3, #1
 8007826:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007828:	2301      	movs	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3301      	adds	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d38b      	bcc.n	8007752 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	b2da      	uxtb	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	4619      	mov	r1, r3
 800785c:	6978      	ldr	r0, [r7, #20]
 800785e:	f000 f83b 	bl	80078d8 <RTC_WeekDayNum>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	731a      	strb	r2, [r3, #12]
}
 800786a:	bf00      	nop
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800787e:	88fb      	ldrh	r3, [r7, #6]
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	e01d      	b.n	80078ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	4a10      	ldr	r2, [pc, #64]	; (80078d4 <RTC_IsLeapYear+0x60>)
 8007892:	fba2 1203 	umull	r1, r2, r2, r3
 8007896:	0952      	lsrs	r2, r2, #5
 8007898:	2164      	movs	r1, #100	; 0x64
 800789a:	fb01 f202 	mul.w	r2, r1, r2
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e00f      	b.n	80078ca <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <RTC_IsLeapYear+0x60>)
 80078ae:	fba2 1203 	umull	r1, r2, r2, r3
 80078b2:	09d2      	lsrs	r2, r2, #7
 80078b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80078b8:	fb01 f202 	mul.w	r2, r1, r2
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	b29b      	uxth	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80078c8:	2300      	movs	r3, #0
  }
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr
 80078d4:	51eb851f 	.word	0x51eb851f

080078d8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	460b      	mov	r3, r1
 80078e2:	70fb      	strb	r3, [r7, #3]
 80078e4:	4613      	mov	r3, r2
 80078e6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	60bb      	str	r3, [r7, #8]
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80078f6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d82d      	bhi.n	800795a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80078fe:	78fa      	ldrb	r2, [r7, #3]
 8007900:	4613      	mov	r3, r2
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	4a2c      	ldr	r2, [pc, #176]	; (80079bc <RTC_WeekDayNum+0xe4>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	085a      	lsrs	r2, r3, #1
 8007912:	78bb      	ldrb	r3, [r7, #2]
 8007914:	441a      	add	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	441a      	add	r2, r3
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	3b01      	subs	r3, #1
 800791e:	089b      	lsrs	r3, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	3b01      	subs	r3, #1
 8007926:	4926      	ldr	r1, [pc, #152]	; (80079c0 <RTC_WeekDayNum+0xe8>)
 8007928:	fba1 1303 	umull	r1, r3, r1, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	4922      	ldr	r1, [pc, #136]	; (80079c0 <RTC_WeekDayNum+0xe8>)
 8007936:	fba1 1303 	umull	r1, r3, r1, r3
 800793a:	09db      	lsrs	r3, r3, #7
 800793c:	4413      	add	r3, r2
 800793e:	1d1a      	adds	r2, r3, #4
 8007940:	4b20      	ldr	r3, [pc, #128]	; (80079c4 <RTC_WeekDayNum+0xec>)
 8007942:	fba3 1302 	umull	r1, r3, r3, r2
 8007946:	1ad1      	subs	r1, r2, r3
 8007948:	0849      	lsrs	r1, r1, #1
 800794a:	440b      	add	r3, r1
 800794c:	0899      	lsrs	r1, r3, #2
 800794e:	460b      	mov	r3, r1
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	1a5b      	subs	r3, r3, r1
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e029      	b.n	80079ae <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800795a:	78fa      	ldrb	r2, [r7, #3]
 800795c:	4613      	mov	r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4413      	add	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	4a15      	ldr	r2, [pc, #84]	; (80079bc <RTC_WeekDayNum+0xe4>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	085a      	lsrs	r2, r3, #1
 800796e:	78bb      	ldrb	r3, [r7, #2]
 8007970:	441a      	add	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	441a      	add	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	089b      	lsrs	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4910      	ldr	r1, [pc, #64]	; (80079c0 <RTC_WeekDayNum+0xe8>)
 8007980:	fba1 1303 	umull	r1, r3, r1, r3
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	1ad2      	subs	r2, r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	490d      	ldr	r1, [pc, #52]	; (80079c0 <RTC_WeekDayNum+0xe8>)
 800798c:	fba1 1303 	umull	r1, r3, r1, r3
 8007990:	09db      	lsrs	r3, r3, #7
 8007992:	4413      	add	r3, r2
 8007994:	1c9a      	adds	r2, r3, #2
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <RTC_WeekDayNum+0xec>)
 8007998:	fba3 1302 	umull	r1, r3, r3, r2
 800799c:	1ad1      	subs	r1, r2, r3
 800799e:	0849      	lsrs	r1, r1, #1
 80079a0:	440b      	add	r3, r1
 80079a2:	0899      	lsrs	r1, r3, #2
 80079a4:	460b      	mov	r3, r1
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	1a5b      	subs	r3, r3, r1
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	b2db      	uxtb	r3, r3
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bc80      	pop	{r7}
 80079ba:	4770      	bx	lr
 80079bc:	38e38e39 	.word	0x38e38e39
 80079c0:	51eb851f 	.word	0x51eb851f
 80079c4:	24924925 	.word	0x24924925

080079c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e053      	b.n	8007a82 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fb ff9b 	bl	8003930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	ea42 0103 	orr.w	r1, r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	0c1a      	lsrs	r2, r3, #16
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f002 0204 	and.w	r2, r2, #4
 8007a60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69da      	ldr	r2, [r3, #28]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e01d      	b.n	8007ad8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7fc f8ad 	bl	8003c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4610      	mov	r0, r2
 8007aca:	f000 fa0f 	bl	8007eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d007      	beq.n	8007b1a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bc80      	pop	{r7}
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d122      	bne.n	8007b82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d11b      	bne.n	8007b82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f06f 0202 	mvn.w	r2, #2
 8007b52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d003      	beq.n	8007b70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9a4 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007b6e:	e005      	b.n	8007b7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f997 	bl	8007ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f9a6 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d122      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f003 0304 	and.w	r3, r3, #4
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d11b      	bne.n	8007bd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f06f 0204 	mvn.w	r2, #4
 8007ba6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f97a 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007bc2:	e005      	b.n	8007bd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f96d 	bl	8007ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f97c 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d122      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d11b      	bne.n	8007c2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f06f 0208 	mvn.w	r2, #8
 8007bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2204      	movs	r2, #4
 8007c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f950 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007c16:	e005      	b.n	8007c24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f943 	bl	8007ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f952 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d122      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d11b      	bne.n	8007c7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f06f 0210 	mvn.w	r2, #16
 8007c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2208      	movs	r2, #8
 8007c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f926 	bl	8007eb6 <HAL_TIM_IC_CaptureCallback>
 8007c6a:	e005      	b.n	8007c78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f919 	bl	8007ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f928 	bl	8007ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d10e      	bne.n	8007caa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d107      	bne.n	8007caa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f06f 0201 	mvn.w	r2, #1
 8007ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7f9 fe97 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d10e      	bne.n	8007cd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	2b80      	cmp	r3, #128	; 0x80
 8007cc4:	d107      	bne.n	8007cd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa50 	bl	8008176 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d10e      	bne.n	8007d02 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d107      	bne.n	8007d02 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f8ec 	bl	8007eda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d10e      	bne.n	8007d2e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d107      	bne.n	8007d2e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f06f 0220 	mvn.w	r2, #32
 8007d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa1b 	bl	8008164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_TIM_ConfigClockSource+0x18>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e0a6      	b.n	8007e9c <HAL_TIM_ConfigClockSource+0x166>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d6c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d74:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b40      	cmp	r3, #64	; 0x40
 8007d84:	d067      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x120>
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d80b      	bhi.n	8007da2 <HAL_TIM_ConfigClockSource+0x6c>
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d073      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x140>
 8007d8e:	2b10      	cmp	r3, #16
 8007d90:	d802      	bhi.n	8007d98 <HAL_TIM_ConfigClockSource+0x62>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d06f      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d96:	e078      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d06c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x140>
 8007d9c:	2b30      	cmp	r3, #48	; 0x30
 8007d9e:	d06a      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007da0:	e073      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007da2:	2b70      	cmp	r3, #112	; 0x70
 8007da4:	d00d      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0x8c>
 8007da6:	2b70      	cmp	r3, #112	; 0x70
 8007da8:	d804      	bhi.n	8007db4 <HAL_TIM_ConfigClockSource+0x7e>
 8007daa:	2b50      	cmp	r3, #80	; 0x50
 8007dac:	d033      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0xe0>
 8007dae:	2b60      	cmp	r3, #96	; 0x60
 8007db0:	d041      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007db2:	e06a      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db8:	d066      	beq.n	8007e88 <HAL_TIM_ConfigClockSource+0x152>
 8007dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dbe:	d017      	beq.n	8007df0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007dc0:	e063      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6899      	ldr	r1, [r3, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f000 f964 	bl	800809e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	609a      	str	r2, [r3, #8]
      break;
 8007dee:	e04c      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6899      	ldr	r1, [r3, #8]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f000 f94d 	bl	800809e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e12:	609a      	str	r2, [r3, #8]
      break;
 8007e14:	e039      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f000 f8c4 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2150      	movs	r1, #80	; 0x50
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f91b 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 8007e34:	e029      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 f8e2 	bl	800800c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2160      	movs	r1, #96	; 0x60
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f90b 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 8007e54:	e019      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f000 f8a4 	bl	8007fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f8fb 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 8007e74:	e009      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f000 f8f2 	bl	800806a <TIM_ITRx_SetConfig>
      break;
 8007e86:	e000      	b.n	8007e8a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bc80      	pop	{r7}
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a29      	ldr	r2, [pc, #164]	; (8007fa4 <TIM_Base_SetConfig+0xb8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0x30>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0x30>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <TIM_Base_SetConfig+0xbc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0x30>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a25      	ldr	r2, [pc, #148]	; (8007fac <TIM_Base_SetConfig+0xc0>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d108      	bne.n	8007f2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <TIM_Base_SetConfig+0xb8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00b      	beq.n	8007f4e <TIM_Base_SetConfig+0x62>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3c:	d007      	beq.n	8007f4e <TIM_Base_SetConfig+0x62>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a19      	ldr	r2, [pc, #100]	; (8007fa8 <TIM_Base_SetConfig+0xbc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d003      	beq.n	8007f4e <TIM_Base_SetConfig+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a18      	ldr	r2, [pc, #96]	; (8007fac <TIM_Base_SetConfig+0xc0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d108      	bne.n	8007f60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a07      	ldr	r2, [pc, #28]	; (8007fa4 <TIM_Base_SetConfig+0xb8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d103      	bne.n	8007f94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	615a      	str	r2, [r3, #20]
}
 8007f9a:	bf00      	nop
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800

08007fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0201 	bic.w	r2, r3, #1
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f023 030a 	bic.w	r3, r3, #10
 8007fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	621a      	str	r2, [r3, #32]
}
 8008002:	bf00      	nop
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	f023 0210 	bic.w	r2, r3, #16
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008036:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	031b      	lsls	r3, r3, #12
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008048:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	011b      	lsls	r3, r3, #4
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	621a      	str	r2, [r3, #32]
}
 8008060:	bf00      	nop
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800806a:	b480      	push	{r7}
 800806c:	b085      	sub	sp, #20
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
 8008072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	f043 0307 	orr.w	r3, r3, #7
 800808c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	609a      	str	r2, [r3, #8]
}
 8008094:	bf00      	nop
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr

0800809e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800809e:	b480      	push	{r7}
 80080a0:	b087      	sub	sp, #28
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	021a      	lsls	r2, r3, #8
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	431a      	orrs	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	609a      	str	r2, [r3, #8]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e032      	b.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	4313      	orrs	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	bc80      	pop	{r7}
 8008186:	4770      	bx	lr

08008188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e03f      	b.n	800821a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d106      	bne.n	80081b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fb fd7c 	bl	8003cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2224      	movs	r2, #36	; 0x24
 80081b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fa5f 	bl	8008690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695a      	ldr	r2, [r3, #20]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008244:	2300      	movs	r3, #0
 8008246:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10d      	bne.n	8008276 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_UART_IRQHandler+0x52>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f98d 	bl	800858e <UART_Receive_IT>
      return;
 8008274:	e0cc      	b.n	8008410 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80ab 	beq.w	80083d4 <HAL_UART_IRQHandler+0x1b0>
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d105      	bne.n	8008294 <HAL_UART_IRQHandler+0x70>
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80a0 	beq.w	80083d4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <HAL_UART_IRQHandler+0x90>
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ac:	f043 0201 	orr.w	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <HAL_UART_IRQHandler+0xb0>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082cc:	f043 0202 	orr.w	r2, r3, #2
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <HAL_UART_IRQHandler+0xd0>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ec:	f043 0204 	orr.w	r2, r3, #4
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00a      	beq.n	8008314 <HAL_UART_IRQHandler+0xf0>
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830c:	f043 0208 	orr.w	r2, r3, #8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d078      	beq.n	800840e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <HAL_UART_IRQHandler+0x112>
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f92c 	bl	800858e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	bf14      	ite	ne
 8008344:	2301      	movne	r3, #1
 8008346:	2300      	moveq	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <HAL_UART_IRQHandler+0x13a>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d031      	beq.n	80083c2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f877 	bl	8008452 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d023      	beq.n	80083ba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	695a      	ldr	r2, [r3, #20]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008380:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	2b00      	cmp	r3, #0
 8008388:	d013      	beq.n	80083b2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838e:	4a22      	ldr	r2, [pc, #136]	; (8008418 <HAL_UART_IRQHandler+0x1f4>)
 8008390:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008396:	4618      	mov	r0, r3
 8008398:	f7fc f9aa 	bl	80046f0 <HAL_DMA_Abort_IT>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d016      	beq.n	80083d0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	e00e      	b.n	80083d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f844 	bl	8008440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b8:	e00a      	b.n	80083d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f840 	bl	8008440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c0:	e006      	b.n	80083d0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f83c 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80083ce:	e01e      	b.n	800840e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d0:	bf00      	nop
    return;
 80083d2:	e01c      	b.n	800840e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d008      	beq.n	80083f0 <HAL_UART_IRQHandler+0x1cc>
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f863 	bl	80084b4 <UART_Transmit_IT>
    return;
 80083ee:	e00f      	b.n	8008410 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00a      	beq.n	8008410 <HAL_UART_IRQHandler+0x1ec>
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f8aa 	bl	800855e <UART_EndTransmit_IT>
    return;
 800840a:	bf00      	nop
 800840c:	e000      	b.n	8008410 <HAL_UART_IRQHandler+0x1ec>
    return;
 800840e:	bf00      	nop
  }
}
 8008410:	3720      	adds	r7, #32
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	0800848d 	.word	0x0800848d

0800841c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	bc80      	pop	{r7}
 800842c:	4770      	bx	lr

0800842e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr

08008440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008468:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	695a      	ldr	r2, [r3, #20]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2220      	movs	r2, #32
 800847e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	bc80      	pop	{r7}
 800848a:	4770      	bx	lr

0800848c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ffca 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b21      	cmp	r3, #33	; 0x21
 80084c6:	d144      	bne.n	8008552 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d0:	d11a      	bne.n	8008508 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	461a      	mov	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d105      	bne.n	80084fc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	1c9a      	adds	r2, r3, #2
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	621a      	str	r2, [r3, #32]
 80084fa:	e00e      	b.n	800851a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	621a      	str	r2, [r3, #32]
 8008506:	e008      	b.n	800851a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	1c59      	adds	r1, r3, #1
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6211      	str	r1, [r2, #32]
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29b      	uxth	r3, r3
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	4619      	mov	r1, r3
 8008528:	84d1      	strh	r1, [r2, #38]	; 0x26
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10f      	bne.n	800854e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800853c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800854c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800854e:	2300      	movs	r3, #0
 8008550:	e000      	b.n	8008554 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008552:	2302      	movs	r3, #2
  }
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr

0800855e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008574:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ff4c 	bl	800841c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b22      	cmp	r3, #34	; 0x22
 80085a0:	d171      	bne.n	8008686 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085aa:	d123      	bne.n	80085f4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10e      	bne.n	80085d8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	1c9a      	adds	r2, r3, #2
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	629a      	str	r2, [r3, #40]	; 0x28
 80085d6:	e029      	b.n	800862c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	629a      	str	r2, [r3, #40]	; 0x28
 80085f2:	e01b      	b.n	800862c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6858      	ldr	r0, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008606:	1c59      	adds	r1, r3, #1
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6291      	str	r1, [r2, #40]	; 0x28
 800860c:	b2c2      	uxtb	r2, r0
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	e00c      	b.n	800862c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	1c58      	adds	r0, r3, #1
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	6288      	str	r0, [r1, #40]	; 0x28
 8008624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008628:	b2d2      	uxtb	r2, r2
 800862a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008630:	b29b      	uxth	r3, r3
 8008632:	3b01      	subs	r3, #1
 8008634:	b29b      	uxth	r3, r3
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	4619      	mov	r1, r3
 800863a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800863c:	2b00      	cmp	r3, #0
 800863e:	d120      	bne.n	8008682 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0220 	bic.w	r2, r2, #32
 800864e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800865e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695a      	ldr	r2, [r3, #20]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fed8 	bl	800842e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e002      	b.n	8008688 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e000      	b.n	8008688 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008686:	2302      	movs	r3, #2
  }
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689a      	ldr	r2, [r3, #8]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80086ca:	f023 030c 	bic.w	r3, r3, #12
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	430b      	orrs	r3, r1
 80086d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a52      	ldr	r2, [pc, #328]	; (800883c <UART_SetConfig+0x1ac>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d14e      	bne.n	8008796 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086f8:	f7fe fa10 	bl	8006b1c <HAL_RCC_GetPCLK2Freq>
 80086fc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009a      	lsls	r2, r3, #2
 8008708:	441a      	add	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	fbb2 f3f3 	udiv	r3, r2, r3
 8008714:	4a4a      	ldr	r2, [pc, #296]	; (8008840 <UART_SetConfig+0x1b0>)
 8008716:	fba2 2303 	umull	r2, r3, r2, r3
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	0119      	lsls	r1, r3, #4
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009a      	lsls	r2, r3, #2
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	fbb2 f2f3 	udiv	r2, r2, r3
 8008734:	4b42      	ldr	r3, [pc, #264]	; (8008840 <UART_SetConfig+0x1b0>)
 8008736:	fba3 0302 	umull	r0, r3, r3, r2
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	2064      	movs	r0, #100	; 0x64
 800873e:	fb00 f303 	mul.w	r3, r0, r3
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	3332      	adds	r3, #50	; 0x32
 8008748:	4a3d      	ldr	r2, [pc, #244]	; (8008840 <UART_SetConfig+0x1b0>)
 800874a:	fba2 2303 	umull	r2, r3, r2, r3
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008754:	4419      	add	r1, r3
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	009a      	lsls	r2, r3, #2
 8008760:	441a      	add	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	fbb2 f2f3 	udiv	r2, r2, r3
 800876c:	4b34      	ldr	r3, [pc, #208]	; (8008840 <UART_SetConfig+0x1b0>)
 800876e:	fba3 0302 	umull	r0, r3, r3, r2
 8008772:	095b      	lsrs	r3, r3, #5
 8008774:	2064      	movs	r0, #100	; 0x64
 8008776:	fb00 f303 	mul.w	r3, r0, r3
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	011b      	lsls	r3, r3, #4
 800877e:	3332      	adds	r3, #50	; 0x32
 8008780:	4a2f      	ldr	r2, [pc, #188]	; (8008840 <UART_SetConfig+0x1b0>)
 8008782:	fba2 2303 	umull	r2, r3, r2, r3
 8008786:	095b      	lsrs	r3, r3, #5
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	440a      	add	r2, r1
 8008792:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008794:	e04d      	b.n	8008832 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008796:	f7fe f9ad 	bl	8006af4 <HAL_RCC_GetPCLK1Freq>
 800879a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009a      	lsls	r2, r3, #2
 80087a6:	441a      	add	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b2:	4a23      	ldr	r2, [pc, #140]	; (8008840 <UART_SetConfig+0x1b0>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	0119      	lsls	r1, r3, #4
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009a      	lsls	r2, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <UART_SetConfig+0x1b0>)
 80087d4:	fba3 0302 	umull	r0, r3, r3, r2
 80087d8:	095b      	lsrs	r3, r3, #5
 80087da:	2064      	movs	r0, #100	; 0x64
 80087dc:	fb00 f303 	mul.w	r3, r0, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	3332      	adds	r3, #50	; 0x32
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <UART_SetConfig+0x1b0>)
 80087e8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ec:	095b      	lsrs	r3, r3, #5
 80087ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f2:	4419      	add	r1, r3
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009a      	lsls	r2, r3, #2
 80087fe:	441a      	add	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	fbb2 f2f3 	udiv	r2, r2, r3
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <UART_SetConfig+0x1b0>)
 800880c:	fba3 0302 	umull	r0, r3, r3, r2
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	2064      	movs	r0, #100	; 0x64
 8008814:	fb00 f303 	mul.w	r3, r0, r3
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	3332      	adds	r3, #50	; 0x32
 800881e:	4a08      	ldr	r2, [pc, #32]	; (8008840 <UART_SetConfig+0x1b0>)
 8008820:	fba2 2303 	umull	r2, r3, r2, r3
 8008824:	095b      	lsrs	r3, r3, #5
 8008826:	f003 020f 	and.w	r2, r3, #15
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	440a      	add	r2, r1
 8008830:	609a      	str	r2, [r3, #8]
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40013800 	.word	0x40013800
 8008840:	51eb851f 	.word	0x51eb851f

08008844 <__errno>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <__errno+0x8>)
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	200000cc 	.word	0x200000cc

08008850 <__libc_init_array>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	2500      	movs	r5, #0
 8008854:	4e0c      	ldr	r6, [pc, #48]	; (8008888 <__libc_init_array+0x38>)
 8008856:	4c0d      	ldr	r4, [pc, #52]	; (800888c <__libc_init_array+0x3c>)
 8008858:	1ba4      	subs	r4, r4, r6
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	42a5      	cmp	r5, r4
 800885e:	d109      	bne.n	8008874 <__libc_init_array+0x24>
 8008860:	f000 fc34 	bl	80090cc <_init>
 8008864:	2500      	movs	r5, #0
 8008866:	4e0a      	ldr	r6, [pc, #40]	; (8008890 <__libc_init_array+0x40>)
 8008868:	4c0a      	ldr	r4, [pc, #40]	; (8008894 <__libc_init_array+0x44>)
 800886a:	1ba4      	subs	r4, r4, r6
 800886c:	10a4      	asrs	r4, r4, #2
 800886e:	42a5      	cmp	r5, r4
 8008870:	d105      	bne.n	800887e <__libc_init_array+0x2e>
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008878:	4798      	blx	r3
 800887a:	3501      	adds	r5, #1
 800887c:	e7ee      	b.n	800885c <__libc_init_array+0xc>
 800887e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008882:	4798      	blx	r3
 8008884:	3501      	adds	r5, #1
 8008886:	e7f2      	b.n	800886e <__libc_init_array+0x1e>
 8008888:	080094b0 	.word	0x080094b0
 800888c:	080094b0 	.word	0x080094b0
 8008890:	080094b0 	.word	0x080094b0
 8008894:	080094b4 	.word	0x080094b4

08008898 <memset>:
 8008898:	4603      	mov	r3, r0
 800889a:	4402      	add	r2, r0
 800889c:	4293      	cmp	r3, r2
 800889e:	d100      	bne.n	80088a2 <memset+0xa>
 80088a0:	4770      	bx	lr
 80088a2:	f803 1b01 	strb.w	r1, [r3], #1
 80088a6:	e7f9      	b.n	800889c <memset+0x4>

080088a8 <siprintf>:
 80088a8:	b40e      	push	{r1, r2, r3}
 80088aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088ae:	b500      	push	{lr}
 80088b0:	b09c      	sub	sp, #112	; 0x70
 80088b2:	ab1d      	add	r3, sp, #116	; 0x74
 80088b4:	9002      	str	r0, [sp, #8]
 80088b6:	9006      	str	r0, [sp, #24]
 80088b8:	9107      	str	r1, [sp, #28]
 80088ba:	9104      	str	r1, [sp, #16]
 80088bc:	4808      	ldr	r0, [pc, #32]	; (80088e0 <siprintf+0x38>)
 80088be:	4909      	ldr	r1, [pc, #36]	; (80088e4 <siprintf+0x3c>)
 80088c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c4:	9105      	str	r1, [sp, #20]
 80088c6:	6800      	ldr	r0, [r0, #0]
 80088c8:	a902      	add	r1, sp, #8
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	f000 f866 	bl	800899c <_svfiprintf_r>
 80088d0:	2200      	movs	r2, #0
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	701a      	strb	r2, [r3, #0]
 80088d6:	b01c      	add	sp, #112	; 0x70
 80088d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088dc:	b003      	add	sp, #12
 80088de:	4770      	bx	lr
 80088e0:	200000cc 	.word	0x200000cc
 80088e4:	ffff0208 	.word	0xffff0208

080088e8 <__ssputs_r>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	688e      	ldr	r6, [r1, #8]
 80088ee:	4682      	mov	sl, r0
 80088f0:	429e      	cmp	r6, r3
 80088f2:	460c      	mov	r4, r1
 80088f4:	4690      	mov	r8, r2
 80088f6:	4699      	mov	r9, r3
 80088f8:	d837      	bhi.n	800896a <__ssputs_r+0x82>
 80088fa:	898a      	ldrh	r2, [r1, #12]
 80088fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008900:	d031      	beq.n	8008966 <__ssputs_r+0x7e>
 8008902:	2302      	movs	r3, #2
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	6909      	ldr	r1, [r1, #16]
 8008908:	1a6f      	subs	r7, r5, r1
 800890a:	6965      	ldr	r5, [r4, #20]
 800890c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008910:	fb95 f5f3 	sdiv	r5, r5, r3
 8008914:	f109 0301 	add.w	r3, r9, #1
 8008918:	443b      	add	r3, r7
 800891a:	429d      	cmp	r5, r3
 800891c:	bf38      	it	cc
 800891e:	461d      	movcc	r5, r3
 8008920:	0553      	lsls	r3, r2, #21
 8008922:	d530      	bpl.n	8008986 <__ssputs_r+0x9e>
 8008924:	4629      	mov	r1, r5
 8008926:	f000 fb37 	bl	8008f98 <_malloc_r>
 800892a:	4606      	mov	r6, r0
 800892c:	b950      	cbnz	r0, 8008944 <__ssputs_r+0x5c>
 800892e:	230c      	movs	r3, #12
 8008930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008934:	f8ca 3000 	str.w	r3, [sl]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008944:	463a      	mov	r2, r7
 8008946:	6921      	ldr	r1, [r4, #16]
 8008948:	f000 fab6 	bl	8008eb8 <memcpy>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	6126      	str	r6, [r4, #16]
 800895a:	443e      	add	r6, r7
 800895c:	6026      	str	r6, [r4, #0]
 800895e:	464e      	mov	r6, r9
 8008960:	6165      	str	r5, [r4, #20]
 8008962:	1bed      	subs	r5, r5, r7
 8008964:	60a5      	str	r5, [r4, #8]
 8008966:	454e      	cmp	r6, r9
 8008968:	d900      	bls.n	800896c <__ssputs_r+0x84>
 800896a:	464e      	mov	r6, r9
 800896c:	4632      	mov	r2, r6
 800896e:	4641      	mov	r1, r8
 8008970:	6820      	ldr	r0, [r4, #0]
 8008972:	f000 faac 	bl	8008ece <memmove>
 8008976:	68a3      	ldr	r3, [r4, #8]
 8008978:	2000      	movs	r0, #0
 800897a:	1b9b      	subs	r3, r3, r6
 800897c:	60a3      	str	r3, [r4, #8]
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	441e      	add	r6, r3
 8008982:	6026      	str	r6, [r4, #0]
 8008984:	e7dc      	b.n	8008940 <__ssputs_r+0x58>
 8008986:	462a      	mov	r2, r5
 8008988:	f000 fb60 	bl	800904c <_realloc_r>
 800898c:	4606      	mov	r6, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	d1e2      	bne.n	8008958 <__ssputs_r+0x70>
 8008992:	6921      	ldr	r1, [r4, #16]
 8008994:	4650      	mov	r0, sl
 8008996:	f000 fab3 	bl	8008f00 <_free_r>
 800899a:	e7c8      	b.n	800892e <__ssputs_r+0x46>

0800899c <_svfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	461d      	mov	r5, r3
 80089a2:	898b      	ldrh	r3, [r1, #12]
 80089a4:	b09d      	sub	sp, #116	; 0x74
 80089a6:	061f      	lsls	r7, r3, #24
 80089a8:	4680      	mov	r8, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4616      	mov	r6, r2
 80089ae:	d50f      	bpl.n	80089d0 <_svfiprintf_r+0x34>
 80089b0:	690b      	ldr	r3, [r1, #16]
 80089b2:	b96b      	cbnz	r3, 80089d0 <_svfiprintf_r+0x34>
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	f000 faef 	bl	8008f98 <_malloc_r>
 80089ba:	6020      	str	r0, [r4, #0]
 80089bc:	6120      	str	r0, [r4, #16]
 80089be:	b928      	cbnz	r0, 80089cc <_svfiprintf_r+0x30>
 80089c0:	230c      	movs	r3, #12
 80089c2:	f8c8 3000 	str.w	r3, [r8]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ca:	e0c8      	b.n	8008b5e <_svfiprintf_r+0x1c2>
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	6163      	str	r3, [r4, #20]
 80089d0:	2300      	movs	r3, #0
 80089d2:	9309      	str	r3, [sp, #36]	; 0x24
 80089d4:	2320      	movs	r3, #32
 80089d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089da:	2330      	movs	r3, #48	; 0x30
 80089dc:	f04f 0b01 	mov.w	fp, #1
 80089e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089e4:	9503      	str	r5, [sp, #12]
 80089e6:	4637      	mov	r7, r6
 80089e8:	463d      	mov	r5, r7
 80089ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089ee:	b10b      	cbz	r3, 80089f4 <_svfiprintf_r+0x58>
 80089f0:	2b25      	cmp	r3, #37	; 0x25
 80089f2:	d13e      	bne.n	8008a72 <_svfiprintf_r+0xd6>
 80089f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80089f8:	d00b      	beq.n	8008a12 <_svfiprintf_r+0x76>
 80089fa:	4653      	mov	r3, sl
 80089fc:	4632      	mov	r2, r6
 80089fe:	4621      	mov	r1, r4
 8008a00:	4640      	mov	r0, r8
 8008a02:	f7ff ff71 	bl	80088e8 <__ssputs_r>
 8008a06:	3001      	adds	r0, #1
 8008a08:	f000 80a4 	beq.w	8008b54 <_svfiprintf_r+0x1b8>
 8008a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0e:	4453      	add	r3, sl
 8008a10:	9309      	str	r3, [sp, #36]	; 0x24
 8008a12:	783b      	ldrb	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f000 809d 	beq.w	8008b54 <_svfiprintf_r+0x1b8>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	9307      	str	r3, [sp, #28]
 8008a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a2e:	462f      	mov	r7, r5
 8008a30:	2205      	movs	r2, #5
 8008a32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008a36:	4850      	ldr	r0, [pc, #320]	; (8008b78 <_svfiprintf_r+0x1dc>)
 8008a38:	f000 fa30 	bl	8008e9c <memchr>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	b9d0      	cbnz	r0, 8008a76 <_svfiprintf_r+0xda>
 8008a40:	06d9      	lsls	r1, r3, #27
 8008a42:	bf44      	itt	mi
 8008a44:	2220      	movmi	r2, #32
 8008a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a4a:	071a      	lsls	r2, r3, #28
 8008a4c:	bf44      	itt	mi
 8008a4e:	222b      	movmi	r2, #43	; 0x2b
 8008a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a54:	782a      	ldrb	r2, [r5, #0]
 8008a56:	2a2a      	cmp	r2, #42	; 0x2a
 8008a58:	d015      	beq.n	8008a86 <_svfiprintf_r+0xea>
 8008a5a:	462f      	mov	r7, r5
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	250a      	movs	r5, #10
 8008a60:	9a07      	ldr	r2, [sp, #28]
 8008a62:	4639      	mov	r1, r7
 8008a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a68:	3b30      	subs	r3, #48	; 0x30
 8008a6a:	2b09      	cmp	r3, #9
 8008a6c:	d94d      	bls.n	8008b0a <_svfiprintf_r+0x16e>
 8008a6e:	b1b8      	cbz	r0, 8008aa0 <_svfiprintf_r+0x104>
 8008a70:	e00f      	b.n	8008a92 <_svfiprintf_r+0xf6>
 8008a72:	462f      	mov	r7, r5
 8008a74:	e7b8      	b.n	80089e8 <_svfiprintf_r+0x4c>
 8008a76:	4a40      	ldr	r2, [pc, #256]	; (8008b78 <_svfiprintf_r+0x1dc>)
 8008a78:	463d      	mov	r5, r7
 8008a7a:	1a80      	subs	r0, r0, r2
 8008a7c:	fa0b f000 	lsl.w	r0, fp, r0
 8008a80:	4318      	orrs	r0, r3
 8008a82:	9004      	str	r0, [sp, #16]
 8008a84:	e7d3      	b.n	8008a2e <_svfiprintf_r+0x92>
 8008a86:	9a03      	ldr	r2, [sp, #12]
 8008a88:	1d11      	adds	r1, r2, #4
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	9103      	str	r1, [sp, #12]
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	db01      	blt.n	8008a96 <_svfiprintf_r+0xfa>
 8008a92:	9207      	str	r2, [sp, #28]
 8008a94:	e004      	b.n	8008aa0 <_svfiprintf_r+0x104>
 8008a96:	4252      	negs	r2, r2
 8008a98:	f043 0302 	orr.w	r3, r3, #2
 8008a9c:	9207      	str	r2, [sp, #28]
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	783b      	ldrb	r3, [r7, #0]
 8008aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8008aa4:	d10c      	bne.n	8008ac0 <_svfiprintf_r+0x124>
 8008aa6:	787b      	ldrb	r3, [r7, #1]
 8008aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aaa:	d133      	bne.n	8008b14 <_svfiprintf_r+0x178>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	3702      	adds	r7, #2
 8008ab0:	1d1a      	adds	r2, r3, #4
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	9203      	str	r2, [sp, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfb8      	it	lt
 8008aba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008abe:	9305      	str	r3, [sp, #20]
 8008ac0:	4d2e      	ldr	r5, [pc, #184]	; (8008b7c <_svfiprintf_r+0x1e0>)
 8008ac2:	2203      	movs	r2, #3
 8008ac4:	7839      	ldrb	r1, [r7, #0]
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 f9e8 	bl	8008e9c <memchr>
 8008acc:	b138      	cbz	r0, 8008ade <_svfiprintf_r+0x142>
 8008ace:	2340      	movs	r3, #64	; 0x40
 8008ad0:	1b40      	subs	r0, r0, r5
 8008ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	3701      	adds	r7, #1
 8008ada:	4303      	orrs	r3, r0
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	7839      	ldrb	r1, [r7, #0]
 8008ae0:	2206      	movs	r2, #6
 8008ae2:	4827      	ldr	r0, [pc, #156]	; (8008b80 <_svfiprintf_r+0x1e4>)
 8008ae4:	1c7e      	adds	r6, r7, #1
 8008ae6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aea:	f000 f9d7 	bl	8008e9c <memchr>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d038      	beq.n	8008b64 <_svfiprintf_r+0x1c8>
 8008af2:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <_svfiprintf_r+0x1e8>)
 8008af4:	bb13      	cbnz	r3, 8008b3c <_svfiprintf_r+0x1a0>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	3307      	adds	r3, #7
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	3308      	adds	r3, #8
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b04:	444b      	add	r3, r9
 8008b06:	9309      	str	r3, [sp, #36]	; 0x24
 8008b08:	e76d      	b.n	80089e6 <_svfiprintf_r+0x4a>
 8008b0a:	fb05 3202 	mla	r2, r5, r2, r3
 8008b0e:	2001      	movs	r0, #1
 8008b10:	460f      	mov	r7, r1
 8008b12:	e7a6      	b.n	8008a62 <_svfiprintf_r+0xc6>
 8008b14:	2300      	movs	r3, #0
 8008b16:	250a      	movs	r5, #10
 8008b18:	4619      	mov	r1, r3
 8008b1a:	3701      	adds	r7, #1
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b24:	3a30      	subs	r2, #48	; 0x30
 8008b26:	2a09      	cmp	r2, #9
 8008b28:	d903      	bls.n	8008b32 <_svfiprintf_r+0x196>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0c8      	beq.n	8008ac0 <_svfiprintf_r+0x124>
 8008b2e:	9105      	str	r1, [sp, #20]
 8008b30:	e7c6      	b.n	8008ac0 <_svfiprintf_r+0x124>
 8008b32:	fb05 2101 	mla	r1, r5, r1, r2
 8008b36:	2301      	movs	r3, #1
 8008b38:	4607      	mov	r7, r0
 8008b3a:	e7f0      	b.n	8008b1e <_svfiprintf_r+0x182>
 8008b3c:	ab03      	add	r3, sp, #12
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	4622      	mov	r2, r4
 8008b42:	4b11      	ldr	r3, [pc, #68]	; (8008b88 <_svfiprintf_r+0x1ec>)
 8008b44:	a904      	add	r1, sp, #16
 8008b46:	4640      	mov	r0, r8
 8008b48:	f3af 8000 	nop.w
 8008b4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b50:	4681      	mov	r9, r0
 8008b52:	d1d6      	bne.n	8008b02 <_svfiprintf_r+0x166>
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	065b      	lsls	r3, r3, #25
 8008b58:	f53f af35 	bmi.w	80089c6 <_svfiprintf_r+0x2a>
 8008b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b5e:	b01d      	add	sp, #116	; 0x74
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	ab03      	add	r3, sp, #12
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	4622      	mov	r2, r4
 8008b6a:	4b07      	ldr	r3, [pc, #28]	; (8008b88 <_svfiprintf_r+0x1ec>)
 8008b6c:	a904      	add	r1, sp, #16
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f000 f882 	bl	8008c78 <_printf_i>
 8008b74:	e7ea      	b.n	8008b4c <_svfiprintf_r+0x1b0>
 8008b76:	bf00      	nop
 8008b78:	0800947c 	.word	0x0800947c
 8008b7c:	08009482 	.word	0x08009482
 8008b80:	08009486 	.word	0x08009486
 8008b84:	00000000 	.word	0x00000000
 8008b88:	080088e9 	.word	0x080088e9

08008b8c <_printf_common>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	4691      	mov	r9, r2
 8008b92:	461f      	mov	r7, r3
 8008b94:	688a      	ldr	r2, [r1, #8]
 8008b96:	690b      	ldr	r3, [r1, #16]
 8008b98:	4606      	mov	r6, r0
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	bfb8      	it	lt
 8008b9e:	4613      	movlt	r3, r2
 8008ba0:	f8c9 3000 	str.w	r3, [r9]
 8008ba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ba8:	460c      	mov	r4, r1
 8008baa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bae:	b112      	cbz	r2, 8008bb6 <_printf_common+0x2a>
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f8c9 3000 	str.w	r3, [r9]
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	0699      	lsls	r1, r3, #26
 8008bba:	bf42      	ittt	mi
 8008bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008bc0:	3302      	addmi	r3, #2
 8008bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8008bc6:	6825      	ldr	r5, [r4, #0]
 8008bc8:	f015 0506 	ands.w	r5, r5, #6
 8008bcc:	d107      	bne.n	8008bde <_printf_common+0x52>
 8008bce:	f104 0a19 	add.w	sl, r4, #25
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8008bd8:	1a9b      	subs	r3, r3, r2
 8008bda:	42ab      	cmp	r3, r5
 8008bdc:	dc29      	bgt.n	8008c32 <_printf_common+0xa6>
 8008bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	3300      	adds	r3, #0
 8008be6:	bf18      	it	ne
 8008be8:	2301      	movne	r3, #1
 8008bea:	0692      	lsls	r2, r2, #26
 8008bec:	d42e      	bmi.n	8008c4c <_printf_common+0xc0>
 8008bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	47c0      	blx	r8
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d021      	beq.n	8008c40 <_printf_common+0xb4>
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	68e5      	ldr	r5, [r4, #12]
 8008c00:	f003 0306 	and.w	r3, r3, #6
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	bf18      	it	ne
 8008c08:	2500      	movne	r5, #0
 8008c0a:	f8d9 2000 	ldr.w	r2, [r9]
 8008c0e:	f04f 0900 	mov.w	r9, #0
 8008c12:	bf08      	it	eq
 8008c14:	1aad      	subeq	r5, r5, r2
 8008c16:	68a3      	ldr	r3, [r4, #8]
 8008c18:	6922      	ldr	r2, [r4, #16]
 8008c1a:	bf08      	it	eq
 8008c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bfc4      	itt	gt
 8008c24:	1a9b      	subgt	r3, r3, r2
 8008c26:	18ed      	addgt	r5, r5, r3
 8008c28:	341a      	adds	r4, #26
 8008c2a:	454d      	cmp	r5, r9
 8008c2c:	d11a      	bne.n	8008c64 <_printf_common+0xd8>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e008      	b.n	8008c44 <_printf_common+0xb8>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4652      	mov	r2, sl
 8008c36:	4639      	mov	r1, r7
 8008c38:	4630      	mov	r0, r6
 8008c3a:	47c0      	blx	r8
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d103      	bne.n	8008c48 <_printf_common+0xbc>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c48:	3501      	adds	r5, #1
 8008c4a:	e7c2      	b.n	8008bd2 <_printf_common+0x46>
 8008c4c:	2030      	movs	r0, #48	; 0x30
 8008c4e:	18e1      	adds	r1, r4, r3
 8008c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c5a:	4422      	add	r2, r4
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c62:	e7c4      	b.n	8008bee <_printf_common+0x62>
 8008c64:	2301      	movs	r3, #1
 8008c66:	4622      	mov	r2, r4
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d0e6      	beq.n	8008c40 <_printf_common+0xb4>
 8008c72:	f109 0901 	add.w	r9, r9, #1
 8008c76:	e7d8      	b.n	8008c2a <_printf_common+0x9e>

08008c78 <_printf_i>:
 8008c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c80:	460c      	mov	r4, r1
 8008c82:	7e09      	ldrb	r1, [r1, #24]
 8008c84:	b085      	sub	sp, #20
 8008c86:	296e      	cmp	r1, #110	; 0x6e
 8008c88:	4617      	mov	r7, r2
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	4698      	mov	r8, r3
 8008c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c90:	f000 80b3 	beq.w	8008dfa <_printf_i+0x182>
 8008c94:	d822      	bhi.n	8008cdc <_printf_i+0x64>
 8008c96:	2963      	cmp	r1, #99	; 0x63
 8008c98:	d036      	beq.n	8008d08 <_printf_i+0x90>
 8008c9a:	d80a      	bhi.n	8008cb2 <_printf_i+0x3a>
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	f000 80b9 	beq.w	8008e14 <_printf_i+0x19c>
 8008ca2:	2958      	cmp	r1, #88	; 0x58
 8008ca4:	f000 8083 	beq.w	8008dae <_printf_i+0x136>
 8008ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008cb0:	e032      	b.n	8008d18 <_printf_i+0xa0>
 8008cb2:	2964      	cmp	r1, #100	; 0x64
 8008cb4:	d001      	beq.n	8008cba <_printf_i+0x42>
 8008cb6:	2969      	cmp	r1, #105	; 0x69
 8008cb8:	d1f6      	bne.n	8008ca8 <_printf_i+0x30>
 8008cba:	6820      	ldr	r0, [r4, #0]
 8008cbc:	6813      	ldr	r3, [r2, #0]
 8008cbe:	0605      	lsls	r5, r0, #24
 8008cc0:	f103 0104 	add.w	r1, r3, #4
 8008cc4:	d52a      	bpl.n	8008d1c <_printf_i+0xa4>
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6011      	str	r1, [r2, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	da03      	bge.n	8008cd6 <_printf_i+0x5e>
 8008cce:	222d      	movs	r2, #45	; 0x2d
 8008cd0:	425b      	negs	r3, r3
 8008cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cd6:	486f      	ldr	r0, [pc, #444]	; (8008e94 <_printf_i+0x21c>)
 8008cd8:	220a      	movs	r2, #10
 8008cda:	e039      	b.n	8008d50 <_printf_i+0xd8>
 8008cdc:	2973      	cmp	r1, #115	; 0x73
 8008cde:	f000 809d 	beq.w	8008e1c <_printf_i+0x1a4>
 8008ce2:	d808      	bhi.n	8008cf6 <_printf_i+0x7e>
 8008ce4:	296f      	cmp	r1, #111	; 0x6f
 8008ce6:	d020      	beq.n	8008d2a <_printf_i+0xb2>
 8008ce8:	2970      	cmp	r1, #112	; 0x70
 8008cea:	d1dd      	bne.n	8008ca8 <_printf_i+0x30>
 8008cec:	6823      	ldr	r3, [r4, #0]
 8008cee:	f043 0320 	orr.w	r3, r3, #32
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	e003      	b.n	8008cfe <_printf_i+0x86>
 8008cf6:	2975      	cmp	r1, #117	; 0x75
 8008cf8:	d017      	beq.n	8008d2a <_printf_i+0xb2>
 8008cfa:	2978      	cmp	r1, #120	; 0x78
 8008cfc:	d1d4      	bne.n	8008ca8 <_printf_i+0x30>
 8008cfe:	2378      	movs	r3, #120	; 0x78
 8008d00:	4865      	ldr	r0, [pc, #404]	; (8008e98 <_printf_i+0x220>)
 8008d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d06:	e055      	b.n	8008db4 <_printf_i+0x13c>
 8008d08:	6813      	ldr	r3, [r2, #0]
 8008d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d0e:	1d19      	adds	r1, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	6011      	str	r1, [r2, #0]
 8008d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e08c      	b.n	8008e36 <_printf_i+0x1be>
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d22:	6011      	str	r1, [r2, #0]
 8008d24:	bf18      	it	ne
 8008d26:	b21b      	sxthne	r3, r3
 8008d28:	e7cf      	b.n	8008cca <_printf_i+0x52>
 8008d2a:	6813      	ldr	r3, [r2, #0]
 8008d2c:	6825      	ldr	r5, [r4, #0]
 8008d2e:	1d18      	adds	r0, r3, #4
 8008d30:	6010      	str	r0, [r2, #0]
 8008d32:	0628      	lsls	r0, r5, #24
 8008d34:	d501      	bpl.n	8008d3a <_printf_i+0xc2>
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	e002      	b.n	8008d40 <_printf_i+0xc8>
 8008d3a:	0668      	lsls	r0, r5, #25
 8008d3c:	d5fb      	bpl.n	8008d36 <_printf_i+0xbe>
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	296f      	cmp	r1, #111	; 0x6f
 8008d42:	bf14      	ite	ne
 8008d44:	220a      	movne	r2, #10
 8008d46:	2208      	moveq	r2, #8
 8008d48:	4852      	ldr	r0, [pc, #328]	; (8008e94 <_printf_i+0x21c>)
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d50:	6865      	ldr	r5, [r4, #4]
 8008d52:	2d00      	cmp	r5, #0
 8008d54:	60a5      	str	r5, [r4, #8]
 8008d56:	f2c0 8095 	blt.w	8008e84 <_printf_i+0x20c>
 8008d5a:	6821      	ldr	r1, [r4, #0]
 8008d5c:	f021 0104 	bic.w	r1, r1, #4
 8008d60:	6021      	str	r1, [r4, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d13d      	bne.n	8008de2 <_printf_i+0x16a>
 8008d66:	2d00      	cmp	r5, #0
 8008d68:	f040 808e 	bne.w	8008e88 <_printf_i+0x210>
 8008d6c:	4665      	mov	r5, ip
 8008d6e:	2a08      	cmp	r2, #8
 8008d70:	d10b      	bne.n	8008d8a <_printf_i+0x112>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	07db      	lsls	r3, r3, #31
 8008d76:	d508      	bpl.n	8008d8a <_printf_i+0x112>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	bfde      	ittt	le
 8008d80:	2330      	movle	r3, #48	; 0x30
 8008d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d86:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d8a:	ebac 0305 	sub.w	r3, ip, r5
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	f8cd 8000 	str.w	r8, [sp]
 8008d94:	463b      	mov	r3, r7
 8008d96:	aa03      	add	r2, sp, #12
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff fef6 	bl	8008b8c <_printf_common>
 8008da0:	3001      	adds	r0, #1
 8008da2:	d14d      	bne.n	8008e40 <_printf_i+0x1c8>
 8008da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008da8:	b005      	add	sp, #20
 8008daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dae:	4839      	ldr	r0, [pc, #228]	; (8008e94 <_printf_i+0x21c>)
 8008db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008db4:	6813      	ldr	r3, [r2, #0]
 8008db6:	6821      	ldr	r1, [r4, #0]
 8008db8:	1d1d      	adds	r5, r3, #4
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6015      	str	r5, [r2, #0]
 8008dbe:	060a      	lsls	r2, r1, #24
 8008dc0:	d50b      	bpl.n	8008dda <_printf_i+0x162>
 8008dc2:	07ca      	lsls	r2, r1, #31
 8008dc4:	bf44      	itt	mi
 8008dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8008dca:	6021      	strmi	r1, [r4, #0]
 8008dcc:	b91b      	cbnz	r3, 8008dd6 <_printf_i+0x15e>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	f022 0220 	bic.w	r2, r2, #32
 8008dd4:	6022      	str	r2, [r4, #0]
 8008dd6:	2210      	movs	r2, #16
 8008dd8:	e7b7      	b.n	8008d4a <_printf_i+0xd2>
 8008dda:	064d      	lsls	r5, r1, #25
 8008ddc:	bf48      	it	mi
 8008dde:	b29b      	uxthmi	r3, r3
 8008de0:	e7ef      	b.n	8008dc2 <_printf_i+0x14a>
 8008de2:	4665      	mov	r5, ip
 8008de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008de8:	fb02 3311 	mls	r3, r2, r1, r3
 8008dec:	5cc3      	ldrb	r3, [r0, r3]
 8008dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008df2:	460b      	mov	r3, r1
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d1f5      	bne.n	8008de4 <_printf_i+0x16c>
 8008df8:	e7b9      	b.n	8008d6e <_printf_i+0xf6>
 8008dfa:	6813      	ldr	r3, [r2, #0]
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	1d18      	adds	r0, r3, #4
 8008e00:	6961      	ldr	r1, [r4, #20]
 8008e02:	6010      	str	r0, [r2, #0]
 8008e04:	0628      	lsls	r0, r5, #24
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	d501      	bpl.n	8008e0e <_printf_i+0x196>
 8008e0a:	6019      	str	r1, [r3, #0]
 8008e0c:	e002      	b.n	8008e14 <_printf_i+0x19c>
 8008e0e:	066a      	lsls	r2, r5, #25
 8008e10:	d5fb      	bpl.n	8008e0a <_printf_i+0x192>
 8008e12:	8019      	strh	r1, [r3, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	4665      	mov	r5, ip
 8008e18:	6123      	str	r3, [r4, #16]
 8008e1a:	e7b9      	b.n	8008d90 <_printf_i+0x118>
 8008e1c:	6813      	ldr	r3, [r2, #0]
 8008e1e:	1d19      	adds	r1, r3, #4
 8008e20:	6011      	str	r1, [r2, #0]
 8008e22:	681d      	ldr	r5, [r3, #0]
 8008e24:	6862      	ldr	r2, [r4, #4]
 8008e26:	2100      	movs	r1, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 f837 	bl	8008e9c <memchr>
 8008e2e:	b108      	cbz	r0, 8008e34 <_printf_i+0x1bc>
 8008e30:	1b40      	subs	r0, r0, r5
 8008e32:	6060      	str	r0, [r4, #4]
 8008e34:	6863      	ldr	r3, [r4, #4]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e3e:	e7a7      	b.n	8008d90 <_printf_i+0x118>
 8008e40:	6923      	ldr	r3, [r4, #16]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4639      	mov	r1, r7
 8008e46:	4630      	mov	r0, r6
 8008e48:	47c0      	blx	r8
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d0aa      	beq.n	8008da4 <_printf_i+0x12c>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	079b      	lsls	r3, r3, #30
 8008e52:	d413      	bmi.n	8008e7c <_printf_i+0x204>
 8008e54:	68e0      	ldr	r0, [r4, #12]
 8008e56:	9b03      	ldr	r3, [sp, #12]
 8008e58:	4298      	cmp	r0, r3
 8008e5a:	bfb8      	it	lt
 8008e5c:	4618      	movlt	r0, r3
 8008e5e:	e7a3      	b.n	8008da8 <_printf_i+0x130>
 8008e60:	2301      	movs	r3, #1
 8008e62:	464a      	mov	r2, r9
 8008e64:	4639      	mov	r1, r7
 8008e66:	4630      	mov	r0, r6
 8008e68:	47c0      	blx	r8
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d09a      	beq.n	8008da4 <_printf_i+0x12c>
 8008e6e:	3501      	adds	r5, #1
 8008e70:	68e3      	ldr	r3, [r4, #12]
 8008e72:	9a03      	ldr	r2, [sp, #12]
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	42ab      	cmp	r3, r5
 8008e78:	dcf2      	bgt.n	8008e60 <_printf_i+0x1e8>
 8008e7a:	e7eb      	b.n	8008e54 <_printf_i+0x1dc>
 8008e7c:	2500      	movs	r5, #0
 8008e7e:	f104 0919 	add.w	r9, r4, #25
 8008e82:	e7f5      	b.n	8008e70 <_printf_i+0x1f8>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1ac      	bne.n	8008de2 <_printf_i+0x16a>
 8008e88:	7803      	ldrb	r3, [r0, #0]
 8008e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e92:	e76c      	b.n	8008d6e <_printf_i+0xf6>
 8008e94:	0800948d 	.word	0x0800948d
 8008e98:	0800949e 	.word	0x0800949e

08008e9c <memchr>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	b2c9      	uxtb	r1, r1
 8008ea0:	4402      	add	r2, r0
 8008ea2:	4290      	cmp	r0, r2
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	d101      	bne.n	8008eac <memchr+0x10>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e003      	b.n	8008eb4 <memchr+0x18>
 8008eac:	781c      	ldrb	r4, [r3, #0]
 8008eae:	3001      	adds	r0, #1
 8008eb0:	428c      	cmp	r4, r1
 8008eb2:	d1f6      	bne.n	8008ea2 <memchr+0x6>
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	bd10      	pop	{r4, pc}

08008eb8 <memcpy>:
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	d100      	bne.n	8008ec4 <memcpy+0xc>
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ecc:	e7f7      	b.n	8008ebe <memcpy+0x6>

08008ece <memmove>:
 8008ece:	4288      	cmp	r0, r1
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	eb01 0302 	add.w	r3, r1, r2
 8008ed6:	d807      	bhi.n	8008ee8 <memmove+0x1a>
 8008ed8:	1e42      	subs	r2, r0, #1
 8008eda:	4299      	cmp	r1, r3
 8008edc:	d00a      	beq.n	8008ef4 <memmove+0x26>
 8008ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ee2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ee6:	e7f8      	b.n	8008eda <memmove+0xc>
 8008ee8:	4283      	cmp	r3, r0
 8008eea:	d9f5      	bls.n	8008ed8 <memmove+0xa>
 8008eec:	1881      	adds	r1, r0, r2
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	42d3      	cmn	r3, r2
 8008ef2:	d100      	bne.n	8008ef6 <memmove+0x28>
 8008ef4:	bd10      	pop	{r4, pc}
 8008ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008efa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008efe:	e7f7      	b.n	8008ef0 <memmove+0x22>

08008f00 <_free_r>:
 8008f00:	b538      	push	{r3, r4, r5, lr}
 8008f02:	4605      	mov	r5, r0
 8008f04:	2900      	cmp	r1, #0
 8008f06:	d043      	beq.n	8008f90 <_free_r+0x90>
 8008f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0c:	1f0c      	subs	r4, r1, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	bfb8      	it	lt
 8008f12:	18e4      	addlt	r4, r4, r3
 8008f14:	f000 f8d0 	bl	80090b8 <__malloc_lock>
 8008f18:	4a1e      	ldr	r2, [pc, #120]	; (8008f94 <_free_r+0x94>)
 8008f1a:	6813      	ldr	r3, [r2, #0]
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	b933      	cbnz	r3, 8008f2e <_free_r+0x2e>
 8008f20:	6063      	str	r3, [r4, #4]
 8008f22:	6014      	str	r4, [r2, #0]
 8008f24:	4628      	mov	r0, r5
 8008f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f2a:	f000 b8c6 	b.w	80090ba <__malloc_unlock>
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	d90b      	bls.n	8008f4a <_free_r+0x4a>
 8008f32:	6821      	ldr	r1, [r4, #0]
 8008f34:	1862      	adds	r2, r4, r1
 8008f36:	4293      	cmp	r3, r2
 8008f38:	bf01      	itttt	eq
 8008f3a:	681a      	ldreq	r2, [r3, #0]
 8008f3c:	685b      	ldreq	r3, [r3, #4]
 8008f3e:	1852      	addeq	r2, r2, r1
 8008f40:	6022      	streq	r2, [r4, #0]
 8008f42:	6063      	str	r3, [r4, #4]
 8008f44:	6004      	str	r4, [r0, #0]
 8008f46:	e7ed      	b.n	8008f24 <_free_r+0x24>
 8008f48:	4613      	mov	r3, r2
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	b10a      	cbz	r2, 8008f52 <_free_r+0x52>
 8008f4e:	42a2      	cmp	r2, r4
 8008f50:	d9fa      	bls.n	8008f48 <_free_r+0x48>
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	1858      	adds	r0, r3, r1
 8008f56:	42a0      	cmp	r0, r4
 8008f58:	d10b      	bne.n	8008f72 <_free_r+0x72>
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	4401      	add	r1, r0
 8008f5e:	1858      	adds	r0, r3, r1
 8008f60:	4282      	cmp	r2, r0
 8008f62:	6019      	str	r1, [r3, #0]
 8008f64:	d1de      	bne.n	8008f24 <_free_r+0x24>
 8008f66:	6810      	ldr	r0, [r2, #0]
 8008f68:	6852      	ldr	r2, [r2, #4]
 8008f6a:	4401      	add	r1, r0
 8008f6c:	6019      	str	r1, [r3, #0]
 8008f6e:	605a      	str	r2, [r3, #4]
 8008f70:	e7d8      	b.n	8008f24 <_free_r+0x24>
 8008f72:	d902      	bls.n	8008f7a <_free_r+0x7a>
 8008f74:	230c      	movs	r3, #12
 8008f76:	602b      	str	r3, [r5, #0]
 8008f78:	e7d4      	b.n	8008f24 <_free_r+0x24>
 8008f7a:	6820      	ldr	r0, [r4, #0]
 8008f7c:	1821      	adds	r1, r4, r0
 8008f7e:	428a      	cmp	r2, r1
 8008f80:	bf01      	itttt	eq
 8008f82:	6811      	ldreq	r1, [r2, #0]
 8008f84:	6852      	ldreq	r2, [r2, #4]
 8008f86:	1809      	addeq	r1, r1, r0
 8008f88:	6021      	streq	r1, [r4, #0]
 8008f8a:	6062      	str	r2, [r4, #4]
 8008f8c:	605c      	str	r4, [r3, #4]
 8008f8e:	e7c9      	b.n	8008f24 <_free_r+0x24>
 8008f90:	bd38      	pop	{r3, r4, r5, pc}
 8008f92:	bf00      	nop
 8008f94:	200001a8 	.word	0x200001a8

08008f98 <_malloc_r>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	1ccd      	adds	r5, r1, #3
 8008f9c:	f025 0503 	bic.w	r5, r5, #3
 8008fa0:	3508      	adds	r5, #8
 8008fa2:	2d0c      	cmp	r5, #12
 8008fa4:	bf38      	it	cc
 8008fa6:	250c      	movcc	r5, #12
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	4606      	mov	r6, r0
 8008fac:	db01      	blt.n	8008fb2 <_malloc_r+0x1a>
 8008fae:	42a9      	cmp	r1, r5
 8008fb0:	d903      	bls.n	8008fba <_malloc_r+0x22>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	6033      	str	r3, [r6, #0]
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	bd70      	pop	{r4, r5, r6, pc}
 8008fba:	f000 f87d 	bl	80090b8 <__malloc_lock>
 8008fbe:	4a21      	ldr	r2, [pc, #132]	; (8009044 <_malloc_r+0xac>)
 8008fc0:	6814      	ldr	r4, [r2, #0]
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	b991      	cbnz	r1, 8008fec <_malloc_r+0x54>
 8008fc6:	4c20      	ldr	r4, [pc, #128]	; (8009048 <_malloc_r+0xb0>)
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	b91b      	cbnz	r3, 8008fd4 <_malloc_r+0x3c>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 f863 	bl	8009098 <_sbrk_r>
 8008fd2:	6020      	str	r0, [r4, #0]
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 f85e 	bl	8009098 <_sbrk_r>
 8008fdc:	1c43      	adds	r3, r0, #1
 8008fde:	d124      	bne.n	800902a <_malloc_r+0x92>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	6033      	str	r3, [r6, #0]
 8008fe6:	f000 f868 	bl	80090ba <__malloc_unlock>
 8008fea:	e7e4      	b.n	8008fb6 <_malloc_r+0x1e>
 8008fec:	680b      	ldr	r3, [r1, #0]
 8008fee:	1b5b      	subs	r3, r3, r5
 8008ff0:	d418      	bmi.n	8009024 <_malloc_r+0x8c>
 8008ff2:	2b0b      	cmp	r3, #11
 8008ff4:	d90f      	bls.n	8009016 <_malloc_r+0x7e>
 8008ff6:	600b      	str	r3, [r1, #0]
 8008ff8:	18cc      	adds	r4, r1, r3
 8008ffa:	50cd      	str	r5, [r1, r3]
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f000 f85c 	bl	80090ba <__malloc_unlock>
 8009002:	f104 000b 	add.w	r0, r4, #11
 8009006:	1d23      	adds	r3, r4, #4
 8009008:	f020 0007 	bic.w	r0, r0, #7
 800900c:	1ac3      	subs	r3, r0, r3
 800900e:	d0d3      	beq.n	8008fb8 <_malloc_r+0x20>
 8009010:	425a      	negs	r2, r3
 8009012:	50e2      	str	r2, [r4, r3]
 8009014:	e7d0      	b.n	8008fb8 <_malloc_r+0x20>
 8009016:	684b      	ldr	r3, [r1, #4]
 8009018:	428c      	cmp	r4, r1
 800901a:	bf16      	itet	ne
 800901c:	6063      	strne	r3, [r4, #4]
 800901e:	6013      	streq	r3, [r2, #0]
 8009020:	460c      	movne	r4, r1
 8009022:	e7eb      	b.n	8008ffc <_malloc_r+0x64>
 8009024:	460c      	mov	r4, r1
 8009026:	6849      	ldr	r1, [r1, #4]
 8009028:	e7cc      	b.n	8008fc4 <_malloc_r+0x2c>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d005      	beq.n	8009040 <_malloc_r+0xa8>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f82e 	bl	8009098 <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d0cf      	beq.n	8008fe0 <_malloc_r+0x48>
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	e7db      	b.n	8008ffc <_malloc_r+0x64>
 8009044:	200001a8 	.word	0x200001a8
 8009048:	200001ac 	.word	0x200001ac

0800904c <_realloc_r>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	4607      	mov	r7, r0
 8009050:	4614      	mov	r4, r2
 8009052:	460e      	mov	r6, r1
 8009054:	b921      	cbnz	r1, 8009060 <_realloc_r+0x14>
 8009056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800905a:	4611      	mov	r1, r2
 800905c:	f7ff bf9c 	b.w	8008f98 <_malloc_r>
 8009060:	b922      	cbnz	r2, 800906c <_realloc_r+0x20>
 8009062:	f7ff ff4d 	bl	8008f00 <_free_r>
 8009066:	4625      	mov	r5, r4
 8009068:	4628      	mov	r0, r5
 800906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906c:	f000 f826 	bl	80090bc <_malloc_usable_size_r>
 8009070:	42a0      	cmp	r0, r4
 8009072:	d20f      	bcs.n	8009094 <_realloc_r+0x48>
 8009074:	4621      	mov	r1, r4
 8009076:	4638      	mov	r0, r7
 8009078:	f7ff ff8e 	bl	8008f98 <_malloc_r>
 800907c:	4605      	mov	r5, r0
 800907e:	2800      	cmp	r0, #0
 8009080:	d0f2      	beq.n	8009068 <_realloc_r+0x1c>
 8009082:	4631      	mov	r1, r6
 8009084:	4622      	mov	r2, r4
 8009086:	f7ff ff17 	bl	8008eb8 <memcpy>
 800908a:	4631      	mov	r1, r6
 800908c:	4638      	mov	r0, r7
 800908e:	f7ff ff37 	bl	8008f00 <_free_r>
 8009092:	e7e9      	b.n	8009068 <_realloc_r+0x1c>
 8009094:	4635      	mov	r5, r6
 8009096:	e7e7      	b.n	8009068 <_realloc_r+0x1c>

08009098 <_sbrk_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	2300      	movs	r3, #0
 800909c:	4c05      	ldr	r4, [pc, #20]	; (80090b4 <_sbrk_r+0x1c>)
 800909e:	4605      	mov	r5, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	f7fa fcfc 	bl	8003aa0 <_sbrk>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_sbrk_r+0x1a>
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_sbrk_r+0x1a>
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	200003bc 	.word	0x200003bc

080090b8 <__malloc_lock>:
 80090b8:	4770      	bx	lr

080090ba <__malloc_unlock>:
 80090ba:	4770      	bx	lr

080090bc <_malloc_usable_size_r>:
 80090bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090c0:	1f18      	subs	r0, r3, #4
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfbc      	itt	lt
 80090c6:	580b      	ldrlt	r3, [r1, r0]
 80090c8:	18c0      	addlt	r0, r0, r3
 80090ca:	4770      	bx	lr

080090cc <_init>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr

080090d8 <_fini>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr
