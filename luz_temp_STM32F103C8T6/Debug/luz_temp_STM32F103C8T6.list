
luz_temp_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f8  080069f8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  080069f8  080069f8  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069f8  080069f8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f8  080069f8  000169f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200000fc  08006afc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08006afc  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014444  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000348b  00000000  00000000  00034569  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e8  00000000  00000000  000379f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001230  00000000  00000000  00038de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017108  00000000  00000000  0003a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001169d  00000000  00000000  00051118  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ba0d  00000000  00000000  000627b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de1c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054b0  00000000  00000000  000de240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000fc 	.word	0x200000fc
 8000128:	00000000 	.word	0x00000000
 800012c:	080067cc 	.word	0x080067cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000100 	.word	0x20000100
 8000148:	080067cc 	.word	0x080067cc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	889b      	ldrh	r3, [r3, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	f002 ffbe 	bl	80035f6 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8000680:	2311      	movs	r3, #17
 8000682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	79db      	ldrb	r3, [r3, #7]
 8000688:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 800068a:	2303      	movs	r3, #3
 800068c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f107 0208 	add.w	r2, r7, #8
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fe3b 	bl	8003314 <HAL_GPIO_Init>
}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	79db      	ldrb	r3, [r3, #7]
 80006ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f107 0208 	add.w	r2, r7, #8
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fe1c 	bl	8003314 <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80006ee:	4aad      	ldr	r2, [pc, #692]	; (80009a4 <DHT_getData+0x2c0>)
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000708:	84fb      	strh	r3, [r7, #38]	; 0x26
 800070a:	e002      	b.n	8000712 <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000712:	f002 f939 	bl	8002988 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	1ad2      	subs	r2, r2, r3
 800071e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000720:	429a      	cmp	r2, r3
 8000722:	d212      	bcs.n	800074a <DHT_getData+0x66>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00e      	beq.n	800074a <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	61bb      	str	r3, [r7, #24]
		return data;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	461a      	mov	r2, r3
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000744:	e882 0003 	stmia.w	r2, {r0, r1}
 8000748:	e161      	b.n	8000a0e <DHT_getData+0x32a>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 800074a:	f002 f91d 	bl	8002988 <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8000756:	6838      	ldr	r0, [r7, #0]
 8000758:	f7ff ff7c 	bl	8000654 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f002 ff45 	bl	80035f6 <HAL_GPIO_WritePin>
	Delay(18);
 800076c:	2012      	movs	r0, #18
 800076e:	f002 f915 	bl	800299c <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	889b      	ldrh	r3, [r3, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	f002 ff3a 	bl	80035f6 <HAL_GPIO_WritePin>
	goToInput(sensor);
 8000782:	6838      	ldr	r0, [r7, #0]
 8000784:	f7ff ff8f 	bl	80006a6 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800078e:	e019      	b.n	80007c4 <DHT_getData+0xe0>
		timeout++;
 8000790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000798:	f242 7210 	movw	r2, #10000	; 0x2710
 800079c:	4293      	cmp	r3, r2
 800079e:	d911      	bls.n	80007c4 <DHT_getData+0xe0>
  __ASM volatile ("cpsie i" : : : "memory");
 80007a0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007a8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007b0:	60da      	str	r2, [r3, #12]

			return data;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007be:	e882 0003 	stmia.w	r2, {r0, r1}
 80007c2:	e124      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f002 fefa 	bl	80035c8 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d0da      	beq.n	8000790 <DHT_getData+0xac>
		}
	}
	timeout = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80007de:	e019      	b.n	8000814 <DHT_getData+0x130>
		timeout++;
 80007e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e2:	3301      	adds	r3, #1
 80007e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 80007e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d911      	bls.n	8000814 <DHT_getData+0x130>
 80007f0:	b662      	cpsie	i
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80007f8:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000800:	60da      	str	r2, [r3, #12]

			return data;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	461a      	mov	r2, r3
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800080e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000812:	e0fc      	b.n	8000a0e <DHT_getData+0x32a>
	while(!getLine()) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	889b      	ldrh	r3, [r3, #4]
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f002 fed2 	bl	80035c8 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b01      	cmp	r3, #1
 8000828:	d1da      	bne.n	80007e0 <DHT_getData+0xfc>
		}
	}
	timeout = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	84bb      	strh	r3, [r7, #36]	; 0x24
	//Ожидание спада
	while(getLine()) {
 800082e:	e011      	b.n	8000854 <DHT_getData+0x170>
		timeout++;
 8000830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000832:	3301      	adds	r3, #1
 8000834:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (timeout > DHT_TIMEOUT) {
 8000836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000838:	f242 7210 	movw	r2, #10000	; 0x2710
 800083c:	4293      	cmp	r3, r2
 800083e:	d909      	bls.n	8000854 <DHT_getData+0x170>
 8000840:	b662      	cpsie	i
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800084e:	e882 0003 	stmia.w	r2, {r0, r1}
 8000852:	e0dc      	b.n	8000a0e <DHT_getData+0x32a>
	while(getLine()) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	889b      	ldrh	r3, [r3, #4]
 800085c:	4619      	mov	r1, r3
 800085e:	4610      	mov	r0, r2
 8000860:	f002 feb2 	bl	80035c8 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d0e2      	beq.n	8000830 <DHT_getData+0x14c>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800087a:	e05b      	b.n	8000934 <DHT_getData+0x250>
		for(uint8_t b = 7; b != 255; b--) {
 800087c:	2307      	movs	r3, #7
 800087e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000882:	e04e      	b.n	8000922 <DHT_getData+0x23e>
			uint16_t hT = 0, lT = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	843b      	strh	r3, [r7, #32]
 8000888:	2300      	movs	r3, #0
 800088a:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 800088c:	e002      	b.n	8000894 <DHT_getData+0x1b0>
 800088e:	8bfb      	ldrh	r3, [r7, #30]
 8000890:	3301      	adds	r3, #1
 8000892:	83fb      	strh	r3, [r7, #30]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f002 fe92 	bl	80035c8 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d004      	beq.n	80008b4 <DHT_getData+0x1d0>
 80008aa:	8bfb      	ldrh	r3, [r7, #30]
 80008ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d1ec      	bne.n	800088e <DHT_getData+0x1aa>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			while(getLine()&& hT != 65535) hT++;
 80008b8:	e002      	b.n	80008c0 <DHT_getData+0x1dc>
 80008ba:	8c3b      	ldrh	r3, [r7, #32]
 80008bc:	3301      	adds	r3, #1
 80008be:	843b      	strh	r3, [r7, #32]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	889b      	ldrh	r3, [r3, #4]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f002 fe7c 	bl	80035c8 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d104      	bne.n	80008e0 <DHT_getData+0x1fc>
 80008d6:	8c3b      	ldrh	r3, [r7, #32]
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	4293      	cmp	r3, r2
 80008de:	d1ec      	bne.n	80008ba <DHT_getData+0x1d6>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80008e0:	8c3a      	ldrh	r2, [r7, #32]
 80008e2:	8bfb      	ldrh	r3, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d917      	bls.n	8000918 <DHT_getData+0x234>
 80008e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80008f0:	4413      	add	r3, r2
 80008f2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80008f6:	b25a      	sxtb	r2, r3
 80008f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25a      	sxtb	r2, r3
 8000908:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000912:	440b      	add	r3, r1
 8000914:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 8000918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800091c:	3b01      	subs	r3, #1
 800091e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000922:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d1ac      	bne.n	8000884 <DHT_getData+0x1a0>
	for(uint8_t a = 0; a < 5; a++) {
 800092a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800092e:	3301      	adds	r3, #1
 8000930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000938:	2b04      	cmp	r3, #4
 800093a:	d99f      	bls.n	800087c <DHT_getData+0x198>
 800093c:	b662      	cpsie	i
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800093e:	7b3a      	ldrb	r2, [r7, #12]
 8000940:	7b7b      	ldrb	r3, [r7, #13]
 8000942:	4413      	add	r3, r2
 8000944:	b2da      	uxtb	r2, r3
 8000946:	7bbb      	ldrb	r3, [r7, #14]
 8000948:	4413      	add	r3, r2
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4413      	add	r3, r2
 8000950:	b2da      	uxtb	r2, r3
 8000952:	7c3b      	ldrb	r3, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d14c      	bne.n	80009f2 <DHT_getData+0x30e>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d138      	bne.n	80009d2 <DHT_getData+0x2ee>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	7b7a      	ldrb	r2, [r7, #13]
 8000966:	4313      	orrs	r3, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fca9 	bl	80002c0 <__aeabi_i2f>
 800096e:	4603      	mov	r3, r0
 8000970:	490d      	ldr	r1, [pc, #52]	; (80009a8 <DHT_getData+0x2c4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fcf8 	bl	8000368 <__aeabi_fmul>
 8000978:	4603      	mov	r3, r0
 800097a:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	db13      	blt.n	80009ac <DHT_getData+0x2c8>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	7bfa      	ldrb	r2, [r7, #15]
 800098a:	4313      	orrs	r3, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc97 	bl	80002c0 <__aeabi_i2f>
 8000992:	4603      	mov	r3, r0
 8000994:	4904      	ldr	r1, [pc, #16]	; (80009a8 <DHT_getData+0x2c4>)
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fce6 	bl	8000368 <__aeabi_fmul>
 800099c:	4603      	mov	r3, r0
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	e017      	b.n	80009d2 <DHT_getData+0x2ee>
 80009a2:	bf00      	nop
 80009a4:	080067e4 	.word	0x080067e4
 80009a8:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	7bfa      	ldrb	r2, [r7, #15]
 80009bc:	4313      	orrs	r3, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc7e 	bl	80002c0 <__aeabi_i2f>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4914      	ldr	r1, [pc, #80]	; (8000a18 <DHT_getData+0x334>)
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fccd 	bl	8000368 <__aeabi_fmul>
 80009ce:	4603      	mov	r3, r0
 80009d0:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	799b      	ldrb	r3, [r3, #6]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10b      	bne.n	80009f2 <DHT_getData+0x30e>
			data.hum = (float)rawData[0];
 80009da:	7b3b      	ldrb	r3, [r7, #12]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fc6b 	bl	80002b8 <__aeabi_ui2f>
 80009e2:	4603      	mov	r3, r0
 80009e4:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fc65 	bl	80002b8 <__aeabi_ui2f>
 80009ee:	4603      	mov	r3, r0
 80009f0:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	461a      	mov	r2, r3
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a0a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	bdcccccd 	.word	0xbdcccccd

08000a1c <init_botonera>:

static uint8_t read_input, last_input, fall_input, rise_input;
static uint8_t write_output = 0xFF;


void init_botonera (I2C_HandleTypeDef* i2c_handler, uint8_t i2c_address){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	70fb      	strb	r3, [r7, #3]

	pcf8574_init(i2c_handler, i2c_address);
 8000a28:	78fb      	ldrb	r3, [r7, #3]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f8d9 	bl	8000be4 <pcf8574_init>

	//lectura inicial
	flag_sinBotones = HAL_I2C_Master_Receive(i2c_handler, i2c_address << 1, &read_input, 1, 100);
 8000a32:	78fb      	ldrb	r3, [r7, #3]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	b299      	uxth	r1, r3
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <init_botonera+0x4c>)
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f003 f816 	bl	8003a74 <HAL_I2C_Master_Receive>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <init_botonera+0x50>)
 8000a4e:	701a      	strb	r2, [r3, #0]
	last_input = read_input;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <init_botonera+0x4c>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <init_botonera+0x54>)
 8000a56:	701a      	strb	r2, [r3, #0]

	pcf8574_writePort(0xFF); //weak pullup para todos los pines
 8000a58:	20ff      	movs	r0, #255	; 0xff
 8000a5a:	f000 f8f3 	bl	8000c44 <pcf8574_writePort>
} //fin init_botonera()
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000118 	.word	0x20000118
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000119 	.word	0x20000119

08000a74 <lecturaTeclas>:


void lecturaTeclas(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	if (flag_sinBotones != HAL_OK) return;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <lecturaTeclas+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d106      	bne.n	8000a8e <lecturaTeclas+0x1a>
	read_input = pcf8574_readPort();
 8000a80:	f000 f8c8 	bl	8000c14 <pcf8574_readPort>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <lecturaTeclas+0x24>)
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e000      	b.n	8000a90 <lecturaTeclas+0x1c>
	if (flag_sinBotones != HAL_OK) return;
 8000a8e:	bf00      	nop
} //fin lecturaTeclas()
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000118 	.word	0x20000118

08000a9c <update_teclas>:

void update_teclas (void){
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

	fall_input = last_input & ~read_input;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <update_teclas+0x48>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	b25a      	sxtb	r2, r3
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <update_teclas+0x4c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <update_teclas+0x50>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	rise_input = ~last_input & read_input;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <update_teclas+0x4c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <update_teclas+0x48>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	4013      	ands	r3, r2
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <update_teclas+0x54>)
 8000ad2:	701a      	strb	r2, [r3, #0]

	last_input = read_input;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <update_teclas+0x48>)
 8000ad6:	781a      	ldrb	r2, [r3, #0]
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <update_teclas+0x4c>)
 8000ada:	701a      	strb	r2, [r3, #0]

} //fin update_teclas()
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	20000119 	.word	0x20000119
 8000aec:	2000011a 	.word	0x2000011a
 8000af0:	2000011b 	.word	0x2000011b

08000af4 <getStatBoton>:


T_INPUT getStatBoton (T_POS_INPUT b){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]

	if (flag_sinBotones != 0) return HIGH_L;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <getStatBoton+0x6c>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <getStatBoton+0x16>
 8000b06:	2301      	movs	r3, #1
 8000b08:	e024      	b.n	8000b54 <getStatBoton+0x60>

	if ( (fall_input & (1 << b)) != 0)
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <getStatBoton+0x70>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	fa42 f303 	asr.w	r3, r2, r3
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <getStatBoton+0x2e>
		return FALL;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e018      	b.n	8000b54 <getStatBoton+0x60>

	if ( (rise_input & (1 << b)) != 0)
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <getStatBoton+0x74>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	fa42 f303 	asr.w	r3, r2, r3
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <getStatBoton+0x46>
		return RISE;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e00c      	b.n	8000b54 <getStatBoton+0x60>

	if ( (read_input & (1 << b)) != 0)
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <getStatBoton+0x78>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	fa42 f303 	asr.w	r3, r2, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <getStatBoton+0x5e>
		return HIGH_L;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <getStatBoton+0x60>

	return LOW_L;
 8000b52:	2300      	movs	r3, #0
} //fin getStatBoton()
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	20000000 	.word	0x20000000
 8000b64:	2000011a 	.word	0x2000011a
 8000b68:	2000011b 	.word	0x2000011b
 8000b6c:	20000118 	.word	0x20000118

08000b70 <setOutput>:
uint8_t detectaAlgunBoton (void){
	return 0;
} //fin detectaAgunBoton()


void setOutput (T_POS_OUTPUT s, uint8_t val){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	460a      	mov	r2, r1
 8000b7a:	71fb      	strb	r3, [r7, #7]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	71bb      	strb	r3, [r7, #6]

	if (val != 0){
 8000b80:	79bb      	ldrb	r3, [r7, #6]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <setOutput+0x30>
		write_output |= (uint8_t)(1 << (s + 6));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	3306      	adds	r3, #6
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <setOutput+0x58>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <setOutput+0x58>)
 8000b9c:	701a      	strb	r2, [r3, #0]
		return;
 8000b9e:	e00f      	b.n	8000bc0 <setOutput+0x50>
	}else{
		write_output &= ~( (uint8_t)(1 << (s + 6)) );
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	3306      	adds	r3, #6
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <setOutput+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <setOutput+0x58>)
 8000bbe:	701a      	strb	r2, [r3, #0]
	} //fin if val

} //fin setOutput()
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000001 	.word	0x20000001

08000bcc <update_outputs>:

void update_outputs (void){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

	pcf8574_writePort(write_output);
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <update_outputs+0x14>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f835 	bl	8000c44 <pcf8574_writePort>

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000001 	.word	0x20000001

08000be4 <pcf8574_init>:
#include "PCF8574_lfs.h"

static I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t addressPCF8574; //(0x20)<<1 // change this according to ur setup

void pcf8574_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <pcf8574_init+0x28>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
	addressPCF8574 = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <pcf8574_init+0x2c>)
 8000bfe:	701a      	strb	r2, [r3, #0]
} //fin pcf8574_init()
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000011c 	.word	0x2000011c
 8000c10:	20000170 	.word	0x20000170

08000c14 <pcf8574_readPort>:

uint8_t pcf8574_readPort (void){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af02      	add	r7, sp, #8
	uint8_t reg;
	HAL_I2C_Master_Receive(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <pcf8574_readPort+0x28>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <pcf8574_readPort+0x2c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b299      	uxth	r1, r3
 8000c24:	1dfa      	adds	r2, r7, #7
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	f002 ff22 	bl	8003a74 <HAL_I2C_Master_Receive>
	return reg;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
} //fin pcf8574_readInputs()
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000011c 	.word	0x2000011c
 8000c40:	20000170 	.word	0x20000170

08000c44 <pcf8574_writePort>:

void pcf8574_writePort (uint8_t reg){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(i2c_handler, addressPCF8574, &reg, 1, 100);
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <pcf8574_writePort+0x28>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <pcf8574_writePort+0x2c>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b299      	uxth	r1, r3
 8000c58:	1dfa      	adds	r2, r7, #7
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f002 fe0a 	bl	8003878 <HAL_I2C_Master_Transmit>
} //fin pcf8574_writeOutputs
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000011c 	.word	0x2000011c
 8000c70:	20000170 	.word	0x20000170

08000c74 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c86:	4a19      	ldr	r2, [pc, #100]	; (8000cec <MX_ADC1_Init+0x78>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000c9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ca2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cb2:	f001 fe95 	bl	80029e0 <HAL_ADC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cbc:	f000 fd12 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_ADC1_Init+0x74>)
 8000cd2:	f002 f817 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000cdc:	f000 fd02 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	200001a4 	.word	0x200001a4
 8000cec:	40012400 	.word	0x40012400

08000cf0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d02:	4a19      	ldr	r2, [pc, #100]	; (8000d68 <MX_ADC2_Init+0x78>)
 8000d04:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d1a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d2e:	f001 fe57 	bl	80029e0 <HAL_ADC_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f000 fcd4 	bl	80016e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_ADC2_Init+0x74>)
 8000d4e:	f001 ffd9 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000d58:	f000 fcc4 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000174 	.word	0x20000174
 8000d68:	40012800 	.word	0x40012800

08000d6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <HAL_ADC_MspInit+0xbc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d122      	bne.n	8000dd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8c:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000dcc:	f002 faa2 	bl	8003314 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dd0:	e026      	b.n	8000e20 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <HAL_ADC_MspInit+0xc8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d121      	bne.n	8000e20 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_ADC_MspInit+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_ADC_MspInit+0xc4>)
 8000e1c:	f002 fa7a 	bl	8003314 <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40012400 	.word	0x40012400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010800 	.word	0x40010800
 8000e34:	40012800 	.word	0x40012800

08000e38 <init_sensores>:
uint8_t modoAuto = 0; //0 -> manual; 1 -> automatico.
static DHT_sensor sensorDHT = {GPIOB, GPIO_PIN_13, DHT11, GPIO_NOPULL};
uint8_t estadoRele;
DHT_data datosDHT;

void init_sensores (ADC_HandleTypeDef* handler_adc){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	hadc = handler_adc;
 8000e40:	4a03      	ldr	r2, [pc, #12]	; (8000e50 <init_sensores+0x18>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]

}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	200001e0 	.word	0x200001e0

08000e54 <update_DHT>:


void update_DHT (void){
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
	datosDHT = DHT_getData(&sensorDHT);
 8000e5a:	4c08      	ldr	r4, [pc, #32]	; (8000e7c <update_DHT+0x28>)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <update_DHT+0x2c>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fc3f 	bl	80006e4 <DHT_getData>
 8000e66:	4622      	mov	r2, r4
 8000e68:	463b      	mov	r3, r7
 8000e6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e6e:	e882 0003 	stmia.w	r2, {r0, r1}
} //fin update_temp()
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200001d4 	.word	0x200001d4
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <get_datosDHT>:


DHT_data get_datosDHT (void){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	return datosDHT;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <get_datosDHT+0x20>)
 8000e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e94:	e883 0003 	stmia.w	r3, {r0, r1}
} //fin get_datosDHT()
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200001d4 	.word	0x200001d4

08000ea8 <update_ldr>:


void update_ldr (void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	lecturaLDR = HAL_ADC_GetValue(hadc);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <update_ldr+0x18>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 ff1b 	bl	8002cec <HAL_ADC_GetValue>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <update_ldr+0x1c>)
 8000eba:	601a      	str	r2, [r3, #0]
} //fin if update_ldr()
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001e0 	.word	0x200001e0
 8000ec4:	20000120 	.word	0x20000120

08000ec8 <get_ldr>:


uint32_t get_ldr (void){
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
	return lecturaLDR;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <get_ldr+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
} //fin get_ldr()
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000120 	.word	0x20000120

08000edc <get_umbralLDR>:


uint32_t get_umbralLDR (uint8_t u){
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	if (u != 0) return umbralMaxLDR;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <get_umbralLDR+0x16>
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <get_umbralLDR+0x24>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	e001      	b.n	8000ef6 <get_umbralLDR+0x1a>
	return umbralMinLDR;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <get_umbralLDR+0x28>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
} //fin get_umbralLDR
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000004 	.word	0x20000004
 8000f04:	20000008 	.word	0x20000008

08000f08 <set_umbralLDR>:


void set_umbralLDR (uint8_t u, uint32_t val){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
	if (u != 0){
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <set_umbralLDR+0x1a>
		umbralMaxLDR = val;
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <set_umbralLDR+0x28>)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6013      	str	r3, [r2, #0]
		return;
 8000f20:	e002      	b.n	8000f28 <set_umbralLDR+0x20>
	}

	umbralMinLDR = val;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <set_umbralLDR+0x2c>)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	6013      	str	r3, [r2, #0]
} //fin set_umbralLDR
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000004 	.word	0x20000004
 8000f34:	20000008 	.word	0x20000008

08000f38 <set_modoLuz>:


void set_modoLuz (uint8_t val){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	modoAuto = val;
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <set_modoLuz+0x30>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	7013      	strb	r3, [r2, #0]
	setOutput(OUT_MODO, !modoAuto); //LOGICA NEGATIVA
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <set_modoLuz+0x30>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4619      	mov	r1, r3
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff fe09 	bl	8000b70 <setOutput>
} //fin set_modoLuz()
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000124 	.word	0x20000124

08000f6c <get_modoLuz>:


uint8_t get_modoLuz (void){
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
	return modoAuto;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <get_modoLuz+0x10>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
} //fin get_modoLuz()
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	20000124 	.word	0x20000124

08000f80 <check_luzAuto>:

void check_luzAuto (void){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	switch (modoAuto) {
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <check_luzAuto+0x108>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <check_luzAuto+0x12>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d02d      	beq.n	8000fec <check_luzAuto+0x6c>
				default:
				break;
			} //fin switch estadoRele
		break;
		default:
		break;
 8000f90:	e078      	b.n	8001084 <check_luzAuto+0x104>
			if (getStatBoton(IN_MODO) == FALL){
 8000f92:	2005      	movs	r0, #5
 8000f94:	f7ff fdae 	bl	8000af4 <getStatBoton>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d105      	bne.n	8000faa <check_luzAuto+0x2a>
				set_modoLuz(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff ffca 	bl	8000f38 <set_modoLuz>
				refresh_infoModo();
 8000fa4:	f001 fa1e 	bl	80023e4 <refresh_infoModo>
				break;
 8000fa8:	e06c      	b.n	8001084 <check_luzAuto+0x104>
			if (getStatBoton(IN_LUZ) == FALL){
 8000faa:	2004      	movs	r0, #4
 8000fac:	f7ff fda2 	bl	8000af4 <getStatBoton>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d165      	bne.n	8001082 <check_luzAuto+0x102>
				estadoRele = !estadoRele;
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <check_luzAuto+0x10c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2301      	moveq	r3, #1
 8000fc0:	2300      	movne	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <check_luzAuto+0x10c>)
 8000fc8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele); //LOGICA NEGATIVA
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <check_luzAuto+0x10c>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd4:	482e      	ldr	r0, [pc, #184]	; (8001090 <check_luzAuto+0x110>)
 8000fd6:	f002 fb0e 	bl	80035f6 <HAL_GPIO_WritePin>
				setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <check_luzAuto+0x10c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fdc5 	bl	8000b70 <setOutput>
				refresh_infoModo();
 8000fe6:	f001 f9fd 	bl	80023e4 <refresh_infoModo>
		break;
 8000fea:	e04a      	b.n	8001082 <check_luzAuto+0x102>
			if (getStatBoton(IN_MODO) == FALL){
 8000fec:	2005      	movs	r0, #5
 8000fee:	f7ff fd81 	bl	8000af4 <getStatBoton>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d105      	bne.n	8001004 <check_luzAuto+0x84>
				set_modoLuz(0);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff9d 	bl	8000f38 <set_modoLuz>
				refresh_infoModo();
 8000ffe:	f001 f9f1 	bl	80023e4 <refresh_infoModo>
				break;
 8001002:	e03f      	b.n	8001084 <check_luzAuto+0x104>
			switch (estadoRele){ //LOGICA NEGATIVA
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <check_luzAuto+0x10c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01c      	beq.n	8001046 <check_luzAuto+0xc6>
 800100c:	2b01      	cmp	r3, #1
 800100e:	d000      	beq.n	8001012 <check_luzAuto+0x92>
				break;
 8001010:	e036      	b.n	8001080 <check_luzAuto+0x100>
					if (lecturaLDR < umbralMinLDR){
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <check_luzAuto+0x114>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <check_luzAuto+0x118>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	d22d      	bcs.n	800107a <check_luzAuto+0xfa>
						estadoRele = 0;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <check_luzAuto+0x10c>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele);
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <check_luzAuto+0x10c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	4818      	ldr	r0, [pc, #96]	; (8001090 <check_luzAuto+0x110>)
 8001030:	f002 fae1 	bl	80035f6 <HAL_GPIO_WritePin>
						setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <check_luzAuto+0x10c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fd98 	bl	8000b70 <setOutput>
						refresh_infoModo();
 8001040:	f001 f9d0 	bl	80023e4 <refresh_infoModo>
						break;
 8001044:	e01c      	b.n	8001080 <check_luzAuto+0x100>
					if (lecturaLDR > umbralMaxLDR){
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <check_luzAuto+0x114>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <check_luzAuto+0x11c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d915      	bls.n	800107e <check_luzAuto+0xfe>
						estadoRele = 1;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <check_luzAuto+0x10c>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, estadoRele);
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <check_luzAuto+0x10c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001062:	480b      	ldr	r0, [pc, #44]	; (8001090 <check_luzAuto+0x110>)
 8001064:	f002 fac7 	bl	80035f6 <HAL_GPIO_WritePin>
						setOutput(OUT_LUZ, estadoRele); //LOGICA NEGATIVA
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <check_luzAuto+0x10c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff fd7e 	bl	8000b70 <setOutput>
						refresh_infoModo();
 8001074:	f001 f9b6 	bl	80023e4 <refresh_infoModo>
						break;
 8001078:	e002      	b.n	8001080 <check_luzAuto+0x100>
				break;
 800107a:	bf00      	nop
 800107c:	e002      	b.n	8001084 <check_luzAuto+0x104>
				break;
 800107e:	bf00      	nop
		break;
 8001080:	e000      	b.n	8001084 <check_luzAuto+0x104>
		break;
 8001082:	bf00      	nop
	} //fin switch modoAuto
} //fin check_luzAuto()
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000124 	.word	0x20000124
 800108c:	200001dc 	.word	0x200001dc
 8001090:	40010c00 	.word	0x40010c00
 8001094:	20000120 	.word	0x20000120
 8001098:	20000008 	.word	0x20000008
 800109c:	20000004 	.word	0x20000004

080010a0 <getStat_rele>:


uint8_t getStat_rele (void){
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	return estadoRele;
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <getStat_rele+0x10>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
} //fin get_rele ()
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	200001dc 	.word	0x200001dc

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0310 	and.w	r3, r3, #16
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010e6:	f043 0320 	orr.w	r3, r3, #32
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a21      	ldr	r2, [pc, #132]	; (8001184 <MX_GPIO_Init+0xd0>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_GPIO_Init+0xd0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_GPIO_Init+0xd0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <MX_GPIO_Init+0xd0>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_GPIO_Init+0xd0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001130:	f002 fa61 	bl	80035f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_rele_GPIO_Port, OUT_rele_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <MX_GPIO_Init+0xd8>)
 800113c:	f002 fa5b 	bl	80035f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001144:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2302      	movs	r3, #2
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4619      	mov	r1, r3
 8001158:	480b      	ldr	r0, [pc, #44]	; (8001188 <MX_GPIO_Init+0xd4>)
 800115a:	f002 f8db 	bl	8003314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_rele_Pin;
 800115e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_rele_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_GPIO_Init+0xd8>)
 8001178:	f002 f8cc 	bl	8003314 <HAL_GPIO_Init>

}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40011000 	.word	0x40011000
 800118c:	40010c00 	.word	0x40010c00

08001190 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x50>)
 8001196:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <MX_I2C1_Init+0x54>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_I2C1_Init+0x50>)
 800119c:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <MX_I2C1_Init+0x58>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_I2C1_Init+0x50>)
 80011ce:	f002 fa2b 	bl	8003628 <HAL_I2C_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d8:	f000 fa84 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200001e4 	.word	0x200001e4
 80011e4:	40005400 	.word	0x40005400
 80011e8:	00061a80 	.word	0x00061a80

080011ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a15      	ldr	r2, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x70>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d123      	bne.n	8001254 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_I2C_MspInit+0x74>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_I2C_MspInit+0x78>)
 8001238:	f002 f86c 	bl	8003314 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_I2C_MspInit+0x74>)
 8001242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40005400 	.word	0x40005400
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00

08001268 <lcd_send_cmd>:

I2C_HandleTypeDef* i2c_handler;  // change your handler here accordingly
uint8_t SLAVE_ADDRESS_LCD; //(0x3F)<<1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f023 030f 	bic.w	r3, r3, #15
 8001278:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	f043 030c 	orr.w	r3, r3, #12
 8001286:	b2db      	uxtb	r3, r3
 8001288:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	b2db      	uxtb	r3, r3
 8001292:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	f043 030c 	orr.w	r3, r3, #12
 800129a:	b2db      	uxtb	r3, r3
 800129c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <lcd_send_cmd+0x60>)
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <lcd_send_cmd+0x64>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b299      	uxth	r1, r3
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2304      	movs	r3, #4
 80012bc:	f002 fadc 	bl	8003878 <HAL_I2C_Master_Transmit>
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000023c 	.word	0x2000023c
 80012cc:	20000238 	.word	0x20000238

080012d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f023 030f 	bic.w	r3, r3, #15
 80012e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	f043 030d 	orr.w	r3, r3, #13
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	f043 0309 	orr.w	r3, r3, #9
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80012fc:	7bbb      	ldrb	r3, [r7, #14]
 80012fe:	f043 030d 	orr.w	r3, r3, #13
 8001302:	b2db      	uxtb	r3, r3
 8001304:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001306:	7bbb      	ldrb	r3, [r7, #14]
 8001308:	f043 0309 	orr.w	r3, r3, #9
 800130c:	b2db      	uxtb	r3, r3
 800130e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <lcd_send_data+0x60>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <lcd_send_data+0x64>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b299      	uxth	r1, r3
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	2364      	movs	r3, #100	; 0x64
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2304      	movs	r3, #4
 8001324:	f002 faa8 	bl	8003878 <HAL_I2C_Master_Transmit>
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000023c 	.word	0x2000023c
 8001334:	20000238 	.word	0x20000238

08001338 <lcd_clear>:

void lcd_clear (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800133e:	2080      	movs	r0, #128	; 0x80
 8001340:	f7ff ff92 	bl	8001268 <lcd_send_cmd>
	for (int i=0; i<80; i++)
 8001344:	2300      	movs	r3, #0
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	e005      	b.n	8001356 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800134a:	2020      	movs	r0, #32
 800134c:	f7ff ffc0 	bl	80012d0 <lcd_send_data>
	for (int i=0; i<80; i++)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3301      	adds	r3, #1
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b4f      	cmp	r3, #79	; 0x4f
 800135a:	ddf6      	ble.n	800134a <lcd_clear+0x12>
	}
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <lcd_put_cur>:

void lcd_put_cur(int x, int y)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
    switch (y){
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d82b      	bhi.n	80013cc <lcd_put_cur+0x68>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <lcd_put_cur+0x18>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	0800138d 	.word	0x0800138d
 8001380:	0800139d 	.word	0x0800139d
 8001384:	080013ad 	.word	0x080013ad
 8001388:	080013bd 	.word	0x080013bd
    	case 0:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	3b80      	subs	r3, #128	; 0x80
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff67 	bl	8001268 <lcd_send_cmd>
    	break;
 800139a:	e017      	b.n	80013cc <lcd_put_cur+0x68>
    	case 1:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3b40      	subs	r3, #64	; 0x40
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff5f 	bl	8001268 <lcd_send_cmd>
    	break;
 80013aa:	e00f      	b.n	80013cc <lcd_put_cur+0x68>
    	case 2:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3b6c      	subs	r3, #108	; 0x6c
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff57 	bl	8001268 <lcd_send_cmd>
    	break;
 80013ba:	e007      	b.n	80013cc <lcd_put_cur+0x68>
    	case 3:
    		lcd_send_cmd(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	3b2c      	subs	r3, #44	; 0x2c
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff4f 	bl	8001268 <lcd_send_cmd>
    	break;
 80013ca:	bf00      	nop
    }
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 80013e0:	4a22      	ldr	r2, [pc, #136]	; (800146c <lcd_init+0x98>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b20      	ldr	r3, [pc, #128]	; (8001470 <lcd_init+0x9c>)
 80013ee:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f001 fad3 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x30);
 80013f6:	2030      	movs	r0, #48	; 0x30
 80013f8:	f7ff ff36 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80013fc:	2005      	movs	r0, #5
 80013fe:	f001 facd 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001402:	2030      	movs	r0, #48	; 0x30
 8001404:	f7ff ff30 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001408:	2001      	movs	r0, #1
 800140a:	f001 fac7 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x30);
 800140e:	2030      	movs	r0, #48	; 0x30
 8001410:	f7ff ff2a 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(10);
 8001414:	200a      	movs	r0, #10
 8001416:	f001 fac1 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800141a:	2020      	movs	r0, #32
 800141c:	f7ff ff24 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f001 fabb 	bl	800299c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001426:	2028      	movs	r0, #40	; 0x28
 8001428:	f7ff ff1e 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(1);
 800142c:	2001      	movs	r0, #1
 800142e:	f001 fab5 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001432:	2008      	movs	r0, #8
 8001434:	f7ff ff18 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f001 faaf 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800143e:	2001      	movs	r0, #1
 8001440:	f7ff ff12 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f001 faa9 	bl	800299c <HAL_Delay>
	HAL_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f001 faa6 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001450:	2006      	movs	r0, #6
 8001452:	f7ff ff09 	bl	8001268 <lcd_send_cmd>
	HAL_Delay(1);
 8001456:	2001      	movs	r0, #1
 8001458:	f001 faa0 	bl	800299c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800145c:	200c      	movs	r0, #12
 800145e:	f7ff ff03 	bl	8001268 <lcd_send_cmd>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000023c 	.word	0x2000023c
 8001470:	20000238 	.word	0x20000238

08001474 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800147c:	e006      	b.n	800148c <lcd_send_string+0x18>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff22 	bl	80012d0 <lcd_send_data>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f4      	bne.n	800147e <lcd_send_string+0xa>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <lcd_CustomChar_create>:


void lcd_CustomChar_create(uint8_t location, uint8_t charmap[]) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
	location <<= 3;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	71fb      	strb	r3, [r7, #7]

	lcd_send_cmd (0x40 | (location & 0x38) );
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fed1 	bl	8001268 <lcd_send_cmd>
	for (int i=0; i<8; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e009      	b.n	80014e0 <lcd_CustomChar_create+0x44>
		lcd_send_data(charmap[i]);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fefb 	bl	80012d0 <lcd_send_data>
	for (int i=0; i<8; i++) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	3301      	adds	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	ddf2      	ble.n	80014cc <lcd_CustomChar_create+0x30>
	}
} //fin lcd_CustomChar_create ()
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f001 f9ef 	bl	80028d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f883 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f7ff fdd9 	bl	80010b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001502:	f7ff fbb7 	bl	8000c74 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001506:	f7ff fbf3 	bl	8000cf0 <MX_ADC2_Init>
  MX_I2C1_Init();
 800150a:	f7ff fe41 	bl	8001190 <MX_I2C1_Init>
  MX_SPI1_Init();
 800150e:	f000 ff75 	bl	80023fc <MX_SPI1_Init>
  MX_TIM2_Init();
 8001512:	f001 f8cb 	bl	80026ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001516:	f001 f93b 	bl	8002790 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_I2C_Init(&hi2c1);
  HAL_TIM_Base_Start_IT(&htim2);
 800151a:	4834      	ldr	r0, [pc, #208]	; (80015ec <main+0xfc>)
 800151c:	f003 fe60 	bl	80051e0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8001520:	4833      	ldr	r0, [pc, #204]	; (80015f0 <main+0x100>)
 8001522:	f001 fb35 	bl	8002b90 <HAL_ADC_Start>

  HAL_StatusTypeDef i2c_status;

  for (uint8_t i = 0; i < 128; i++){
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e011      	b.n	8001550 <main+0x60>
	  i2c_status = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 1, 10);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	b29b      	uxth	r3, r3
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b299      	uxth	r1, r3
 8001534:	230a      	movs	r3, #10
 8001536:	2201      	movs	r2, #1
 8001538:	482e      	ldr	r0, [pc, #184]	; (80015f4 <main+0x104>)
 800153a:	f002 fcc9 	bl	8003ed0 <HAL_I2C_IsDeviceReady>
 800153e:	4603      	mov	r3, r0
 8001540:	71bb      	strb	r3, [r7, #6]
	  if(i2c_status == HAL_OK){
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d100      	bne.n	800154a <main+0x5a>
		  __NOP();
 8001548:	bf00      	nop
  for (uint8_t i = 0; i < 128; i++){
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	3301      	adds	r3, #1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dae9      	bge.n	800152c <main+0x3c>
	  }
  }

  lcd_init(&hi2c1, 0x27);
 8001558:	2127      	movs	r1, #39	; 0x27
 800155a:	4826      	ldr	r0, [pc, #152]	; (80015f4 <main+0x104>)
 800155c:	f7ff ff3a 	bl	80013d4 <lcd_init>
  init_botonera(&hi2c1, 0x20);
 8001560:	2120      	movs	r1, #32
 8001562:	4824      	ldr	r0, [pc, #144]	; (80015f4 <main+0x104>)
 8001564:	f7ff fa5a 	bl	8000a1c <init_botonera>
  init_sensores(&hadc1);
 8001568:	4821      	ldr	r0, [pc, #132]	; (80015f0 <main+0x100>)
 800156a:	f7ff fc65 	bl	8000e38 <init_sensores>
  set_modoLuz(0);
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff fce2 	bl	8000f38 <set_modoLuz>
  start_menu(0);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f8b9 	bl	80016ec <start_menu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag_tim2 != 0){
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <main+0x108>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d02c      	beq.n	80015dc <main+0xec>

		  if (periodo_IOport != 0){
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <main+0x10c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <main+0xa8>
			  periodo_IOport--;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <main+0x10c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <main+0x10c>)
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	e006      	b.n	80015a6 <main+0xb6>
		  }else{
			  lecturaTeclas(); //cada 20 ms.
 8001598:	f7ff fa6c 	bl	8000a74 <lecturaTeclas>
			  update_outputs(); //cada 20 ms.
 800159c:	f7ff fb16 	bl	8000bcc <update_outputs>
			  periodo_IOport = 1;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <main+0x10c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
		  } //fin if periodo_IOport

		  if (periodo_temp != 0){
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <main+0x110>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <main+0xcc>
			  periodo_temp--;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <main+0x110>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <main+0x110>)
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e008      	b.n	80015ce <main+0xde>
		  }else{
			  update_DHT();
 80015bc:	f7ff fc4a 	bl	8000e54 <update_DHT>
			  update_ldr();
 80015c0:	f7ff fc72 	bl	8000ea8 <update_ldr>
			  refresh_infoDHT();
 80015c4:	f000 ff02 	bl	80023cc <refresh_infoDHT>
			  periodo_temp = 99;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <main+0x110>)
 80015ca:	2263      	movs	r2, #99	; 0x63
 80015cc:	701a      	strb	r2, [r3, #0]
		  }

		  timeoutMenu();
 80015ce:	f000 f8bd 	bl	800174c <timeoutMenu>
		  check_duracionPulsadores();
 80015d2:	f000 f8c9 	bl	8001768 <check_duracionPulsadores>


		  flag_tim2 = 0;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <main+0x108>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
	  } //fin if flag_tim2

	  check_menu();
 80015dc:	f000 f8ac 	bl	8001738 <check_menu>
	  check_luzAuto();
 80015e0:	f7ff fcce 	bl	8000f80 <check_luzAuto>
	  update_teclas();
 80015e4:	f7ff fa5a 	bl	8000a9c <update_teclas>
	  if (flag_tim2 != 0){
 80015e8:	e7c7      	b.n	800157a <main+0x8a>
 80015ea:	bf00      	nop
 80015ec:	200002b4 	.word	0x200002b4
 80015f0:	200001a4 	.word	0x200001a4
 80015f4:	200001e4 	.word	0x200001e4
 80015f8:	20000125 	.word	0x20000125
 80015fc:	20000020 	.word	0x20000020
 8001600:	20000021 	.word	0x20000021

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	; 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160e:	2228      	movs	r2, #40	; 0x28
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fcc0 	bl	8005f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001634:	2301      	movs	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001642:	2301      	movs	r3, #1
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001650:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f862 	bl	8004724 <HAL_RCC_OscConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001666:	f000 f83d 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	230f      	movs	r3, #15
 800166c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	2302      	movs	r3, #2
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167c:	2300      	movs	r3, #0
 800167e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2102      	movs	r1, #2
 8001686:	4618      	mov	r0, r3
 8001688:	f003 facc 	bl	8004c24 <HAL_RCC_ClockConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001692:	f000 f827 	bl	80016e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001696:	2302      	movs	r3, #2
 8001698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800169a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800169e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 fc5a 	bl	8004f5c <HAL_RCCEx_PeriphCLKConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016ae:	f000 f819 	bl	80016e4 <Error_Handler>
  }
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d102      	bne.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
	}
} //fin HAL_TIM_PeriodElapsedCallback()
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000125 	.word	0x20000125

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ea:	e7fe      	b.n	80016ea <Error_Handler+0x6>

080016ec <start_menu>:
};

/////////////////////////////////////////
//         FUNCIONES PUBLICAS          //
/////////////////////////////////////////
void start_menu (uint8_t service){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	lcd_CustomChar_create(0, arriba);
 80016f6:	490b      	ldr	r1, [pc, #44]	; (8001724 <start_menu+0x38>)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fecf 	bl	800149c <lcd_CustomChar_create>
	lcd_CustomChar_create(1, abajo);
 80016fe:	490a      	ldr	r1, [pc, #40]	; (8001728 <start_menu+0x3c>)
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fecb 	bl	800149c <lcd_CustomChar_create>
	lcd_CustomChar_create(2, grados);
 8001706:	4909      	ldr	r1, [pc, #36]	; (800172c <start_menu+0x40>)
 8001708:	2002      	movs	r0, #2
 800170a:	f7ff fec7 	bl	800149c <lcd_CustomChar_create>
	menuActual = &menu[MENU_INFO];
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <start_menu+0x44>)
 8001710:	4a08      	ldr	r2, [pc, #32]	; (8001734 <start_menu+0x48>)
 8001712:	601a      	str	r2, [r3, #0]
	menuActual->inicia_menu();
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <start_menu+0x44>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	4798      	blx	r3
} //fin start_menu()
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000024 	.word	0x20000024
 8001728:	2000002c 	.word	0x2000002c
 800172c:	20000034 	.word	0x20000034
 8001730:	20000240 	.word	0x20000240
 8001734:	2000003c 	.word	0x2000003c

08001738 <check_menu>:


void check_menu (void){
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	menuActual->accion();
 800173c:	4b02      	ldr	r3, [pc, #8]	; (8001748 <check_menu+0x10>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4798      	blx	r3
} //fin check_menu()
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000240 	.word	0x20000240

0800174c <timeoutMenu>:


void timeoutMenu (void){
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	timeOut_pantalla++;
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <timeoutMenu+0x18>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	3301      	adds	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <timeoutMenu+0x18>)
 800175a:	801a      	strh	r2, [r3, #0]
} //fin timeoutMenu()
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	2000015a 	.word	0x2000015a

08001768 <check_duracionPulsadores>:


void check_duracionPulsadores (void){
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	holdBoton++;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <check_duracionPulsadores+0x24>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <check_duracionPulsadores+0x24>)
 8001776:	701a      	strb	r2, [r3, #0]
	repitePulso++;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <check_duracionPulsadores+0x28>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <check_duracionPulsadores+0x28>)
 8001782:	701a      	strb	r2, [r3, #0]
} //fin duracionPulsadores()
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000160 	.word	0x20000160
 8001790:	20000162 	.word	0x20000162

08001794 <init_Info>:

/////////////////////////////////////////
//          INICIALIZADORES            //
/////////////////////////////////////////

void init_Info (void){
 8001794:	b590      	push	{r4, r7, lr}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0

	sensorDHT = get_datosDHT();
 800179a:	4c34      	ldr	r4, [pc, #208]	; (800186c <init_Info+0xd8>)
 800179c:	463b      	mov	r3, r7
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb70 	bl	8000e84 <get_datosDHT>
 80017a4:	4622      	mov	r2, r4
 80017a6:	463b      	mov	r3, r7
 80017a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017ac:	e882 0003 	stmia.w	r2, {r0, r1}
	temperatura = sensorDHT.temp;
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <init_Info+0xd8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe ff27 	bl	8000608 <__aeabi_f2iz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <init_Info+0xdc>)
 80017c0:	701a      	strb	r2, [r3, #0]
	humedad = sensorDHT.hum;
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <init_Info+0xd8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe ff1e 	bl	8000608 <__aeabi_f2iz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <init_Info+0xe0>)
 80017d2:	701a      	strb	r2, [r3, #0]

	lcd_clear();
 80017d4:	f7ff fdb0 	bl	8001338 <lcd_clear>
	lcd_put_cur(0, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fdc2 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "Temp: %02d C", temperatura);
 80017e0:	4b23      	ldr	r3, [pc, #140]	; (8001870 <init_Info+0xdc>)
 80017e2:	f993 3000 	ldrsb.w	r3, [r3]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4923      	ldr	r1, [pc, #140]	; (8001878 <init_Info+0xe4>)
 80017ea:	4824      	ldr	r0, [pc, #144]	; (800187c <init_Info+0xe8>)
 80017ec:	f004 fbdc 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 80017f0:	4822      	ldr	r0, [pc, #136]	; (800187c <init_Info+0xe8>)
 80017f2:	f7ff fe3f 	bl	8001474 <lcd_send_string>
	lcd_put_cur(8, 0);
 80017f6:	2100      	movs	r1, #0
 80017f8:	2008      	movs	r0, #8
 80017fa:	f7ff fdb3 	bl	8001364 <lcd_put_cur>
	lcd_send_customChar(2); //grados
 80017fe:	2002      	movs	r0, #2
 8001800:	f7ff fd66 	bl	80012d0 <lcd_send_data>
	lcd_put_cur(0, 1);
 8001804:	2101      	movs	r1, #1
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fdac 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "Humedad: %02d%%", humedad);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <init_Info+0xe0>)
 800180e:	f993 3000 	ldrsb.w	r3, [r3]
 8001812:	461a      	mov	r2, r3
 8001814:	491a      	ldr	r1, [pc, #104]	; (8001880 <init_Info+0xec>)
 8001816:	4819      	ldr	r0, [pc, #100]	; (800187c <init_Info+0xe8>)
 8001818:	f004 fbc6 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <init_Info+0xe8>)
 800181e:	f7ff fe29 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 2);
 8001822:	2102      	movs	r1, #2
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fd9d 	bl	8001364 <lcd_put_cur>
	lcd_send_string("Luz: ");
 800182a:	4816      	ldr	r0, [pc, #88]	; (8001884 <init_Info+0xf0>)
 800182c:	f7ff fe22 	bl	8001474 <lcd_send_string>
	lcd_send_string( (getStat_rele() != 0) ? "APAGADA" : "PRENDIDA");
 8001830:	f7ff fc36 	bl	80010a0 <getStat_rele>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <init_Info+0xaa>
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <init_Info+0xf4>)
 800183c:	e000      	b.n	8001840 <init_Info+0xac>
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <init_Info+0xf8>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe17 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 3);
 8001846:	2103      	movs	r1, #3
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fd8b 	bl	8001364 <lcd_put_cur>
	lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL");
 800184e:	f7ff fb8d 	bl	8000f6c <get_modoLuz>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <init_Info+0xc8>
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <init_Info+0xfc>)
 800185a:	e000      	b.n	800185e <init_Info+0xca>
 800185c:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <init_Info+0x100>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe08 	bl	8001474 <lcd_send_string>
} //fin init_Info()
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	20000250 	.word	0x20000250
 8001870:	20000258 	.word	0x20000258
 8001874:	2000024c 	.word	0x2000024c
 8001878:	080067ec 	.word	0x080067ec
 800187c:	20000128 	.word	0x20000128
 8001880:	080067fc 	.word	0x080067fc
 8001884:	0800680c 	.word	0x0800680c
 8001888:	08006814 	.word	0x08006814
 800188c:	0800681c 	.word	0x0800681c
 8001890:	08006828 	.word	0x08006828
 8001894:	08006834 	.word	0x08006834

08001898 <init_Seleccion>:


void init_Seleccion (void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	lcd_clear();
 800189c:	f7ff fd4c 	bl	8001338 <lcd_clear>
	lcd_put_cur(7, 0);
 80018a0:	2100      	movs	r1, #0
 80018a2:	2007      	movs	r0, #7
 80018a4:	f7ff fd5e 	bl	8001364 <lcd_put_cur>
	lcd_send_string("MENU");
 80018a8:	4819      	ldr	r0, [pc, #100]	; (8001910 <init_Seleccion+0x78>)
 80018aa:	f7ff fde3 	bl	8001474 <lcd_send_string>
	lcd_put_cur(2, 2);
 80018ae:	2102      	movs	r1, #2
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fd57 	bl	8001364 <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 80018b6:	207f      	movs	r0, #127	; 0x7f
 80018b8:	f7ff fd0a 	bl	80012d0 <lcd_send_data>
	switch (cursor){
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <init_Seleccion+0x7c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d00c      	beq.n	80018de <init_Seleccion+0x46>
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d012      	beq.n	80018ee <init_Seleccion+0x56>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d000      	beq.n	80018ce <init_Seleccion+0x36>
		case 2:
			lcd_put_cur(4, 2);
			lcd_send_string("UMBRAL NOCHE");
		break;
		default:
		break;
 80018cc:	e017      	b.n	80018fe <init_Seleccion+0x66>
			lcd_put_cur(4, 2);
 80018ce:	2102      	movs	r1, #2
 80018d0:	2004      	movs	r0, #4
 80018d2:	f7ff fd47 	bl	8001364 <lcd_put_cur>
			lcd_send_string("MODO DE LUZ");
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <init_Seleccion+0x80>)
 80018d8:	f7ff fdcc 	bl	8001474 <lcd_send_string>
		break;
 80018dc:	e00f      	b.n	80018fe <init_Seleccion+0x66>
			lcd_put_cur(5, 2);
 80018de:	2102      	movs	r1, #2
 80018e0:	2005      	movs	r0, #5
 80018e2:	f7ff fd3f 	bl	8001364 <lcd_put_cur>
			lcd_send_string("UMBRAL DIA");
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <init_Seleccion+0x84>)
 80018e8:	f7ff fdc4 	bl	8001474 <lcd_send_string>
		break;
 80018ec:	e007      	b.n	80018fe <init_Seleccion+0x66>
			lcd_put_cur(4, 2);
 80018ee:	2102      	movs	r1, #2
 80018f0:	2004      	movs	r0, #4
 80018f2:	f7ff fd37 	bl	8001364 <lcd_put_cur>
			lcd_send_string("UMBRAL NOCHE");
 80018f6:	480a      	ldr	r0, [pc, #40]	; (8001920 <init_Seleccion+0x88>)
 80018f8:	f7ff fdbc 	bl	8001474 <lcd_send_string>
		break;
 80018fc:	bf00      	nop
	} //fin switch cursor
	lcd_put_cur(17, 2);
 80018fe:	2102      	movs	r1, #2
 8001900:	2011      	movs	r0, #17
 8001902:	f7ff fd2f 	bl	8001364 <lcd_put_cur>
	lcd_send_data(0x7E); //->
 8001906:	207e      	movs	r0, #126	; 0x7e
 8001908:	f7ff fce2 	bl	80012d0 <lcd_send_data>
} //fin init_Seleccion()
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	0800683c 	.word	0x0800683c
 8001914:	2000015e 	.word	0x2000015e
 8001918:	08006844 	.word	0x08006844
 800191c:	08006850 	.word	0x08006850
 8001920:	0800685c 	.word	0x0800685c

08001924 <init_ModoLuz>:


void init_ModoLuz (void){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	lcd_clear();
 8001928:	f7ff fd06 	bl	8001338 <lcd_clear>
	lcd_put_cur(0, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fd18 	bl	8001364 <lcd_put_cur>
	lcd_send_string("MODO LUZ AUTOMATICA");
 8001934:	4815      	ldr	r0, [pc, #84]	; (800198c <init_ModoLuz+0x68>)
 8001936:	f7ff fd9d 	bl	8001474 <lcd_send_string>
	lcd_put_cur(4, 2);
 800193a:	2102      	movs	r1, #2
 800193c:	2004      	movs	r0, #4
 800193e:	f7ff fd11 	bl	8001364 <lcd_put_cur>
	lcd_send_data(0x7F); //<-
 8001942:	207f      	movs	r0, #127	; 0x7f
 8001944:	f7ff fcc4 	bl	80012d0 <lcd_send_data>
	lcd_put_cur(9, 2);
 8001948:	2102      	movs	r1, #2
 800194a:	2009      	movs	r0, #9
 800194c:	f7ff fd0a 	bl	8001364 <lcd_put_cur>
	modoLuz = get_modoLuz();
 8001950:	f7ff fb0c 	bl	8000f6c <get_modoLuz>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <init_ModoLuz+0x6c>)
 800195a:	701a      	strb	r2, [r3, #0]
	switch (modoLuz) {
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <init_ModoLuz+0x6c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <init_ModoLuz+0x46>
 8001964:	2b01      	cmp	r3, #1
 8001966:	d004      	beq.n	8001972 <init_ModoLuz+0x4e>
		break;
		case 1:
			lcd_send_string("ON");
		break;
		default:
		break;
 8001968:	e007      	b.n	800197a <init_ModoLuz+0x56>
			lcd_send_string("OFF");
 800196a:	480a      	ldr	r0, [pc, #40]	; (8001994 <init_ModoLuz+0x70>)
 800196c:	f7ff fd82 	bl	8001474 <lcd_send_string>
		break;
 8001970:	e003      	b.n	800197a <init_ModoLuz+0x56>
			lcd_send_string("ON");
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <init_ModoLuz+0x74>)
 8001974:	f7ff fd7e 	bl	8001474 <lcd_send_string>
		break;
 8001978:	bf00      	nop
	} //fin switch modoLuz
	lcd_put_cur(15, 2);
 800197a:	2102      	movs	r1, #2
 800197c:	200f      	movs	r0, #15
 800197e:	f7ff fcf1 	bl	8001364 <lcd_put_cur>
	lcd_send_data(0x7E); //->
 8001982:	207e      	movs	r0, #126	; 0x7e
 8001984:	f7ff fca4 	bl	80012d0 <lcd_send_data>
} //fin init_ModoLuz()
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	0800686c 	.word	0x0800686c
 8001990:	2000024d 	.word	0x2000024d
 8001994:	08006880 	.word	0x08006880
 8001998:	08006884 	.word	0x08006884

0800199c <init_LdrPrende>:


void init_LdrPrende (void){
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af02      	add	r7, sp, #8
	lcd_clear();
 80019a2:	f7ff fcc9 	bl	8001338 <lcd_clear>
	lcd_put_cur(0, 0);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fcdb 	bl	8001364 <lcd_put_cur>
	lcd_send_string("    UMBRAL NOCHE    ");
 80019ae:	4821      	ldr	r0, [pc, #132]	; (8001a34 <init_LdrPrende+0x98>)
 80019b0:	f7ff fd60 	bl	8001474 <lcd_send_string>
	valorUmbral = get_umbralLDR(0);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fa91 	bl	8000edc <get_umbralLDR>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <init_LdrPrende+0x9c>)
 80019be:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 80019c0:	2101      	movs	r1, #1
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fcce 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <init_LdrPrende+0x9c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	491b      	ldr	r1, [pc, #108]	; (8001a3c <init_LdrPrende+0xa0>)
 80019d0:	481b      	ldr	r0, [pc, #108]	; (8001a40 <init_LdrPrende+0xa4>)
 80019d2:	f004 fae9 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 80019d6:	481a      	ldr	r0, [pc, #104]	; (8001a40 <init_LdrPrende+0xa4>)
 80019d8:	f7ff fd4c 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 2);
 80019dc:	2102      	movs	r1, #2
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff fcc0 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 80019e4:	f7ff fa70 	bl	8000ec8 <get_ldr>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	4915      	ldr	r1, [pc, #84]	; (8001a44 <init_LdrPrende+0xa8>)
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <init_LdrPrende+0xa4>)
 80019f0:	f004 fada 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <init_LdrPrende+0xa4>)
 80019f6:	f7ff fd3d 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 3);
 80019fa:	2103      	movs	r1, #3
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fcb1 	bl	8001364 <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001a02:	4811      	ldr	r0, [pc, #68]	; (8001a48 <init_LdrPrende+0xac>)
 8001a04:	f7ff fd36 	bl	8001474 <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <init_LdrPrende+0x9c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	237e      	movs	r3, #126	; 0x7e
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	227f      	movs	r2, #127	; 0x7f
 8001a14:	490d      	ldr	r1, [pc, #52]	; (8001a4c <init_LdrPrende+0xb0>)
 8001a16:	480a      	ldr	r0, [pc, #40]	; (8001a40 <init_LdrPrende+0xa4>)
 8001a18:	f004 fac6 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 8001a1c:	4808      	ldr	r0, [pc, #32]	; (8001a40 <init_LdrPrende+0xa4>)
 8001a1e:	f7ff fd29 	bl	8001474 <lcd_send_string>
	pantallaUmbral = 0;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <init_LdrPrende+0xb4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <init_LdrPrende+0xb8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]
} //fin init_LdrPrende()
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08006888 	.word	0x08006888
 8001a38:	20000248 	.word	0x20000248
 8001a3c:	080068a0 	.word	0x080068a0
 8001a40:	20000128 	.word	0x20000128
 8001a44:	080068b8 	.word	0x080068b8
 8001a48:	080068cc 	.word	0x080068cc
 8001a4c:	080068dc 	.word	0x080068dc
 8001a50:	2000015f 	.word	0x2000015f
 8001a54:	2000015a 	.word	0x2000015a

08001a58 <init_LdrApaga>:


void init_LdrApaga (void){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af02      	add	r7, sp, #8
	lcd_clear();
 8001a5e:	f7ff fc6b 	bl	8001338 <lcd_clear>
	lcd_put_cur(0, 0);
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fc7d 	bl	8001364 <lcd_put_cur>
	lcd_send_string("     UMBRAL DIA     ");
 8001a6a:	4821      	ldr	r0, [pc, #132]	; (8001af0 <init_LdrApaga+0x98>)
 8001a6c:	f7ff fd02 	bl	8001474 <lcd_send_string>
	valorUmbral = get_umbralLDR(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fa33 	bl	8000edc <get_umbralLDR>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <init_LdrApaga+0x9c>)
 8001a7a:	601a      	str	r2, [r3, #0]
	lcd_put_cur(0, 1);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fc70 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "VALOR GRABADO: %04lu", valorUmbral);
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <init_LdrApaga+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	491b      	ldr	r1, [pc, #108]	; (8001af8 <init_LdrApaga+0xa0>)
 8001a8c:	481b      	ldr	r0, [pc, #108]	; (8001afc <init_LdrApaga+0xa4>)
 8001a8e:	f004 fa8b 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 8001a92:	481a      	ldr	r0, [pc, #104]	; (8001afc <init_LdrApaga+0xa4>)
 8001a94:	f7ff fcee 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 2);
 8001a98:	2102      	movs	r1, #2
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fc62 	bl	8001364 <lcd_put_cur>
	sprintf(texto, "VALOR ACTUAL: %04lu", get_ldr());
 8001aa0:	f7ff fa12 	bl	8000ec8 <get_ldr>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4915      	ldr	r1, [pc, #84]	; (8001b00 <init_LdrApaga+0xa8>)
 8001aaa:	4814      	ldr	r0, [pc, #80]	; (8001afc <init_LdrApaga+0xa4>)
 8001aac:	f004 fa7c 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 8001ab0:	4812      	ldr	r0, [pc, #72]	; (8001afc <init_LdrApaga+0xa4>)
 8001ab2:	f7ff fcdf 	bl	8001474 <lcd_send_string>
	lcd_put_cur(0, 3);
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fc53 	bl	8001364 <lcd_put_cur>
	lcd_send_string("VALOR NUEVO: ");
 8001abe:	4811      	ldr	r0, [pc, #68]	; (8001b04 <init_LdrApaga+0xac>)
 8001ac0:	f7ff fcd8 	bl	8001474 <lcd_send_string>
	sprintf(texto, "%c%04lu%c", 0x7F, valorUmbral, 0x7E);
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <init_LdrApaga+0x9c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	237e      	movs	r3, #126	; 0x7e
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4613      	mov	r3, r2
 8001ace:	227f      	movs	r2, #127	; 0x7f
 8001ad0:	490d      	ldr	r1, [pc, #52]	; (8001b08 <init_LdrApaga+0xb0>)
 8001ad2:	480a      	ldr	r0, [pc, #40]	; (8001afc <init_LdrApaga+0xa4>)
 8001ad4:	f004 fa68 	bl	8005fa8 <siprintf>
	lcd_send_string(texto);
 8001ad8:	4808      	ldr	r0, [pc, #32]	; (8001afc <init_LdrApaga+0xa4>)
 8001ada:	f7ff fccb 	bl	8001474 <lcd_send_string>
	pantallaUmbral = 0;
 8001ade:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <init_LdrApaga+0xb4>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
	timeOut_pantalla = 0;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <init_LdrApaga+0xb8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	801a      	strh	r2, [r3, #0]
} //fin init_LdrApaga()
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	080068e8 	.word	0x080068e8
 8001af4:	20000248 	.word	0x20000248
 8001af8:	080068a0 	.word	0x080068a0
 8001afc:	20000128 	.word	0x20000128
 8001b00:	080068b8 	.word	0x080068b8
 8001b04:	080068cc 	.word	0x080068cc
 8001b08:	080068dc 	.word	0x080068dc
 8001b0c:	2000015f 	.word	0x2000015f
 8001b10:	2000015a 	.word	0x2000015a

08001b14 <acc_Info>:

/////////////////////////////////////////
//            ACCIONES                 //
/////////////////////////////////////////

void acc_Info (void){
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0

	if (flag_infoDHT != 0){
 8001b1a:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <acc_Info+0x154>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <acc_Info+0xe8>
		sensorDHT = get_datosDHT();
 8001b22:	4c52      	ldr	r4, [pc, #328]	; (8001c6c <acc_Info+0x158>)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f9ac 	bl	8000e84 <get_datosDHT>
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	463b      	mov	r3, r7
 8001b30:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b34:	e882 0003 	stmia.w	r2, {r0, r1}
		temperatura = sensorDHT.temp;
 8001b38:	4b4c      	ldr	r3, [pc, #304]	; (8001c6c <acc_Info+0x158>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fd63 	bl	8000608 <__aeabi_f2iz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <acc_Info+0x15c>)
 8001b48:	701a      	strb	r2, [r3, #0]
		humedad = sensorDHT.hum;
 8001b4a:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <acc_Info+0x158>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd5a 	bl	8000608 <__aeabi_f2iz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b25a      	sxtb	r2, r3
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <acc_Info+0x160>)
 8001b5a:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(6, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2006      	movs	r0, #6
 8001b60:	f7ff fc00 	bl	8001364 <lcd_put_cur>
		sprintf(texto, "%02d  ", temperatura);
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <acc_Info+0x15c>)
 8001b66:	f993 3000 	ldrsb.w	r3, [r3]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4942      	ldr	r1, [pc, #264]	; (8001c78 <acc_Info+0x164>)
 8001b6e:	4843      	ldr	r0, [pc, #268]	; (8001c7c <acc_Info+0x168>)
 8001b70:	f004 fa1a 	bl	8005fa8 <siprintf>
		lcd_send_string(texto);
 8001b74:	4841      	ldr	r0, [pc, #260]	; (8001c7c <acc_Info+0x168>)
 8001b76:	f7ff fc7d 	bl	8001474 <lcd_send_string>
		lcd_put_cur(8, 0);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2008      	movs	r0, #8
 8001b7e:	f7ff fbf1 	bl	8001364 <lcd_put_cur>
		lcd_send_customChar(2); //grados
 8001b82:	2002      	movs	r0, #2
 8001b84:	f7ff fba4 	bl	80012d0 <lcd_send_data>
		lcd_put_cur(9, 0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2009      	movs	r0, #9
 8001b8c:	f7ff fbea 	bl	8001364 <lcd_put_cur>
		lcd_send_string("C");
 8001b90:	483b      	ldr	r0, [pc, #236]	; (8001c80 <acc_Info+0x16c>)
 8001b92:	f7ff fc6f 	bl	8001474 <lcd_send_string>

		lcd_put_cur(9, 1);
 8001b96:	2101      	movs	r1, #1
 8001b98:	2009      	movs	r0, #9
 8001b9a:	f7ff fbe3 	bl	8001364 <lcd_put_cur>
		sprintf(texto, "%02d%%  ", humedad);
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <acc_Info+0x160>)
 8001ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4937      	ldr	r1, [pc, #220]	; (8001c84 <acc_Info+0x170>)
 8001ba8:	4834      	ldr	r0, [pc, #208]	; (8001c7c <acc_Info+0x168>)
 8001baa:	f004 f9fd 	bl	8005fa8 <siprintf>
		lcd_send_string(texto);
 8001bae:	4833      	ldr	r0, [pc, #204]	; (8001c7c <acc_Info+0x168>)
 8001bb0:	f7ff fc60 	bl	8001474 <lcd_send_string>

		lcd_put_cur(5, 2);
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	2005      	movs	r0, #5
 8001bb8:	f7ff fbd4 	bl	8001364 <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 8001bbc:	f7ff fa70 	bl	80010a0 <getStat_rele>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <acc_Info+0xb6>
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <acc_Info+0x174>)
 8001bc8:	e000      	b.n	8001bcc <acc_Info+0xb8>
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <acc_Info+0x178>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fc51 	bl	8001474 <lcd_send_string>
		lcd_put_cur(0, 3);
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f7ff fbc5 	bl	8001364 <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8001bda:	f7ff f9c7 	bl	8000f6c <get_modoLuz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <acc_Info+0xd4>
 8001be4:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <acc_Info+0x17c>)
 8001be6:	e000      	b.n	8001bea <acc_Info+0xd6>
 8001be8:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <acc_Info+0x180>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fc42 	bl	8001474 <lcd_send_string>

		flag_infoDHT = 0;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <acc_Info+0x154>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
		flag_infoModo = 0;
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <acc_Info+0x184>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	} //fin if flag_infoDHT

	if (flag_infoModo != 0){
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <acc_Info+0x184>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <acc_Info+0x132>
		lcd_put_cur(5, 2);
 8001c04:	2102      	movs	r1, #2
 8001c06:	2005      	movs	r0, #5
 8001c08:	f7ff fbac 	bl	8001364 <lcd_put_cur>
		lcd_send_string( (getStat_rele() != 0) ? "APAGADA " : "PRENDIDA");
 8001c0c:	f7ff fa48 	bl	80010a0 <getStat_rele>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <acc_Info+0x106>
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <acc_Info+0x174>)
 8001c18:	e000      	b.n	8001c1c <acc_Info+0x108>
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <acc_Info+0x178>)
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc29 	bl	8001474 <lcd_send_string>
		lcd_put_cur(0, 3);
 8001c22:	2103      	movs	r1, #3
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fb9d 	bl	8001364 <lcd_put_cur>
		lcd_send_string((get_modoLuz() != 0) ? "AUTOMATICO" : "MANUAL    ");
 8001c2a:	f7ff f99f 	bl	8000f6c <get_modoLuz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <acc_Info+0x124>
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <acc_Info+0x17c>)
 8001c36:	e000      	b.n	8001c3a <acc_Info+0x126>
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <acc_Info+0x180>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fc1a 	bl	8001474 <lcd_send_string>

		flag_infoModo = 0;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <acc_Info+0x184>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
	}

	if (getStatBoton(IN_OK) == FALL){
 8001c46:	2003      	movs	r0, #3
 8001c48:	f7fe ff54 	bl	8000af4 <getStatBoton>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d106      	bne.n	8001c60 <acc_Info+0x14c>
		menuActual = &menu[MENU_SELECCION];
 8001c52:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <acc_Info+0x188>)
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <acc_Info+0x18c>)
 8001c56:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <acc_Info+0x188>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_Info()
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	2000015c 	.word	0x2000015c
 8001c6c:	20000250 	.word	0x20000250
 8001c70:	20000258 	.word	0x20000258
 8001c74:	2000024c 	.word	0x2000024c
 8001c78:	08006900 	.word	0x08006900
 8001c7c:	20000128 	.word	0x20000128
 8001c80:	08006908 	.word	0x08006908
 8001c84:	0800690c 	.word	0x0800690c
 8001c88:	08006918 	.word	0x08006918
 8001c8c:	0800681c 	.word	0x0800681c
 8001c90:	08006828 	.word	0x08006828
 8001c94:	08006924 	.word	0x08006924
 8001c98:	2000015d 	.word	0x2000015d
 8001c9c:	20000240 	.word	0x20000240
 8001ca0:	2000004c 	.word	0x2000004c

08001ca4 <acc_Seleccion>:


void acc_Seleccion (void){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0

	if (getStatBoton(IN_BACK) == FALL){
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7fe ff23 	bl	8000af4 <getStatBoton>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d106      	bne.n	8001cc2 <acc_Seleccion+0x1e>
		menuActual = &menu[MENU_INFO];
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <acc_Seleccion+0x114>)
 8001cb6:	4a41      	ldr	r2, [pc, #260]	; (8001dbc <acc_Seleccion+0x118>)
 8001cb8:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <acc_Seleccion+0x114>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7fe ff16 	bl	8000af4 <getStatBoton>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d125      	bne.n	8001d1a <acc_Seleccion+0x76>
		cursor--;
 8001cce:	4b3c      	ldr	r3, [pc, #240]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001cd8:	701a      	strb	r2, [r3, #0]
		if (cursor > 2) cursor = 2;
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d902      	bls.n	8001ce8 <acc_Seleccion+0x44>
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 8001ce8:	2102      	movs	r1, #2
 8001cea:	2003      	movs	r0, #3
 8001cec:	f7ff fb3a 	bl	8001364 <lcd_put_cur>
		switch (cursor){
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d008      	beq.n	8001d0a <acc_Seleccion+0x66>
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d00a      	beq.n	8001d12 <acc_Seleccion+0x6e>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d000      	beq.n	8001d02 <acc_Seleccion+0x5e>
			break;
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
			break;
			default:
			break;
 8001d00:	e00c      	b.n	8001d1c <acc_Seleccion+0x78>
				lcd_send_string(" MODO DE LUZ  ");
 8001d02:	4830      	ldr	r0, [pc, #192]	; (8001dc4 <acc_Seleccion+0x120>)
 8001d04:	f7ff fbb6 	bl	8001474 <lcd_send_string>
			break;
 8001d08:	e008      	b.n	8001d1c <acc_Seleccion+0x78>
				lcd_send_string("  UMBRAL DIA  ");
 8001d0a:	482f      	ldr	r0, [pc, #188]	; (8001dc8 <acc_Seleccion+0x124>)
 8001d0c:	f7ff fbb2 	bl	8001474 <lcd_send_string>
			break;
 8001d10:	e004      	b.n	8001d1c <acc_Seleccion+0x78>
				lcd_send_string(" UMBRAL NOCHE ");
 8001d12:	482e      	ldr	r0, [pc, #184]	; (8001dcc <acc_Seleccion+0x128>)
 8001d14:	f7ff fbae 	bl	8001474 <lcd_send_string>
			break;
 8001d18:	e000      	b.n	8001d1c <acc_Seleccion+0x78>
		} //fin switch cursor
	} //fin if IN_LEFT
 8001d1a:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7fe fee9 	bl	8000af4 <getStatBoton>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d125      	bne.n	8001d74 <acc_Seleccion+0xd0>
		cursor++;
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d32:	701a      	strb	r2, [r3, #0]
		if (cursor > 2) cursor = 0;
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d902      	bls.n	8001d42 <acc_Seleccion+0x9e>
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]

		lcd_put_cur(3, 2);
 8001d42:	2102      	movs	r1, #2
 8001d44:	2003      	movs	r0, #3
 8001d46:	f7ff fb0d 	bl	8001364 <lcd_put_cur>
		switch (cursor){
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d008      	beq.n	8001d64 <acc_Seleccion+0xc0>
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d00a      	beq.n	8001d6c <acc_Seleccion+0xc8>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d000      	beq.n	8001d5c <acc_Seleccion+0xb8>
			break;
			case 2:
				lcd_send_string(" UMBRAL NOCHE ");
			break;
			default:
			break;
 8001d5a:	e00c      	b.n	8001d76 <acc_Seleccion+0xd2>
				lcd_send_string(" MODO DE LUZ  ");
 8001d5c:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <acc_Seleccion+0x120>)
 8001d5e:	f7ff fb89 	bl	8001474 <lcd_send_string>
			break;
 8001d62:	e008      	b.n	8001d76 <acc_Seleccion+0xd2>
				lcd_send_string("  UMBRAL DIA  ");
 8001d64:	4818      	ldr	r0, [pc, #96]	; (8001dc8 <acc_Seleccion+0x124>)
 8001d66:	f7ff fb85 	bl	8001474 <lcd_send_string>
			break;
 8001d6a:	e004      	b.n	8001d76 <acc_Seleccion+0xd2>
				lcd_send_string(" UMBRAL NOCHE ");
 8001d6c:	4817      	ldr	r0, [pc, #92]	; (8001dcc <acc_Seleccion+0x128>)
 8001d6e:	f7ff fb81 	bl	8001474 <lcd_send_string>
			break;
 8001d72:	e000      	b.n	8001d76 <acc_Seleccion+0xd2>
		} //fin switch cursor
	} //fin if IN_RIGHT
 8001d74:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 8001d76:	2003      	movs	r0, #3
 8001d78:	f7fe febc 	bl	8000af4 <getStatBoton>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d118      	bne.n	8001db4 <acc_Seleccion+0x110>
		switch (cursor){
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <acc_Seleccion+0x11c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d008      	beq.n	8001d9c <acc_Seleccion+0xf8>
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d00a      	beq.n	8001da4 <acc_Seleccion+0x100>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d000      	beq.n	8001d94 <acc_Seleccion+0xf0>
			break;
			case 2:
				menuActual = &menu[MENU_LDR_PRENDE];
			break;
			default:
			break;
 8001d92:	e00b      	b.n	8001dac <acc_Seleccion+0x108>
				menuActual = &menu[MENU_MODO_LUZ];
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <acc_Seleccion+0x114>)
 8001d96:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <acc_Seleccion+0x12c>)
 8001d98:	601a      	str	r2, [r3, #0]
			break;
 8001d9a:	e007      	b.n	8001dac <acc_Seleccion+0x108>
				menuActual = &menu[MENU_LDR_APAGA];
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <acc_Seleccion+0x114>)
 8001d9e:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <acc_Seleccion+0x130>)
 8001da0:	601a      	str	r2, [r3, #0]
			break;
 8001da2:	e003      	b.n	8001dac <acc_Seleccion+0x108>
				menuActual = &menu[MENU_LDR_PRENDE];
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <acc_Seleccion+0x114>)
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <acc_Seleccion+0x134>)
 8001da8:	601a      	str	r2, [r3, #0]
			break;
 8001daa:	bf00      	nop
		} //fin switch cursor
		menuActual->inicia_menu();
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <acc_Seleccion+0x114>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4798      	blx	r3
	} //fin if IN_OK

} //fin acc_Seleccion()
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000240 	.word	0x20000240
 8001dbc:	2000003c 	.word	0x2000003c
 8001dc0:	2000015e 	.word	0x2000015e
 8001dc4:	08006930 	.word	0x08006930
 8001dc8:	08006940 	.word	0x08006940
 8001dcc:	08006950 	.word	0x08006950
 8001dd0:	2000005c 	.word	0x2000005c
 8001dd4:	2000007c 	.word	0x2000007c
 8001dd8:	2000006c 	.word	0x2000006c

08001ddc <acc_ModoLuz>:


void acc_ModoLuz (void){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	if (getStatBoton(IN_BACK) == FALL){
 8001de0:	2002      	movs	r0, #2
 8001de2:	f7fe fe87 	bl	8000af4 <getStatBoton>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d106      	bne.n	8001dfa <acc_ModoLuz+0x1e>
		menuActual = &menu[MENU_SELECCION];
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <acc_ModoLuz+0xdc>)
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <acc_ModoLuz+0xe0>)
 8001df0:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <acc_ModoLuz+0xdc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4798      	blx	r3
	} //fin if IN_BACK

	if (getStatBoton(IN_LEFT) == FALL){
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7fe fe7a 	bl	8000af4 <getStatBoton>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d11d      	bne.n	8001e42 <acc_ModoLuz+0x66>
		if (modoLuz != 0){
 8001e06:	4b2e      	ldr	r3, [pc, #184]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <acc_ModoLuz+0x3a>
			modoLuz = 0;
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e002      	b.n	8001e1c <acc_ModoLuz+0x40>
		}else{
			modoLuz = 1;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	2009      	movs	r0, #9
 8001e20:	f7ff faa0 	bl	8001364 <lcd_put_cur>
		switch (modoLuz) {
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <acc_ModoLuz+0x56>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d004      	beq.n	8001e3a <acc_ModoLuz+0x5e>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 8001e30:	e008      	b.n	8001e44 <acc_ModoLuz+0x68>
				lcd_send_string("OFF");
 8001e32:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <acc_ModoLuz+0xe8>)
 8001e34:	f7ff fb1e 	bl	8001474 <lcd_send_string>
			break;
 8001e38:	e004      	b.n	8001e44 <acc_ModoLuz+0x68>
				lcd_send_string("ON ");
 8001e3a:	4823      	ldr	r0, [pc, #140]	; (8001ec8 <acc_ModoLuz+0xec>)
 8001e3c:	f7ff fb1a 	bl	8001474 <lcd_send_string>
			break;
 8001e40:	e000      	b.n	8001e44 <acc_ModoLuz+0x68>
		} //fin switch modoLuz
	} //fin if IN_LEFT
 8001e42:	bf00      	nop

	if (getStatBoton(IN_RIGHT) == FALL){
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fe55 	bl	8000af4 <getStatBoton>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d11d      	bne.n	8001e8c <acc_ModoLuz+0xb0>
		if (modoLuz != 0){
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <acc_ModoLuz+0x84>
			modoLuz = 0;
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e002      	b.n	8001e66 <acc_ModoLuz+0x8a>
		}else{
			modoLuz = 1;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(9, 2);
 8001e66:	2102      	movs	r1, #2
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f7ff fa7b 	bl	8001364 <lcd_put_cur>
		switch (modoLuz) {
 8001e6e:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <acc_ModoLuz+0xa0>
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d004      	beq.n	8001e84 <acc_ModoLuz+0xa8>
			break;
			case 1:
				lcd_send_string("ON ");
			break;
			default:
			break;
 8001e7a:	e008      	b.n	8001e8e <acc_ModoLuz+0xb2>
				lcd_send_string("OFF");
 8001e7c:	4811      	ldr	r0, [pc, #68]	; (8001ec4 <acc_ModoLuz+0xe8>)
 8001e7e:	f7ff faf9 	bl	8001474 <lcd_send_string>
			break;
 8001e82:	e004      	b.n	8001e8e <acc_ModoLuz+0xb2>
				lcd_send_string("ON ");
 8001e84:	4810      	ldr	r0, [pc, #64]	; (8001ec8 <acc_ModoLuz+0xec>)
 8001e86:	f7ff faf5 	bl	8001474 <lcd_send_string>
			break;
 8001e8a:	e000      	b.n	8001e8e <acc_ModoLuz+0xb2>
		} //fin switch modoLuz
	} //fin if IN_RIGHT
 8001e8c:	bf00      	nop

	if (getStatBoton(IN_OK) == FALL){
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f7fe fe30 	bl	8000af4 <getStatBoton>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d10b      	bne.n	8001eb2 <acc_ModoLuz+0xd6>
//		if (modoLuz != 0){
//			setOutput(OUT_MODO, 0); //logica negativa
//		}else{
//			setOutput(OUT_MODO, 1); //logica negativa
//		}
		set_modoLuz(modoLuz);
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <acc_ModoLuz+0xe4>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f84a 	bl	8000f38 <set_modoLuz>

		menuActual = &menu[MENU_SELECCION];
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <acc_ModoLuz+0xdc>)
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <acc_ModoLuz+0xe0>)
 8001ea8:	601a      	str	r2, [r3, #0]
		menuActual->inicia_menu();
 8001eaa:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <acc_ModoLuz+0xdc>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4798      	blx	r3
	} //fin if IN_OK
} //fin acc_ModoLuz()
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000240 	.word	0x20000240
 8001ebc:	2000004c 	.word	0x2000004c
 8001ec0:	2000024d 	.word	0x2000024d
 8001ec4:	08006880 	.word	0x08006880
 8001ec8:	08006960 	.word	0x08006960

08001ecc <acc_LdrPrende>:


void acc_LdrPrende (void){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 8001ed0:	4b93      	ldr	r3, [pc, #588]	; (8002120 <acc_LdrPrende+0x254>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <acc_LdrPrende+0x14>
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f000 8101 	beq.w	80020e0 <acc_LdrPrende+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 8001ede:	e11c      	b.n	800211a <acc_LdrPrende+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f7fe fe07 	bl	8000af4 <getStatBoton>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d107      	bne.n	8001efc <acc_LdrPrende+0x30>
				menuActual = &menu[MENU_SELECCION];
 8001eec:	4b8d      	ldr	r3, [pc, #564]	; (8002124 <acc_LdrPrende+0x258>)
 8001eee:	4a8e      	ldr	r2, [pc, #568]	; (8002128 <acc_LdrPrende+0x25c>)
 8001ef0:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8001ef2:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <acc_LdrPrende+0x258>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	4798      	blx	r3
				break;
 8001efa:	e10e      	b.n	800211a <acc_LdrPrende+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7fe fdf9 	bl	8000af4 <getStatBoton>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d004      	beq.n	8001f12 <acc_LdrPrende+0x46>
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d053      	beq.n	8001fb4 <acc_LdrPrende+0xe8>
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d021      	beq.n	8001f54 <acc_LdrPrende+0x88>
				break;
 8001f10:	e055      	b.n	8001fbe <acc_LdrPrende+0xf2>
					valorUmbral--;
 8001f12:	4b86      	ldr	r3, [pc, #536]	; (800212c <acc_LdrPrende+0x260>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	4a84      	ldr	r2, [pc, #528]	; (800212c <acc_LdrPrende+0x260>)
 8001f1a:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 8001f1c:	4b83      	ldr	r3, [pc, #524]	; (800212c <acc_LdrPrende+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d903      	bls.n	8001f30 <acc_LdrPrende+0x64>
 8001f28:	4b80      	ldr	r3, [pc, #512]	; (800212c <acc_LdrPrende+0x260>)
 8001f2a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f2e:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8001f30:	2103      	movs	r1, #3
 8001f32:	200e      	movs	r0, #14
 8001f34:	f7ff fa16 	bl	8001364 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8001f38:	4b7c      	ldr	r3, [pc, #496]	; (800212c <acc_LdrPrende+0x260>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	497c      	ldr	r1, [pc, #496]	; (8002130 <acc_LdrPrende+0x264>)
 8001f40:	487c      	ldr	r0, [pc, #496]	; (8002134 <acc_LdrPrende+0x268>)
 8001f42:	f004 f831 	bl	8005fa8 <siprintf>
					lcd_send_string(texto);
 8001f46:	487b      	ldr	r0, [pc, #492]	; (8002134 <acc_LdrPrende+0x268>)
 8001f48:	f7ff fa94 	bl	8001474 <lcd_send_string>
					holdBoton = 0;
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <acc_LdrPrende+0x26c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
				break;
 8001f52:	e034      	b.n	8001fbe <acc_LdrPrende+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 8001f54:	4b78      	ldr	r3, [pc, #480]	; (8002138 <acc_LdrPrende+0x26c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b96      	cmp	r3, #150	; 0x96
 8001f5a:	d902      	bls.n	8001f62 <acc_LdrPrende+0x96>
						flag_holdBoton = 1;
 8001f5c:	4b77      	ldr	r3, [pc, #476]	; (800213c <acc_LdrPrende+0x270>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <acc_LdrPrende+0x270>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d028      	beq.n	8001fbc <acc_LdrPrende+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <acc_LdrPrende+0x274>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b18      	cmp	r3, #24
 8001f70:	d924      	bls.n	8001fbc <acc_LdrPrende+0xf0>
							valorUmbral -= 10;
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <acc_LdrPrende+0x260>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3b0a      	subs	r3, #10
 8001f78:	4a6c      	ldr	r2, [pc, #432]	; (800212c <acc_LdrPrende+0x260>)
 8001f7a:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	; (800212c <acc_LdrPrende+0x260>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d903      	bls.n	8001f90 <acc_LdrPrende+0xc4>
 8001f88:	4b68      	ldr	r3, [pc, #416]	; (800212c <acc_LdrPrende+0x260>)
 8001f8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f8e:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8001f90:	2103      	movs	r1, #3
 8001f92:	200e      	movs	r0, #14
 8001f94:	f7ff f9e6 	bl	8001364 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 8001f98:	4b64      	ldr	r3, [pc, #400]	; (800212c <acc_LdrPrende+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4964      	ldr	r1, [pc, #400]	; (8002130 <acc_LdrPrende+0x264>)
 8001fa0:	4864      	ldr	r0, [pc, #400]	; (8002134 <acc_LdrPrende+0x268>)
 8001fa2:	f004 f801 	bl	8005fa8 <siprintf>
							lcd_send_string(texto);
 8001fa6:	4863      	ldr	r0, [pc, #396]	; (8002134 <acc_LdrPrende+0x268>)
 8001fa8:	f7ff fa64 	bl	8001474 <lcd_send_string>
							repitePulso = 0;
 8001fac:	4b64      	ldr	r3, [pc, #400]	; (8002140 <acc_LdrPrende+0x274>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
				break;
 8001fb2:	e003      	b.n	8001fbc <acc_LdrPrende+0xf0>
					flag_holdBoton = 0;
 8001fb4:	4b61      	ldr	r3, [pc, #388]	; (800213c <acc_LdrPrende+0x270>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
				break;
 8001fba:	e000      	b.n	8001fbe <acc_LdrPrende+0xf2>
				break;
 8001fbc:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7fe fd98 	bl	8000af4 <getStatBoton>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d004      	beq.n	8001fd4 <acc_LdrPrende+0x108>
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d051      	beq.n	8002072 <acc_LdrPrende+0x1a6>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <acc_LdrPrende+0x148>
				break;
 8001fd2:	e053      	b.n	800207c <acc_LdrPrende+0x1b0>
					valorUmbral++;
 8001fd4:	4b55      	ldr	r3, [pc, #340]	; (800212c <acc_LdrPrende+0x260>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a54      	ldr	r2, [pc, #336]	; (800212c <acc_LdrPrende+0x260>)
 8001fdc:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <acc_LdrPrende+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d902      	bls.n	8001ff0 <acc_LdrPrende+0x124>
 8001fea:	4b50      	ldr	r3, [pc, #320]	; (800212c <acc_LdrPrende+0x260>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	200e      	movs	r0, #14
 8001ff4:	f7ff f9b6 	bl	8001364 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	; (800212c <acc_LdrPrende+0x260>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	494c      	ldr	r1, [pc, #304]	; (8002130 <acc_LdrPrende+0x264>)
 8002000:	484c      	ldr	r0, [pc, #304]	; (8002134 <acc_LdrPrende+0x268>)
 8002002:	f003 ffd1 	bl	8005fa8 <siprintf>
					lcd_send_string(texto);
 8002006:	484b      	ldr	r0, [pc, #300]	; (8002134 <acc_LdrPrende+0x268>)
 8002008:	f7ff fa34 	bl	8001474 <lcd_send_string>
					holdBoton = 0;
 800200c:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <acc_LdrPrende+0x26c>)
 800200e:	2200      	movs	r2, #0
 8002010:	701a      	strb	r2, [r3, #0]
				break;
 8002012:	e033      	b.n	800207c <acc_LdrPrende+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <acc_LdrPrende+0x26c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b96      	cmp	r3, #150	; 0x96
 800201a:	d902      	bls.n	8002022 <acc_LdrPrende+0x156>
						flag_holdBoton = 1;
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <acc_LdrPrende+0x270>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 8002022:	4b46      	ldr	r3, [pc, #280]	; (800213c <acc_LdrPrende+0x270>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d027      	beq.n	800207a <acc_LdrPrende+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 800202a:	4b45      	ldr	r3, [pc, #276]	; (8002140 <acc_LdrPrende+0x274>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b18      	cmp	r3, #24
 8002030:	d923      	bls.n	800207a <acc_LdrPrende+0x1ae>
							valorUmbral += 10;
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <acc_LdrPrende+0x260>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	330a      	adds	r3, #10
 8002038:	4a3c      	ldr	r2, [pc, #240]	; (800212c <acc_LdrPrende+0x260>)
 800203a:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <acc_LdrPrende+0x260>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002044:	4293      	cmp	r3, r2
 8002046:	d902      	bls.n	800204e <acc_LdrPrende+0x182>
 8002048:	4b38      	ldr	r3, [pc, #224]	; (800212c <acc_LdrPrende+0x260>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 800204e:	2103      	movs	r1, #3
 8002050:	200e      	movs	r0, #14
 8002052:	f7ff f987 	bl	8001364 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 8002056:	4b35      	ldr	r3, [pc, #212]	; (800212c <acc_LdrPrende+0x260>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4934      	ldr	r1, [pc, #208]	; (8002130 <acc_LdrPrende+0x264>)
 800205e:	4835      	ldr	r0, [pc, #212]	; (8002134 <acc_LdrPrende+0x268>)
 8002060:	f003 ffa2 	bl	8005fa8 <siprintf>
							lcd_send_string(texto);
 8002064:	4833      	ldr	r0, [pc, #204]	; (8002134 <acc_LdrPrende+0x268>)
 8002066:	f7ff fa05 	bl	8001474 <lcd_send_string>
							repitePulso = 0;
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <acc_LdrPrende+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
				break;
 8002070:	e003      	b.n	800207a <acc_LdrPrende+0x1ae>
					flag_holdBoton = 0;
 8002072:	4b32      	ldr	r3, [pc, #200]	; (800213c <acc_LdrPrende+0x270>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
				break;
 8002078:	e000      	b.n	800207c <acc_LdrPrende+0x1b0>
				break;
 800207a:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <acc_LdrPrende+0x278>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	2b63      	cmp	r3, #99	; 0x63
 8002082:	d911      	bls.n	80020a8 <acc_LdrPrende+0x1dc>
				lcd_put_cur(14, 2);
 8002084:	2102      	movs	r1, #2
 8002086:	200e      	movs	r0, #14
 8002088:	f7ff f96c 	bl	8001364 <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 800208c:	f7fe ff1c 	bl	8000ec8 <get_ldr>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4926      	ldr	r1, [pc, #152]	; (8002130 <acc_LdrPrende+0x264>)
 8002096:	4827      	ldr	r0, [pc, #156]	; (8002134 <acc_LdrPrende+0x268>)
 8002098:	f003 ff86 	bl	8005fa8 <siprintf>
				lcd_send_string(texto);
 800209c:	4825      	ldr	r0, [pc, #148]	; (8002134 <acc_LdrPrende+0x268>)
 800209e:	f7ff f9e9 	bl	8001474 <lcd_send_string>
				timeOut_pantalla = 0;
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <acc_LdrPrende+0x278>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 80020a8:	2003      	movs	r0, #3
 80020aa:	f7fe fd23 	bl	8000af4 <getStatBoton>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d12f      	bne.n	8002114 <acc_LdrPrende+0x248>
				set_umbralLDR(0, valorUmbral);
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <acc_LdrPrende+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4619      	mov	r1, r3
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe ff24 	bl	8000f08 <set_umbralLDR>
				lcd_clear();
 80020c0:	f7ff f93a 	bl	8001338 <lcd_clear>
				lcd_put_cur(0, 1);
 80020c4:	2101      	movs	r1, #1
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff f94c 	bl	8001364 <lcd_put_cur>
				lcd_send_string("UMBRAL NOCHE GRABADO");
 80020cc:	481e      	ldr	r0, [pc, #120]	; (8002148 <acc_LdrPrende+0x27c>)
 80020ce:	f7ff f9d1 	bl	8001474 <lcd_send_string>
				pantallaUmbral = 1;
 80020d2:	4b13      	ldr	r3, [pc, #76]	; (8002120 <acc_LdrPrende+0x254>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <acc_LdrPrende+0x278>)
 80020da:	2200      	movs	r2, #0
 80020dc:	801a      	strh	r2, [r3, #0]
				break;
 80020de:	e01c      	b.n	800211a <acc_LdrPrende+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <acc_LdrPrende+0x278>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80020e8:	d306      	bcc.n	80020f8 <acc_LdrPrende+0x22c>
				menuActual = &menu[MENU_SELECCION];
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <acc_LdrPrende+0x258>)
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <acc_LdrPrende+0x25c>)
 80020ee:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <acc_LdrPrende+0x258>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 80020f8:	2002      	movs	r0, #2
 80020fa:	f7fe fcfb 	bl	8000af4 <getStatBoton>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b02      	cmp	r3, #2
 8002102:	d109      	bne.n	8002118 <acc_LdrPrende+0x24c>
				menuActual = &menu[MENU_SELECCION];
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <acc_LdrPrende+0x258>)
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <acc_LdrPrende+0x25c>)
 8002108:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <acc_LdrPrende+0x258>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4798      	blx	r3
		break;
 8002112:	e001      	b.n	8002118 <acc_LdrPrende+0x24c>
		break;
 8002114:	bf00      	nop
 8002116:	e000      	b.n	800211a <acc_LdrPrende+0x24e>
		break;
 8002118:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrPrende()
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000015f 	.word	0x2000015f
 8002124:	20000240 	.word	0x20000240
 8002128:	2000004c 	.word	0x2000004c
 800212c:	20000248 	.word	0x20000248
 8002130:	08006964 	.word	0x08006964
 8002134:	20000128 	.word	0x20000128
 8002138:	20000160 	.word	0x20000160
 800213c:	20000161 	.word	0x20000161
 8002140:	20000162 	.word	0x20000162
 8002144:	2000015a 	.word	0x2000015a
 8002148:	0800696c 	.word	0x0800696c

0800214c <acc_LdrApaga>:


void acc_LdrApaga (void){
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	switch (pantallaUmbral){
 8002150:	4b93      	ldr	r3, [pc, #588]	; (80023a0 <acc_LdrApaga+0x254>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <acc_LdrApaga+0x14>
 8002158:	2b01      	cmp	r3, #1
 800215a:	f000 8101 	beq.w	8002360 <acc_LdrApaga+0x214>
				menuActual = &menu[MENU_SELECCION];
				menuActual->inicia_menu();
			} //fin if IN_BACK
		break;
		default:
		break;
 800215e:	e11c      	b.n	800239a <acc_LdrApaga+0x24e>
			if (getStatBoton(IN_BACK) == FALL){
 8002160:	2002      	movs	r0, #2
 8002162:	f7fe fcc7 	bl	8000af4 <getStatBoton>
 8002166:	4603      	mov	r3, r0
 8002168:	2b02      	cmp	r3, #2
 800216a:	d107      	bne.n	800217c <acc_LdrApaga+0x30>
				menuActual = &menu[MENU_SELECCION];
 800216c:	4b8d      	ldr	r3, [pc, #564]	; (80023a4 <acc_LdrApaga+0x258>)
 800216e:	4a8e      	ldr	r2, [pc, #568]	; (80023a8 <acc_LdrApaga+0x25c>)
 8002170:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002172:	4b8c      	ldr	r3, [pc, #560]	; (80023a4 <acc_LdrApaga+0x258>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4798      	blx	r3
				break;
 800217a:	e10e      	b.n	800239a <acc_LdrApaga+0x24e>
			switch (getStatBoton(IN_LEFT)) {
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fcb9 	bl	8000af4 <getStatBoton>
 8002182:	4603      	mov	r3, r0
 8002184:	2b02      	cmp	r3, #2
 8002186:	d004      	beq.n	8002192 <acc_LdrApaga+0x46>
 8002188:	2b03      	cmp	r3, #3
 800218a:	d053      	beq.n	8002234 <acc_LdrApaga+0xe8>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d021      	beq.n	80021d4 <acc_LdrApaga+0x88>
				break;
 8002190:	e055      	b.n	800223e <acc_LdrApaga+0xf2>
					valorUmbral--;
 8002192:	4b86      	ldr	r3, [pc, #536]	; (80023ac <acc_LdrApaga+0x260>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	4a84      	ldr	r2, [pc, #528]	; (80023ac <acc_LdrApaga+0x260>)
 800219a:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 3000;
 800219c:	4b83      	ldr	r3, [pc, #524]	; (80023ac <acc_LdrApaga+0x260>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d903      	bls.n	80021b0 <acc_LdrApaga+0x64>
 80021a8:	4b80      	ldr	r3, [pc, #512]	; (80023ac <acc_LdrApaga+0x260>)
 80021aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021ae:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 80021b0:	2103      	movs	r1, #3
 80021b2:	200e      	movs	r0, #14
 80021b4:	f7ff f8d6 	bl	8001364 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <acc_LdrApaga+0x260>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	497c      	ldr	r1, [pc, #496]	; (80023b0 <acc_LdrApaga+0x264>)
 80021c0:	487c      	ldr	r0, [pc, #496]	; (80023b4 <acc_LdrApaga+0x268>)
 80021c2:	f003 fef1 	bl	8005fa8 <siprintf>
					lcd_send_string(texto);
 80021c6:	487b      	ldr	r0, [pc, #492]	; (80023b4 <acc_LdrApaga+0x268>)
 80021c8:	f7ff f954 	bl	8001474 <lcd_send_string>
					holdBoton = 0;
 80021cc:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <acc_LdrApaga+0x26c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
				break;
 80021d2:	e034      	b.n	800223e <acc_LdrApaga+0xf2>
					if (holdBoton > 150){ //en 10*ms.
 80021d4:	4b78      	ldr	r3, [pc, #480]	; (80023b8 <acc_LdrApaga+0x26c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b96      	cmp	r3, #150	; 0x96
 80021da:	d902      	bls.n	80021e2 <acc_LdrApaga+0x96>
						flag_holdBoton = 1;
 80021dc:	4b77      	ldr	r3, [pc, #476]	; (80023bc <acc_LdrApaga+0x270>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <acc_LdrApaga+0x270>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d028      	beq.n	800223c <acc_LdrApaga+0xf0>
						if (repitePulso > 24){ //en 10*ms.
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <acc_LdrApaga+0x274>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b18      	cmp	r3, #24
 80021f0:	d924      	bls.n	800223c <acc_LdrApaga+0xf0>
							valorUmbral -= 10;
 80021f2:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <acc_LdrApaga+0x260>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3b0a      	subs	r3, #10
 80021f8:	4a6c      	ldr	r2, [pc, #432]	; (80023ac <acc_LdrApaga+0x260>)
 80021fa:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 3000;
 80021fc:	4b6b      	ldr	r3, [pc, #428]	; (80023ac <acc_LdrApaga+0x260>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002204:	4293      	cmp	r3, r2
 8002206:	d903      	bls.n	8002210 <acc_LdrApaga+0xc4>
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <acc_LdrApaga+0x260>)
 800220a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800220e:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 8002210:	2103      	movs	r1, #3
 8002212:	200e      	movs	r0, #14
 8002214:	f7ff f8a6 	bl	8001364 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 8002218:	4b64      	ldr	r3, [pc, #400]	; (80023ac <acc_LdrApaga+0x260>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4964      	ldr	r1, [pc, #400]	; (80023b0 <acc_LdrApaga+0x264>)
 8002220:	4864      	ldr	r0, [pc, #400]	; (80023b4 <acc_LdrApaga+0x268>)
 8002222:	f003 fec1 	bl	8005fa8 <siprintf>
							lcd_send_string(texto);
 8002226:	4863      	ldr	r0, [pc, #396]	; (80023b4 <acc_LdrApaga+0x268>)
 8002228:	f7ff f924 	bl	8001474 <lcd_send_string>
							repitePulso = 0;
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <acc_LdrApaga+0x274>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
				break;
 8002232:	e003      	b.n	800223c <acc_LdrApaga+0xf0>
					flag_holdBoton = 0;
 8002234:	4b61      	ldr	r3, [pc, #388]	; (80023bc <acc_LdrApaga+0x270>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
				break;
 800223a:	e000      	b.n	800223e <acc_LdrApaga+0xf2>
				break;
 800223c:	bf00      	nop
			switch (getStatBoton(IN_RIGHT)) {
 800223e:	2001      	movs	r0, #1
 8002240:	f7fe fc58 	bl	8000af4 <getStatBoton>
 8002244:	4603      	mov	r3, r0
 8002246:	2b02      	cmp	r3, #2
 8002248:	d004      	beq.n	8002254 <acc_LdrApaga+0x108>
 800224a:	2b03      	cmp	r3, #3
 800224c:	d051      	beq.n	80022f2 <acc_LdrApaga+0x1a6>
 800224e:	2b00      	cmp	r3, #0
 8002250:	d020      	beq.n	8002294 <acc_LdrApaga+0x148>
				break;
 8002252:	e053      	b.n	80022fc <acc_LdrApaga+0x1b0>
					valorUmbral++;
 8002254:	4b55      	ldr	r3, [pc, #340]	; (80023ac <acc_LdrApaga+0x260>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	4a54      	ldr	r2, [pc, #336]	; (80023ac <acc_LdrApaga+0x260>)
 800225c:	6013      	str	r3, [r2, #0]
					if (valorUmbral > 3000) valorUmbral = 0;
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <acc_LdrApaga+0x260>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002266:	4293      	cmp	r3, r2
 8002268:	d902      	bls.n	8002270 <acc_LdrApaga+0x124>
 800226a:	4b50      	ldr	r3, [pc, #320]	; (80023ac <acc_LdrApaga+0x260>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
					lcd_put_cur(14, 3);
 8002270:	2103      	movs	r1, #3
 8002272:	200e      	movs	r0, #14
 8002274:	f7ff f876 	bl	8001364 <lcd_put_cur>
					sprintf(texto, "%04lu", valorUmbral);
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <acc_LdrApaga+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	494c      	ldr	r1, [pc, #304]	; (80023b0 <acc_LdrApaga+0x264>)
 8002280:	484c      	ldr	r0, [pc, #304]	; (80023b4 <acc_LdrApaga+0x268>)
 8002282:	f003 fe91 	bl	8005fa8 <siprintf>
					lcd_send_string(texto);
 8002286:	484b      	ldr	r0, [pc, #300]	; (80023b4 <acc_LdrApaga+0x268>)
 8002288:	f7ff f8f4 	bl	8001474 <lcd_send_string>
					holdBoton = 0;
 800228c:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <acc_LdrApaga+0x26c>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
				break;
 8002292:	e033      	b.n	80022fc <acc_LdrApaga+0x1b0>
					if (holdBoton > 150){ //en 10*ms.
 8002294:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <acc_LdrApaga+0x26c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b96      	cmp	r3, #150	; 0x96
 800229a:	d902      	bls.n	80022a2 <acc_LdrApaga+0x156>
						flag_holdBoton = 1;
 800229c:	4b47      	ldr	r3, [pc, #284]	; (80023bc <acc_LdrApaga+0x270>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
					if (flag_holdBoton != 0){
 80022a2:	4b46      	ldr	r3, [pc, #280]	; (80023bc <acc_LdrApaga+0x270>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d027      	beq.n	80022fa <acc_LdrApaga+0x1ae>
						if (repitePulso > 24){ //en 10*ms.
 80022aa:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <acc_LdrApaga+0x274>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b18      	cmp	r3, #24
 80022b0:	d923      	bls.n	80022fa <acc_LdrApaga+0x1ae>
							valorUmbral += 10;
 80022b2:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <acc_LdrApaga+0x260>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330a      	adds	r3, #10
 80022b8:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <acc_LdrApaga+0x260>)
 80022ba:	6013      	str	r3, [r2, #0]
							if (valorUmbral > 3000) valorUmbral = 0;
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <acc_LdrApaga+0x260>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d902      	bls.n	80022ce <acc_LdrApaga+0x182>
 80022c8:	4b38      	ldr	r3, [pc, #224]	; (80023ac <acc_LdrApaga+0x260>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
							lcd_put_cur(14, 3);
 80022ce:	2103      	movs	r1, #3
 80022d0:	200e      	movs	r0, #14
 80022d2:	f7ff f847 	bl	8001364 <lcd_put_cur>
							sprintf(texto, "%04lu", valorUmbral);
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <acc_LdrApaga+0x260>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	4934      	ldr	r1, [pc, #208]	; (80023b0 <acc_LdrApaga+0x264>)
 80022de:	4835      	ldr	r0, [pc, #212]	; (80023b4 <acc_LdrApaga+0x268>)
 80022e0:	f003 fe62 	bl	8005fa8 <siprintf>
							lcd_send_string(texto);
 80022e4:	4833      	ldr	r0, [pc, #204]	; (80023b4 <acc_LdrApaga+0x268>)
 80022e6:	f7ff f8c5 	bl	8001474 <lcd_send_string>
							repitePulso = 0;
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <acc_LdrApaga+0x274>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
				break;
 80022f0:	e003      	b.n	80022fa <acc_LdrApaga+0x1ae>
					flag_holdBoton = 0;
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <acc_LdrApaga+0x270>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
				break;
 80022f8:	e000      	b.n	80022fc <acc_LdrApaga+0x1b0>
				break;
 80022fa:	bf00      	nop
			if (timeOut_pantalla > 99){ // un segundo paso
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <acc_LdrApaga+0x278>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	2b63      	cmp	r3, #99	; 0x63
 8002302:	d911      	bls.n	8002328 <acc_LdrApaga+0x1dc>
				lcd_put_cur(14, 2);
 8002304:	2102      	movs	r1, #2
 8002306:	200e      	movs	r0, #14
 8002308:	f7ff f82c 	bl	8001364 <lcd_put_cur>
				sprintf(texto, "%04lu", get_ldr());
 800230c:	f7fe fddc 	bl	8000ec8 <get_ldr>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	4926      	ldr	r1, [pc, #152]	; (80023b0 <acc_LdrApaga+0x264>)
 8002316:	4827      	ldr	r0, [pc, #156]	; (80023b4 <acc_LdrApaga+0x268>)
 8002318:	f003 fe46 	bl	8005fa8 <siprintf>
				lcd_send_string(texto);
 800231c:	4825      	ldr	r0, [pc, #148]	; (80023b4 <acc_LdrApaga+0x268>)
 800231e:	f7ff f8a9 	bl	8001474 <lcd_send_string>
				timeOut_pantalla = 0;
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <acc_LdrApaga+0x278>)
 8002324:	2200      	movs	r2, #0
 8002326:	801a      	strh	r2, [r3, #0]
			if (getStatBoton(IN_OK) == FALL){
 8002328:	2003      	movs	r0, #3
 800232a:	f7fe fbe3 	bl	8000af4 <getStatBoton>
 800232e:	4603      	mov	r3, r0
 8002330:	2b02      	cmp	r3, #2
 8002332:	d12f      	bne.n	8002394 <acc_LdrApaga+0x248>
				set_umbralLDR(1, valorUmbral);
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <acc_LdrApaga+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	2001      	movs	r0, #1
 800233c:	f7fe fde4 	bl	8000f08 <set_umbralLDR>
				lcd_clear();
 8002340:	f7fe fffa 	bl	8001338 <lcd_clear>
				lcd_put_cur(0, 1);
 8002344:	2101      	movs	r1, #1
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff f80c 	bl	8001364 <lcd_put_cur>
				lcd_send_string("UMBRAL DIA GRABADO");
 800234c:	481e      	ldr	r0, [pc, #120]	; (80023c8 <acc_LdrApaga+0x27c>)
 800234e:	f7ff f891 	bl	8001474 <lcd_send_string>
				pantallaUmbral = 1;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <acc_LdrApaga+0x254>)
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
				timeOut_pantalla = 0;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <acc_LdrApaga+0x278>)
 800235a:	2200      	movs	r2, #0
 800235c:	801a      	strh	r2, [r3, #0]
				break;
 800235e:	e01c      	b.n	800239a <acc_LdrApaga+0x24e>
			if (timeOut_pantalla > 349){ // 3,5 segundos pasaron
 8002360:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <acc_LdrApaga+0x278>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8002368:	d306      	bcc.n	8002378 <acc_LdrApaga+0x22c>
				menuActual = &menu[MENU_SELECCION];
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <acc_LdrApaga+0x258>)
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <acc_LdrApaga+0x25c>)
 800236e:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <acc_LdrApaga+0x258>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	4798      	blx	r3
			if (getStatBoton(IN_BACK) == FALL){
 8002378:	2002      	movs	r0, #2
 800237a:	f7fe fbbb 	bl	8000af4 <getStatBoton>
 800237e:	4603      	mov	r3, r0
 8002380:	2b02      	cmp	r3, #2
 8002382:	d109      	bne.n	8002398 <acc_LdrApaga+0x24c>
				menuActual = &menu[MENU_SELECCION];
 8002384:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <acc_LdrApaga+0x258>)
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <acc_LdrApaga+0x25c>)
 8002388:	601a      	str	r2, [r3, #0]
				menuActual->inicia_menu();
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <acc_LdrApaga+0x258>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4798      	blx	r3
		break;
 8002392:	e001      	b.n	8002398 <acc_LdrApaga+0x24c>
		break;
 8002394:	bf00      	nop
 8002396:	e000      	b.n	800239a <acc_LdrApaga+0x24e>
		break;
 8002398:	bf00      	nop
	} //fin switch pantallaUmbral
} //fin acc_LdrApaga()
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000015f 	.word	0x2000015f
 80023a4:	20000240 	.word	0x20000240
 80023a8:	2000004c 	.word	0x2000004c
 80023ac:	20000248 	.word	0x20000248
 80023b0:	08006964 	.word	0x08006964
 80023b4:	20000128 	.word	0x20000128
 80023b8:	20000160 	.word	0x20000160
 80023bc:	20000161 	.word	0x20000161
 80023c0:	20000162 	.word	0x20000162
 80023c4:	2000015a 	.word	0x2000015a
 80023c8:	08006984 	.word	0x08006984

080023cc <refresh_infoDHT>:


void refresh_infoDHT (void){
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	flag_infoDHT = 1;
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <refresh_infoDHT+0x14>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoDHT()
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	2000015c 	.word	0x2000015c

080023e4 <refresh_infoModo>:

void refresh_infoModo (void){
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
	flag_infoModo = 1;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <refresh_infoModo+0x14>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	701a      	strb	r2, [r3, #0]
} //fin refresh_infoModo
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2000015d 	.word	0x2000015d

080023fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <MX_SPI1_Init+0x64>)
 8002402:	4a18      	ldr	r2, [pc, #96]	; (8002464 <MX_SPI1_Init+0x68>)
 8002404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <MX_SPI1_Init+0x64>)
 8002408:	f44f 7282 	mov.w	r2, #260	; 0x104
 800240c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_SPI1_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_SPI1_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_SPI1_Init+0x64>)
 8002428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800242c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_SPI1_Init+0x64>)
 8002430:	2230      	movs	r2, #48	; 0x30
 8002432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_SPI1_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <MX_SPI1_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_SPI1_Init+0x64>)
 8002448:	220a      	movs	r2, #10
 800244a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800244c:	4804      	ldr	r0, [pc, #16]	; (8002460 <MX_SPI1_Init+0x64>)
 800244e:	f002 fe3b 	bl	80050c8 <HAL_SPI_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002458:	f7ff f944 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	2000025c 	.word	0x2000025c
 8002464:	40013000 	.word	0x40013000

08002468 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_SPI_MspInit+0x88>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d12f      	bne.n	80024e8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 800248e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024a6:	f043 0304 	orr.w	r3, r3, #4
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_SPI_MspInit+0x8c>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024b8:	23a0      	movs	r3, #160	; 0xa0
 80024ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4619      	mov	r1, r3
 80024ca:	480b      	ldr	r0, [pc, #44]	; (80024f8 <HAL_SPI_MspInit+0x90>)
 80024cc:	f000 ff22 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <HAL_SPI_MspInit+0x90>)
 80024e4:	f000 ff16 	bl	8003314 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013000 	.word	0x40013000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010800 	.word	0x40010800

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_MspInit+0x5c>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a14      	ldr	r2, [pc, #80]	; (8002558 <HAL_MspInit+0x5c>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_MspInit+0x5c>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <HAL_MspInit+0x5c>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <HAL_MspInit+0x5c>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_MspInit+0x5c>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_MspInit+0x60>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_MspInit+0x60>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	40021000 	.word	0x40021000
 800255c:	40010000 	.word	0x40010000

08002560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <NMI_Handler+0x4>

08002566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	e7fe      	b.n	8002570 <MemManage_Handler+0x4>

08002572 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002576:	e7fe      	b.n	8002576 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	e7fe      	b.n	800257c <UsageFault_Handler+0x4>

0800257e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a6:	f000 f9dd 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <TIM2_IRQHandler+0x10>)
 80025b6:	f002 fe36 	bl	8005226 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200002b4 	.word	0x200002b4

080025c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <USART1_IRQHandler+0x10>)
 80025ca:	f003 f9ab 	bl	8005924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002f4 	.word	0x200002f4

080025d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_sbrk+0x5c>)
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <_sbrk+0x60>)
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d102      	bne.n	80025fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <_sbrk+0x64>)
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <_sbrk+0x68>)
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <_sbrk+0x64>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002608:	f003 fc9c 	bl	8005f44 <__errno>
 800260c:	4602      	mov	r2, r0
 800260e:	230c      	movs	r3, #12
 8002610:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002616:	e009      	b.n	800262c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800261e:	4b07      	ldr	r3, [pc, #28]	; (800263c <_sbrk+0x64>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	4a05      	ldr	r2, [pc, #20]	; (800263c <_sbrk+0x64>)
 8002628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20005000 	.word	0x20005000
 8002638:	00000400 	.word	0x00000400
 800263c:	20000164 	.word	0x20000164
 8002640:	20000340 	.word	0x20000340

08002644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <SystemInit+0x5c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <SystemInit+0x5c>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <SystemInit+0x5c>)
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	4911      	ldr	r1, [pc, #68]	; (80026a0 <SystemInit+0x5c>)
 800265a:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <SystemInit+0x60>)
 800265c:	4013      	ands	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <SystemInit+0x5c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <SystemInit+0x5c>)
 8002666:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <SystemInit+0x5c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SystemInit+0x5c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <SystemInit+0x5c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <SystemInit+0x5c>)
 8002682:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002686:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SystemInit+0x5c>)
 800268a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800268e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <SystemInit+0x64>)
 8002692:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002696:	609a      	str	r2, [r3, #8]
#endif 
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40021000 	.word	0x40021000
 80026a4:	f8ff0000 	.word	0xf8ff0000
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	463b      	mov	r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <MX_TIM2_Init+0x98>)
 80026ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <MX_TIM2_Init+0x98>)
 80026d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80026d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <MX_TIM2_Init+0x98>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_TIM2_Init+0x98>)
 80026e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MX_TIM2_Init+0x98>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_TIM2_Init+0x98>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026f2:	4814      	ldr	r0, [pc, #80]	; (8002744 <MX_TIM2_Init+0x98>)
 80026f4:	f002 fd49 	bl	800518a <HAL_TIM_Base_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026fe:	f7fe fff1 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002706:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	4619      	mov	r1, r3
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_TIM2_Init+0x98>)
 8002710:	f002 fe91 	bl	8005436 <HAL_TIM_ConfigClockSource>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800271a:	f7fe ffe3 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002726:	463b      	mov	r3, r7
 8002728:	4619      	mov	r1, r3
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_TIM2_Init+0x98>)
 800272c:	f003 f856 	bl	80057dc <HAL_TIMEx_MasterConfigSynchronization>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002736:	f7fe ffd5 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200002b4 	.word	0x200002b4

08002748 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d113      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_TIM_Base_MspInit+0x44>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <HAL_TIM_Base_MspInit+0x44>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_TIM_Base_MspInit+0x44>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	201c      	movs	r0, #28
 8002778:	f000 fd1f 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800277c:	201c      	movs	r0, #28
 800277e:	f000 fd38 	bl	80031f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <MX_USART1_UART_Init+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_USART1_UART_Init+0x4c>)
 80027c8:	f003 f85e 	bl	8005888 <HAL_UART_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027d2:	f7fe ff87 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200002f4 	.word	0x200002f4
 80027e0:	40013800 	.word	0x40013800

080027e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_UART_MspInit+0x9c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d139      	bne.n	8002878 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_UART_MspInit+0xa0>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <HAL_UART_MspInit+0xa0>)
 800280a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280e:	6193      	str	r3, [r2, #24]
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <HAL_UART_MspInit+0xa0>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_UART_MspInit+0xa0>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_UART_MspInit+0xa0>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_UART_MspInit+0xa0>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002838:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0310 	add.w	r3, r7, #16
 8002846:	4619      	mov	r1, r3
 8002848:	480f      	ldr	r0, [pc, #60]	; (8002888 <HAL_UART_MspInit+0xa4>)
 800284a:	f000 fd63 	bl	8003314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800284e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4619      	mov	r1, r3
 8002862:	4809      	ldr	r0, [pc, #36]	; (8002888 <HAL_UART_MspInit+0xa4>)
 8002864:	f000 fd56 	bl	8003314 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	2025      	movs	r0, #37	; 0x25
 800286e:	f000 fca4 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002872:	2025      	movs	r0, #37	; 0x25
 8002874:	f000 fcbd 	bl	80031f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40013800 	.word	0x40013800
 8002884:	40021000 	.word	0x40021000
 8002888:	40010800 	.word	0x40010800

0800288c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800288c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800288e:	e003      	b.n	8002898 <LoopCopyDataInit>

08002890 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002892:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002894:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002896:	3104      	adds	r1, #4

08002898 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002898:	480a      	ldr	r0, [pc, #40]	; (80028c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800289c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800289e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028a0:	d3f6      	bcc.n	8002890 <CopyDataInit>
  ldr r2, =_sbss
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028a4:	e002      	b.n	80028ac <LoopFillZerobss>

080028a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028a8:	f842 3b04 	str.w	r3, [r2], #4

080028ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028b0:	d3f9      	bcc.n	80028a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028b2:	f7ff fec7 	bl	8002644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028b6:	f003 fb4b 	bl	8005f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ba:	f7fe fe19 	bl	80014f0 <main>
  bx lr
 80028be:	4770      	bx	lr
  ldr r3, =_sidata
 80028c0:	08006a00 	.word	0x08006a00
  ldr r0, =_sdata
 80028c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028c8:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 80028cc:	200000fc 	.word	0x200000fc
  ldr r3, = _ebss
 80028d0:	2000033c 	.word	0x2000033c

080028d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028d4:	e7fe      	b.n	80028d4 <ADC1_2_IRQHandler>
	...

080028d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_Init+0x28>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	; (8002900 <HAL_Init+0x28>)
 80028e2:	f043 0310 	orr.w	r3, r3, #16
 80028e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f000 fc5b 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	200f      	movs	r0, #15
 80028f0:	f000 f808 	bl	8002904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f4:	f7ff fe02 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40022000 	.word	0x40022000

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <HAL_InitTick+0x54>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_InitTick+0x58>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fc73 	bl	800320e <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00e      	b.n	8002950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d80a      	bhi.n	800294e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002940:	f000 fc3b 	bl	80031ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <HAL_InitTick+0x5c>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	2000008c 	.word	0x2000008c
 800295c:	20000094 	.word	0x20000094
 8002960:	20000090 	.word	0x20000090

08002964 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_IncTick+0x1c>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_IncTick+0x20>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4413      	add	r3, r2
 8002974:	4a03      	ldr	r2, [pc, #12]	; (8002984 <HAL_IncTick+0x20>)
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000094 	.word	0x20000094
 8002984:	20000334 	.word	0x20000334

08002988 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_GetTick+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000334 	.word	0x20000334

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff fff0 	bl	8002988 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_Delay+0x40>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c2:	bf00      	nop
 80029c4:	f7ff ffe0 	bl	8002988 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000094 	.word	0x20000094

080029e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0be      	b.n	8002b80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe f9a4 	bl	8000d6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fab7 	bl	8002f98 <ADC_ConversionStop_Disable>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 8099 	bne.w	8002b6e <HAL_ADC_Init+0x18e>
 8002a3c:	7dfb      	ldrb	r3, [r7, #23]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8095 	bne.w	8002b6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a4c:	f023 0302 	bic.w	r3, r3, #2
 8002a50:	f043 0202 	orr.w	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7b1b      	ldrb	r3, [r3, #12]
 8002a66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d003      	beq.n	8002a82 <HAL_ADC_Init+0xa2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_ADC_Init+0xa8>
 8002a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a86:	e000      	b.n	8002a8a <HAL_ADC_Init+0xaa>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7d1b      	ldrb	r3, [r3, #20]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d119      	bne.n	8002acc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7b1b      	ldrb	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	035a      	lsls	r2, r3, #13
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	e00b      	b.n	8002acc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_ADC_Init+0x1a8>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	68b9      	ldr	r1, [r7, #8]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d003      	beq.n	8002b06 <HAL_ADC_Init+0x126>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d104      	bne.n	8002b10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	051b      	lsls	r3, r3, #20
 8002b0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_ADC_Init+0x1ac>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d10b      	bne.n	8002b4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b4a:	e018      	b.n	8002b7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f023 0312 	bic.w	r3, r3, #18
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b6c:	e007      	b.n	8002b7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	f043 0210 	orr.w	r2, r3, #16
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	ffe1f7fd 	.word	0xffe1f7fd
 8002b8c:	ff1f0efe 	.word	0xff1f0efe

08002b90 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e098      	b.n	8002cdc <HAL_ADC_Start+0x14c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f99e 	bl	8002ef4 <ADC_Enable>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8087 	bne.w	8002cd2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_ADC_Start+0x154>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_Start+0x5e>
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_ADC_Start+0x158>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d115      	bne.n	8002c1a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d026      	beq.n	8002c56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c18:	e01d      	b.n	8002c56 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <HAL_ADC_Start+0x158>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d004      	beq.n	8002c3a <HAL_ADC_Start+0xaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_ADC_Start+0x154>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10d      	bne.n	8002c56 <HAL_ADC_Start+0xc6>
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_ADC_Start+0x158>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f023 0206 	bic.w	r2, r3, #6
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c6e:	e002      	b.n	8002c76 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f06f 0202 	mvn.w	r2, #2
 8002c86:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c96:	d113      	bne.n	8002cc0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c9c:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <HAL_ADC_Start+0x154>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d105      	bne.n	8002cae <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_ADC_Start+0x158>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e00c      	b.n	8002cda <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e003      	b.n	8002cda <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40012800 	.word	0x40012800
 8002ce8:	40012400 	.word	0x40012400

08002cec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x20>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0dc      	b.n	8002ede <HAL_ADC_ConfigChannel+0x1da>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	2b06      	cmp	r3, #6
 8002d32:	d81c      	bhi.n	8002d6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	3b05      	subs	r3, #5
 8002d46:	221f      	movs	r2, #31
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	4019      	ands	r1, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3b05      	subs	r3, #5
 8002d60:	fa00 f203 	lsl.w	r2, r0, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6c:	e03c      	b.n	8002de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d81c      	bhi.n	8002db0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b23      	subs	r3, #35	; 0x23
 8002d88:	221f      	movs	r2, #31
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	4019      	ands	r1, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b23      	subs	r3, #35	; 0x23
 8002da2:	fa00 f203 	lsl.w	r2, r0, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
 8002dae:	e01b      	b.n	8002de8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b41      	subs	r3, #65	; 0x41
 8002dc2:	221f      	movs	r2, #31
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4019      	ands	r1, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b41      	subs	r3, #65	; 0x41
 8002ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b09      	cmp	r3, #9
 8002dee:	d91c      	bls.n	8002e2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68d9      	ldr	r1, [r3, #12]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b1e      	subs	r3, #30
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4019      	ands	r1, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b1e      	subs	r3, #30
 8002e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	e019      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6898      	ldr	r0, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d003      	beq.n	8002e6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e6a:	2b11      	cmp	r3, #17
 8002e6c:	d132      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1d      	ldr	r2, [pc, #116]	; (8002ee8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d125      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d126      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e94:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d11a      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_ADC_ConfigChannel+0x1e8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a13      	ldr	r2, [pc, #76]	; (8002ef0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	0c9a      	lsrs	r2, r3, #18
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x1b2>
 8002ec2:	e007      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr
 8002ee8:	40012400 	.word	0x40012400
 8002eec:	2000008c 	.word	0x2000008c
 8002ef0:	431bde83 	.word	0x431bde83

08002ef4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d039      	beq.n	8002f86 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f22:	4b1b      	ldr	r3, [pc, #108]	; (8002f90 <ADC_Enable+0x9c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <ADC_Enable+0xa0>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0c9b      	lsrs	r3, r3, #18
 8002f2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f30:	e002      	b.n	8002f38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f9      	bne.n	8002f32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f3e:	f7ff fd23 	bl	8002988 <HAL_GetTick>
 8002f42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f44:	e018      	b.n	8002f78 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f46:	f7ff fd1f 	bl	8002988 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d911      	bls.n	8002f78 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	f043 0210 	orr.w	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e007      	b.n	8002f88 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d1df      	bne.n	8002f46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000008c 	.word	0x2000008c
 8002f94:	431bde83 	.word	0x431bde83

08002f98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d127      	bne.n	8003002 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fc2:	f7ff fce1 	bl	8002988 <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fc8:	e014      	b.n	8002ff4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fca:	f7ff fcdd 	bl	8002988 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d90d      	bls.n	8002ff4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e007      	b.n	8003004 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d0e3      	beq.n	8002fca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4906      	ldr	r1, [pc, #24]	; (80030a4 <__NVIC_EnableIRQ+0x34>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	e000e100 	.word	0xe000e100

080030a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	6039      	str	r1, [r7, #0]
 80030b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	db0a      	blt.n	80030d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	490c      	ldr	r1, [pc, #48]	; (80030f4 <__NVIC_SetPriority+0x4c>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	440b      	add	r3, r1
 80030cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d0:	e00a      	b.n	80030e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	4908      	ldr	r1, [pc, #32]	; (80030f8 <__NVIC_SetPriority+0x50>)
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	3b04      	subs	r3, #4
 80030e0:	0112      	lsls	r2, r2, #4
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	440b      	add	r3, r1
 80030e6:	761a      	strb	r2, [r3, #24]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e100 	.word	0xe000e100
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b089      	sub	sp, #36	; 0x24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f1c3 0307 	rsb	r3, r3, #7
 8003116:	2b04      	cmp	r3, #4
 8003118:	bf28      	it	cs
 800311a:	2304      	movcs	r3, #4
 800311c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3304      	adds	r3, #4
 8003122:	2b06      	cmp	r3, #6
 8003124:	d902      	bls.n	800312c <NVIC_EncodePriority+0x30>
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3b03      	subs	r3, #3
 800312a:	e000      	b.n	800312e <NVIC_EncodePriority+0x32>
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	401a      	ands	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fa01 f303 	lsl.w	r3, r1, r3
 800314e:	43d9      	mvns	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	4313      	orrs	r3, r2
         );
}
 8003156:	4618      	mov	r0, r3
 8003158:	3724      	adds	r7, #36	; 0x24
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	210f      	movs	r1, #15
 8003180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003184:	f7ff ff90 	bl	80030a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff2d 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031cc:	f7ff ff42 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	6978      	ldr	r0, [r7, #20]
 80031d8:	f7ff ff90 	bl	80030fc <NVIC_EncodePriority>
 80031dc:	4602      	mov	r2, r0
 80031de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e2:	4611      	mov	r1, r2
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff5f 	bl	80030a8 <__NVIC_SetPriority>
}
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	4603      	mov	r3, r0
 80031fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff ff35 	bl	8003070 <__NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffa2 	bl	8003160 <SysTick_Config>
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800323a:	2b02      	cmp	r3, #2
 800323c:	d005      	beq.n	800324a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2204      	movs	r2, #4
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
 8003248:	e051      	b.n	80032ee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 020e 	bic.w	r2, r2, #14
 8003258:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0201 	bic.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a22      	ldr	r2, [pc, #136]	; (80032f8 <HAL_DMA_Abort_IT+0xd0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d029      	beq.n	80032c8 <HAL_DMA_Abort_IT+0xa0>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_DMA_Abort_IT+0xd4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d022      	beq.n	80032c4 <HAL_DMA_Abort_IT+0x9c>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_DMA_Abort_IT+0xd8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d01a      	beq.n	80032be <HAL_DMA_Abort_IT+0x96>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <HAL_DMA_Abort_IT+0xdc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d012      	beq.n	80032b8 <HAL_DMA_Abort_IT+0x90>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <HAL_DMA_Abort_IT+0xe0>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00a      	beq.n	80032b2 <HAL_DMA_Abort_IT+0x8a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1a      	ldr	r2, [pc, #104]	; (800330c <HAL_DMA_Abort_IT+0xe4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d102      	bne.n	80032ac <HAL_DMA_Abort_IT+0x84>
 80032a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032aa:	e00e      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b0:	e00b      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032b6:	e008      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032bc:	e005      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c2:	e002      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032c4:	2310      	movs	r3, #16
 80032c6:	e000      	b.n	80032ca <HAL_DMA_Abort_IT+0xa2>
 80032c8:	2301      	movs	r3, #1
 80032ca:	4a11      	ldr	r2, [pc, #68]	; (8003310 <HAL_DMA_Abort_IT+0xe8>)
 80032cc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
    } 
  }
  return status;
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40020008 	.word	0x40020008
 80032fc:	4002001c 	.word	0x4002001c
 8003300:	40020030 	.word	0x40020030
 8003304:	40020044 	.word	0x40020044
 8003308:	40020058 	.word	0x40020058
 800330c:	4002006c 	.word	0x4002006c
 8003310:	40020000 	.word	0x40020000

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b08b      	sub	sp, #44	; 0x2c
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003326:	e127      	b.n	8003578 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003328:	2201      	movs	r2, #1
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	429a      	cmp	r2, r3
 8003342:	f040 8116 	bne.w	8003572 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b12      	cmp	r3, #18
 800334c:	d034      	beq.n	80033b8 <HAL_GPIO_Init+0xa4>
 800334e:	2b12      	cmp	r3, #18
 8003350:	d80d      	bhi.n	800336e <HAL_GPIO_Init+0x5a>
 8003352:	2b02      	cmp	r3, #2
 8003354:	d02b      	beq.n	80033ae <HAL_GPIO_Init+0x9a>
 8003356:	2b02      	cmp	r3, #2
 8003358:	d804      	bhi.n	8003364 <HAL_GPIO_Init+0x50>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 800335e:	2b01      	cmp	r3, #1
 8003360:	d01c      	beq.n	800339c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003362:	e048      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003364:	2b03      	cmp	r3, #3
 8003366:	d043      	beq.n	80033f0 <HAL_GPIO_Init+0xdc>
 8003368:	2b11      	cmp	r3, #17
 800336a:	d01b      	beq.n	80033a4 <HAL_GPIO_Init+0x90>
          break;
 800336c:	e043      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800336e:	4a89      	ldr	r2, [pc, #548]	; (8003594 <HAL_GPIO_Init+0x280>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d026      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003374:	4a87      	ldr	r2, [pc, #540]	; (8003594 <HAL_GPIO_Init+0x280>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d806      	bhi.n	8003388 <HAL_GPIO_Init+0x74>
 800337a:	4a87      	ldr	r2, [pc, #540]	; (8003598 <HAL_GPIO_Init+0x284>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d020      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003380:	4a86      	ldr	r2, [pc, #536]	; (800359c <HAL_GPIO_Init+0x288>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
          break;
 8003386:	e036      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003388:	4a85      	ldr	r2, [pc, #532]	; (80035a0 <HAL_GPIO_Init+0x28c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 800338e:	4a85      	ldr	r2, [pc, #532]	; (80035a4 <HAL_GPIO_Init+0x290>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d016      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
 8003394:	4a84      	ldr	r2, [pc, #528]	; (80035a8 <HAL_GPIO_Init+0x294>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_GPIO_Init+0xae>
          break;
 800339a:	e02c      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	623b      	str	r3, [r7, #32]
          break;
 80033a2:	e028      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	623b      	str	r3, [r7, #32]
          break;
 80033ac:	e023      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	3308      	adds	r3, #8
 80033b4:	623b      	str	r3, [r7, #32]
          break;
 80033b6:	e01e      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	330c      	adds	r3, #12
 80033be:	623b      	str	r3, [r7, #32]
          break;
 80033c0:	e019      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d102      	bne.n	80033d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033ca:	2304      	movs	r3, #4
 80033cc:	623b      	str	r3, [r7, #32]
          break;
 80033ce:	e012      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d8:	2308      	movs	r3, #8
 80033da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69fa      	ldr	r2, [r7, #28]
 80033e0:	611a      	str	r2, [r3, #16]
          break;
 80033e2:	e008      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e4:	2308      	movs	r3, #8
 80033e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	615a      	str	r2, [r3, #20]
          break;
 80033ee:	e002      	b.n	80033f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033f0:	2300      	movs	r3, #0
 80033f2:	623b      	str	r3, [r7, #32]
          break;
 80033f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2bff      	cmp	r3, #255	; 0xff
 80033fa:	d801      	bhi.n	8003400 <HAL_GPIO_Init+0xec>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	e001      	b.n	8003404 <HAL_GPIO_Init+0xf0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2bff      	cmp	r3, #255	; 0xff
 800340a:	d802      	bhi.n	8003412 <HAL_GPIO_Init+0xfe>
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	e002      	b.n	8003418 <HAL_GPIO_Init+0x104>
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	3b08      	subs	r3, #8
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	210f      	movs	r1, #15
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	6a39      	ldr	r1, [r7, #32]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8096 	beq.w	8003572 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003446:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_GPIO_Init+0x298>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_GPIO_Init+0x298>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6193      	str	r3, [r2, #24]
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_GPIO_Init+0x298>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800345e:	4a54      	ldr	r2, [pc, #336]	; (80035b0 <HAL_GPIO_Init+0x29c>)
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	3302      	adds	r3, #2
 8003466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4b      	ldr	r2, [pc, #300]	; (80035b4 <HAL_GPIO_Init+0x2a0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_GPIO_Init+0x19e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <HAL_GPIO_Init+0x2a4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00d      	beq.n	80034ae <HAL_GPIO_Init+0x19a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a49      	ldr	r2, [pc, #292]	; (80035bc <HAL_GPIO_Init+0x2a8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <HAL_GPIO_Init+0x196>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a48      	ldr	r2, [pc, #288]	; (80035c0 <HAL_GPIO_Init+0x2ac>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_GPIO_Init+0x192>
 80034a2:	2303      	movs	r3, #3
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034a6:	2304      	movs	r3, #4
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_Init+0x1a0>
 80034b2:	2300      	movs	r3, #0
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034c4:	493a      	ldr	r1, [pc, #232]	; (80035b0 <HAL_GPIO_Init+0x29c>)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	089b      	lsrs	r3, r3, #2
 80034ca:	3302      	adds	r3, #2
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e006      	b.n	80034fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	4933      	ldr	r1, [pc, #204]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	492e      	ldr	r1, [pc, #184]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 8003512:	e006      	b.n	8003522 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003514:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	43db      	mvns	r3, r3
 800351c:	4929      	ldr	r1, [pc, #164]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800351e:	4013      	ands	r3, r2
 8003520:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800352e:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4924      	ldr	r1, [pc, #144]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
 800353a:	e006      	b.n	800354a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	43db      	mvns	r3, r3
 8003544:	491f      	ldr	r1, [pc, #124]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003546:	4013      	ands	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d006      	beq.n	8003564 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	491a      	ldr	r1, [pc, #104]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	43db      	mvns	r3, r3
 800356c:	4915      	ldr	r1, [pc, #84]	; (80035c4 <HAL_GPIO_Init+0x2b0>)
 800356e:	4013      	ands	r3, r2
 8003570:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	3301      	adds	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	f47f aed0 	bne.w	8003328 <HAL_GPIO_Init+0x14>
  }
}
 8003588:	bf00      	nop
 800358a:	372c      	adds	r7, #44	; 0x2c
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	10210000 	.word	0x10210000
 8003598:	10110000 	.word	0x10110000
 800359c:	10120000 	.word	0x10120000
 80035a0:	10310000 	.word	0x10310000
 80035a4:	10320000 	.word	0x10320000
 80035a8:	10220000 	.word	0x10220000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40010800 	.word	0x40010800
 80035b8:	40010c00 	.word	0x40010c00
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40011400 	.word	0x40011400
 80035c4:	40010400 	.word	0x40010400

080035c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035e0:	2301      	movs	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e001      	b.n	80035ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr

080035f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	807b      	strh	r3, [r7, #2]
 8003602:	4613      	mov	r3, r2
 8003604:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003606:	787b      	ldrb	r3, [r7, #1]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360c:	887a      	ldrh	r2, [r7, #2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003612:	e003      	b.n	800361c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	041a      	lsls	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	611a      	str	r2, [r3, #16]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
	...

08003628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e10f      	b.n	800385a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd fdcc 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2224      	movs	r2, #36	; 0x24
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0201 	bic.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800366c:	f001 fc30 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8003670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a7b      	ldr	r2, [pc, #492]	; (8003864 <HAL_I2C_Init+0x23c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d807      	bhi.n	800368c <HAL_I2C_Init+0x64>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a7a      	ldr	r2, [pc, #488]	; (8003868 <HAL_I2C_Init+0x240>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e006      	b.n	800369a <HAL_I2C_Init+0x72>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a77      	ldr	r2, [pc, #476]	; (800386c <HAL_I2C_Init+0x244>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e0db      	b.n	800385a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a72      	ldr	r2, [pc, #456]	; (8003870 <HAL_I2C_Init+0x248>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4a64      	ldr	r2, [pc, #400]	; (8003864 <HAL_I2C_Init+0x23c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d802      	bhi.n	80036dc <HAL_I2C_Init+0xb4>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3301      	adds	r3, #1
 80036da:	e009      	b.n	80036f0 <HAL_I2C_Init+0xc8>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_I2C_Init+0x24c>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	3301      	adds	r3, #1
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	4956      	ldr	r1, [pc, #344]	; (8003864 <HAL_I2C_Init+0x23c>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d80d      	bhi.n	800372c <HAL_I2C_Init+0x104>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1e59      	subs	r1, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	fbb1 f3f3 	udiv	r3, r1, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	2b04      	cmp	r3, #4
 8003726:	bf38      	it	cc
 8003728:	2304      	movcc	r3, #4
 800372a:	e04f      	b.n	80037cc <HAL_I2C_Init+0x1a4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d111      	bne.n	8003758 <HAL_I2C_Init+0x130>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e58      	subs	r0, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e012      	b.n	800377e <HAL_I2C_Init+0x156>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	0099      	lsls	r1, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Init+0x15e>
 8003782:	2301      	movs	r3, #1
 8003784:	e022      	b.n	80037cc <HAL_I2C_Init+0x1a4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10e      	bne.n	80037ac <HAL_I2C_Init+0x184>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1e58      	subs	r0, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6859      	ldr	r1, [r3, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	440b      	add	r3, r1
 800379c:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037aa:	e00f      	b.n	80037cc <HAL_I2C_Init+0x1a4>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	0099      	lsls	r1, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6809      	ldr	r1, [r1, #0]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6911      	ldr	r1, [r2, #16]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68d2      	ldr	r2, [r2, #12]
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	000186a0 	.word	0x000186a0
 8003868:	001e847f 	.word	0x001e847f
 800386c:	003d08ff 	.word	0x003d08ff
 8003870:	431bde83 	.word	0x431bde83
 8003874:	10624dd3 	.word	0x10624dd3

08003878 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b088      	sub	sp, #32
 800387c:	af02      	add	r7, sp, #8
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	461a      	mov	r2, r3
 8003884:	460b      	mov	r3, r1
 8003886:	817b      	strh	r3, [r7, #10]
 8003888:	4613      	mov	r3, r2
 800388a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7ff f87c 	bl	8002988 <HAL_GetTick>
 8003890:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	f040 80e0 	bne.w	8003a60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2319      	movs	r3, #25
 80038a6:	2201      	movs	r2, #1
 80038a8:	4970      	ldr	r1, [pc, #448]	; (8003a6c <HAL_I2C_Master_Transmit+0x1f4>)
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fd5e 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	e0d3      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_I2C_Master_Transmit+0x50>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0cc      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d007      	beq.n	80038ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2210      	movs	r2, #16
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	893a      	ldrh	r2, [r7, #8]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4a50      	ldr	r2, [pc, #320]	; (8003a70 <HAL_I2C_Master_Transmit+0x1f8>)
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fbec 	bl	8004114 <I2C_MasterRequestWrite>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e08d      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800395c:	e066      	b.n	8003a2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	6a39      	ldr	r1, [r7, #32]
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fdd8 	bl	8004518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b04      	cmp	r3, #4
 8003974:	d107      	bne.n	8003986 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06b      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	781a      	ldrb	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d11b      	bne.n	8003a00 <HAL_I2C_Master_Transmit+0x188>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d017      	beq.n	8003a00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6a39      	ldr	r1, [r7, #32]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fdc8 	bl	800459a <I2C_WaitOnBTFFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00d      	beq.n	8003a2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d107      	bne.n	8003a28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01a      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d194      	bne.n	800395e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	00100002 	.word	0x00100002
 8003a70:	ffff0000 	.word	0xffff0000

08003a74 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	; 0x30
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	607a      	str	r2, [r7, #4]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	460b      	mov	r3, r1
 8003a82:	817b      	strh	r3, [r7, #10]
 8003a84:	4613      	mov	r3, r2
 8003a86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a88:	f7fe ff7e 	bl	8002988 <HAL_GetTick>
 8003a8c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	f040 8213 	bne.w	8003ec2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2319      	movs	r3, #25
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	497e      	ldr	r1, [pc, #504]	; (8003ca0 <HAL_I2C_Master_Receive+0x22c>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fc60 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e206      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2C_Master_Receive+0x50>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e1ff      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d007      	beq.n	8003aea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2210      	movs	r2, #16
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	893a      	ldrh	r2, [r7, #8]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a5e      	ldr	r2, [pc, #376]	; (8003ca4 <HAL_I2C_Master_Receive+0x230>)
 8003b2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fb64 	bl	8004200 <I2C_MasterRequestRead>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1c0      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d113      	bne.n	8003b72 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	623b      	str	r3, [r7, #32]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e194      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d11d      	bne.n	8003bb6 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	61fb      	str	r3, [r7, #28]
 8003ba0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb2:	b662      	cpsie	i
 8003bb4:	e172      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d11d      	bne.n	8003bfa <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf6:	b662      	cpsie	i
 8003bf8:	e150      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c20:	e13c      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	f200 80f5 	bhi.w	8003e16 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d123      	bne.n	8003c7c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fcef 	bl	800461c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e13d      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7a:	e10f      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d150      	bne.n	8003d26 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <HAL_I2C_Master_Receive+0x234>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fb6c 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e112      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
 8003c9e:	bf00      	nop
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000
 8003ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d24:	e0ba      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4967      	ldr	r1, [pc, #412]	; (8003ecc <HAL_I2C_Master_Receive+0x458>)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fb1b 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0c1      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d50:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	494f      	ldr	r1, [pc, #316]	; (8003ecc <HAL_I2C_Master_Receive+0x458>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 faec 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e092      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003de0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e042      	b.n	8003e9c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fbfe 	bl	800461c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e04c      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d118      	bne.n	8003e9c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f47f aebe 	bne.w	8003c22 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010004 	.word	0x00010004

08003ed0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	460b      	mov	r3, r1
 8003ede:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ee0:	f7fe fd52 	bl	8002988 <HAL_GetTick>
 8003ee4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b20      	cmp	r3, #32
 8003ef4:	f040 8105 	bne.w	8004102 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2319      	movs	r3, #25
 8003efe:	2201      	movs	r2, #1
 8003f00:	4982      	ldr	r1, [pc, #520]	; (800410c <HAL_I2C_IsDeviceReady+0x23c>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa32 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e0f8      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_I2C_IsDeviceReady+0x50>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e0f1      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d007      	beq.n	8003f46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2224      	movs	r2, #36	; 0x24
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <HAL_I2C_IsDeviceReady+0x240>)
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f9f0 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0b6      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003fa4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe fcef 	bl	8002988 <HAL_GetTick>
 8003faa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fda:	e025      	b.n	8004028 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fdc:	f7fe fcd4 	bl	8002988 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <HAL_I2C_IsDeviceReady+0x122>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	22a0      	movs	r2, #160	; 0xa0
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b02      	cmp	r3, #2
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2ba0      	cmp	r3, #160	; 0xa0
 8004032:	d005      	beq.n	8004040 <HAL_I2C_IsDeviceReady+0x170>
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_I2C_IsDeviceReady+0x170>
 800403a:	7dbb      	ldrb	r3, [r7, #22]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0cd      	beq.n	8003fdc <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d129      	bne.n	80040aa <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004064:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2319      	movs	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	4921      	ldr	r1, [pc, #132]	; (800410c <HAL_I2C_IsDeviceReady+0x23c>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 f970 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e036      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e02c      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	2319      	movs	r3, #25
 80040ca:	2201      	movs	r2, #1
 80040cc:	490f      	ldr	r1, [pc, #60]	; (800410c <HAL_I2C_IsDeviceReady+0x23c>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f94c 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e012      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	f4ff af3e 	bcc.w	8003f6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00100002 	.word	0x00100002
 8004110:	ffff0000 	.word	0xffff0000

08004114 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d006      	beq.n	800413e <I2C_MasterRequestWrite+0x2a>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d003      	beq.n	800413e <I2C_MasterRequestWrite+0x2a>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800413c:	d108      	bne.n	8004150 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e00b      	b.n	8004168 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2b12      	cmp	r3, #18
 8004156:	d107      	bne.n	8004168 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f8f9 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e035      	b.n	80041f0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800418c:	d108      	bne.n	80041a0 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	e01b      	b.n	80041d8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a0:	897b      	ldrh	r3, [r7, #10]
 80041a2:	11db      	asrs	r3, r3, #7
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0306 	and.w	r3, r3, #6
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f063 030f 	orn	r3, r3, #15
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	490e      	ldr	r1, [pc, #56]	; (80041f8 <I2C_MasterRequestWrite+0xe4>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f92b 	bl	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e010      	b.n	80041f0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ce:	897b      	ldrh	r3, [r7, #10]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <I2C_MasterRequestWrite+0xe8>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f91b 	bl	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00010008 	.word	0x00010008
 80041fc:	00010002 	.word	0x00010002

08004200 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004224:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d006      	beq.n	800423a <I2C_MasterRequestRead+0x3a>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d003      	beq.n	800423a <I2C_MasterRequestRead+0x3a>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004238:	d108      	bne.n	800424c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e00b      	b.n	8004264 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	2b11      	cmp	r3, #17
 8004252:	d107      	bne.n	8004264 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004262:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f87b 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e06d      	b.n	800435c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004288:	d108      	bne.n	800429c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f043 0301 	orr.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	611a      	str	r2, [r3, #16]
 800429a:	e053      	b.n	8004344 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800429c:	897b      	ldrh	r3, [r7, #10]
 800429e:	11db      	asrs	r3, r3, #7
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	f003 0306 	and.w	r3, r3, #6
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f063 030f 	orn	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	492a      	ldr	r1, [pc, #168]	; (8004364 <I2C_MasterRequestRead+0x164>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8ad 	bl	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e048      	b.n	800435c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042ca:	897b      	ldrh	r3, [r7, #10]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	4923      	ldr	r1, [pc, #140]	; (8004368 <I2C_MasterRequestRead+0x168>)
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 f89d 	bl	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e038      	b.n	800435c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	613b      	str	r3, [r7, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f825 	bl	800436c <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e017      	b.n	800435c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800432c:	897b      	ldrh	r3, [r7, #10]
 800432e:	11db      	asrs	r3, r3, #7
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	b2db      	uxtb	r3, r3
 8004338:	f063 030e 	orn	r3, r3, #14
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <I2C_MasterRequestRead+0x168>)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f865 	bl	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e000      	b.n	800435c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010008 	.word	0x00010008
 8004368:	00010002 	.word	0x00010002

0800436c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437c:	e025      	b.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004384:	d021      	beq.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004386:	f7fe faff 	bl	8002988 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d302      	bcc.n	800439c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d116      	bne.n	80043ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e023      	b.n	8004412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10d      	bne.n	80043f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	43da      	mvns	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4013      	ands	r3, r2
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf0c      	ite	eq
 80043e6:	2301      	moveq	r3, #1
 80043e8:	2300      	movne	r3, #0
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	e00c      	b.n	800440a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	429a      	cmp	r2, r3
 800440e:	d0b6      	beq.n	800437e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004428:	e051      	b.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004438:	d123      	bne.n	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0204 	orr.w	r2, r3, #4
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e046      	b.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004488:	d021      	beq.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fe fa7d 	bl	8002988 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e020      	b.n	8004510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10c      	bne.n	80044f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	43da      	mvns	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf14      	ite	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	2300      	moveq	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	e00b      	b.n	800450a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d18d      	bne.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004524:	e02d      	b.n	8004582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8ce 	bl	80046c8 <I2C_IsAcknowledgeFailed>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02d      	b.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800453c:	d021      	beq.n	8004582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fe fa23 	bl	8002988 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d1ca      	bne.n	8004526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a6:	e02d      	b.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f88d 	bl	80046c8 <I2C_IsAcknowledgeFailed>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e02d      	b.n	8004614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045be:	d021      	beq.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c0:	f7fe f9e2 	bl	8002988 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e007      	b.n	8004614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d1ca      	bne.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004628:	e042      	b.n	80046b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b10      	cmp	r3, #16
 8004636:	d119      	bne.n	800466c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0210 	mvn.w	r2, #16
 8004640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e029      	b.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466c:	f7fe f98c 	bl	8002988 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d116      	bne.n	80046b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d1b5      	bne.n	800462a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046de:	d11b      	bne.n	8004718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e26c      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8087 	beq.w	8004852 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b04      	cmp	r3, #4
 800474e:	d00c      	beq.n	800476a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004750:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 030c 	and.w	r3, r3, #12
 8004758:	2b08      	cmp	r3, #8
 800475a:	d112      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
 800475c:	4b8c      	ldr	r3, [pc, #560]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d10b      	bne.n	8004782 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476a:	4b89      	ldr	r3, [pc, #548]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06c      	beq.n	8004850 <HAL_RCC_OscConfig+0x12c>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d168      	bne.n	8004850 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e246      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d106      	bne.n	800479a <HAL_RCC_OscConfig+0x76>
 800478c:	4b80      	ldr	r3, [pc, #512]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a7f      	ldr	r2, [pc, #508]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e02e      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10c      	bne.n	80047bc <HAL_RCC_OscConfig+0x98>
 80047a2:	4b7b      	ldr	r3, [pc, #492]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7a      	ldr	r2, [pc, #488]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	4b78      	ldr	r3, [pc, #480]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a77      	ldr	r2, [pc, #476]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0xbc>
 80047c6:	4b72      	ldr	r3, [pc, #456]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a71      	ldr	r2, [pc, #452]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0xd4>
 80047e0:	4b6b      	ldr	r3, [pc, #428]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6a      	ldr	r2, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b68      	ldr	r3, [pc, #416]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a67      	ldr	r2, [pc, #412]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004800:	f7fe f8c2 	bl	8002988 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fe f8be 	bl	8002988 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e1fa      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b5d      	ldr	r3, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xe4>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004828:	f7fe f8ae 	bl	8002988 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fe f8aa 	bl	8002988 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e1e6      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x10c>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d063      	beq.n	8004926 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800485e:	4b4c      	ldr	r3, [pc, #304]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800486a:	4b49      	ldr	r3, [pc, #292]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	2b08      	cmp	r3, #8
 8004874:	d11c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d116      	bne.n	80048b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d001      	beq.n	800489a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e1ba      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	4939      	ldr	r1, [pc, #228]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ae:	e03a      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b8:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048be:	f7fe f863 	bl	8002988 <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c6:	f7fe f85f 	bl	8002988 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e19b      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4927      	ldr	r1, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	600b      	str	r3, [r1, #0]
 80048f8:	e015      	b.n	8004926 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCC_OscConfig+0x270>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fe f842 	bl	8002988 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004908:	f7fe f83e 	bl	8002988 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e17a      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d03a      	beq.n	80049a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800493a:	4b17      	ldr	r3, [pc, #92]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 800493c:	2201      	movs	r2, #1
 800493e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004940:	f7fe f822 	bl	8002988 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004948:	f7fe f81e 	bl	8002988 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e15a      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCC_OscConfig+0x26c>)
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004966:	2001      	movs	r0, #1
 8004968:	f000 fada 	bl	8004f20 <RCC_Delay>
 800496c:	e01c      	b.n	80049a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_OscConfig+0x274>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fe f808 	bl	8002988 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497a:	e00f      	b.n	800499c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497c:	f7fe f804 	bl	8002988 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d908      	bls.n	800499c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e140      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	42420000 	.word	0x42420000
 8004998:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b9e      	ldr	r3, [pc, #632]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e9      	bne.n	800497c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 80a6 	beq.w	8004b02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b97      	ldr	r3, [pc, #604]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10d      	bne.n	80049e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	4b94      	ldr	r3, [pc, #592]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	4a93      	ldr	r2, [pc, #588]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	61d3      	str	r3, [r2, #28]
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049de:	2301      	movs	r3, #1
 80049e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e2:	4b8e      	ldr	r3, [pc, #568]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d118      	bne.n	8004a20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ee:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a8a      	ldr	r2, [pc, #552]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 80049f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fa:	f7fd ffc5 	bl	8002988 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a02:	f7fd ffc1 	bl	8002988 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b64      	cmp	r3, #100	; 0x64
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0fd      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b81      	ldr	r3, [pc, #516]	; (8004c1c <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x312>
 8004a28:	4b7b      	ldr	r3, [pc, #492]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	4a7a      	ldr	r2, [pc, #488]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6213      	str	r3, [r2, #32]
 8004a34:	e02d      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x334>
 8004a3e:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	4a75      	ldr	r2, [pc, #468]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6213      	str	r3, [r2, #32]
 8004a4a:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	4a72      	ldr	r2, [pc, #456]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	6213      	str	r3, [r2, #32]
 8004a56:	e01c      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x356>
 8004a60:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4a6c      	ldr	r2, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6213      	str	r3, [r2, #32]
 8004a6c:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6213      	str	r3, [r2, #32]
 8004a78:	e00b      	b.n	8004a92 <HAL_RCC_OscConfig+0x36e>
 8004a7a:	4b67      	ldr	r3, [pc, #412]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a66      	ldr	r2, [pc, #408]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6213      	str	r3, [r2, #32]
 8004a86:	4b64      	ldr	r3, [pc, #400]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4a63      	ldr	r2, [pc, #396]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9a:	f7fd ff75 	bl	8002988 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd ff71 	bl	8002988 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e0ab      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	4b57      	ldr	r3, [pc, #348]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ee      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x37e>
 8004ac4:	e014      	b.n	8004af0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd ff5f 	bl	8002988 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd ff5b 	bl	8002988 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e095      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	4b4c      	ldr	r3, [pc, #304]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ee      	bne.n	8004ace <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4b48      	ldr	r3, [pc, #288]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	4a47      	ldr	r2, [pc, #284]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8081 	beq.w	8004c0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	4b42      	ldr	r3, [pc, #264]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d061      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d146      	bne.n	8004bae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b20:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fd ff2f 	bl	8002988 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fd ff2b 	bl	8002988 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e067      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b40:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d108      	bne.n	8004b68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b56:	4b30      	ldr	r3, [pc, #192]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	492d      	ldr	r1, [pc, #180]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b68:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a19      	ldr	r1, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	4927      	ldr	r1, [pc, #156]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fd feff 	bl	8002988 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b8e:	f7fd fefb 	bl	8002988 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e037      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x46a>
 8004bac:	e02f      	b.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bae:	4b1c      	ldr	r3, [pc, #112]	; (8004c20 <HAL_RCC_OscConfig+0x4fc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fee8 	bl	8002988 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fd fee4 	bl	8002988 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e020      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x498>
 8004bda:	e018      	b.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e013      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_OscConfig+0x4f4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d106      	bne.n	8004c0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d001      	beq.n	8004c0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42420060 	.word	0x42420060

08004c24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e0d0      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d910      	bls.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 0207 	bic.w	r2, r3, #7
 8004c4e:	4965      	ldr	r1, [pc, #404]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0b8      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a58      	ldr	r2, [pc, #352]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c98:	4b53      	ldr	r3, [pc, #332]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a52      	ldr	r2, [pc, #328]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ca2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b50      	ldr	r3, [pc, #320]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	494d      	ldr	r1, [pc, #308]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d040      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d115      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07f      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e073      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf2:	4b3d      	ldr	r3, [pc, #244]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e06b      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d02:	4b39      	ldr	r3, [pc, #228]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 0203 	bic.w	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4936      	ldr	r1, [pc, #216]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d14:	f7fd fe38 	bl	8002988 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7fd fe34 	bl	8002988 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e053      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f003 020c 	and.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1eb      	bne.n	8004d1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d44:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d210      	bcs.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f023 0207 	bic.w	r2, r3, #7
 8004d5a:	4922      	ldr	r1, [pc, #136]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d62:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e032      	b.n	8004dda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4916      	ldr	r1, [pc, #88]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d009      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	490e      	ldr	r1, [pc, #56]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004db2:	f000 f821 	bl	8004df8 <HAL_RCC_GetSysClockFreq>
 8004db6:	4601      	mov	r1, r0
 8004db8:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	; (8004dec <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <HAL_RCC_ClockConfig+0x1cc>)
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <HAL_RCC_ClockConfig+0x1d0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd fd96 	bl	8002904 <HAL_InitTick>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40022000 	.word	0x40022000
 8004de8:	40021000 	.word	0x40021000
 8004dec:	080069ac 	.word	0x080069ac
 8004df0:	2000008c 	.word	0x2000008c
 8004df4:	20000090 	.word	0x20000090

08004df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df8:	b490      	push	{r4, r7}
 8004dfa:	b08a      	sub	sp, #40	; 0x28
 8004dfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004dfe:	4b2a      	ldr	r3, [pc, #168]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e00:	1d3c      	adds	r4, r7, #4
 8004e02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e08:	4b28      	ldr	r3, [pc, #160]	; (8004eac <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e22:	4b23      	ldr	r3, [pc, #140]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d002      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x40>
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_GetSysClockFreq+0x46>
 8004e36:	e02d      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e38:	4b1e      	ldr	r3, [pc, #120]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e3a:	623b      	str	r3, [r7, #32]
      break;
 8004e3c:	e02d      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	0c9b      	lsrs	r3, r3, #18
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004e50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c5b      	lsrs	r3, r3, #17
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004e70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e76:	fb02 f203 	mul.w	r2, r2, r3
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e004      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4a0c      	ldr	r2, [pc, #48]	; (8004eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e88:	fb02 f303 	mul.w	r3, r2, r3
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	623b      	str	r3, [r7, #32]
      break;
 8004e92:	e002      	b.n	8004e9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e96:	623b      	str	r3, [r7, #32]
      break;
 8004e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3728      	adds	r7, #40	; 0x28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc90      	pop	{r4, r7}
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	08006998 	.word	0x08006998
 8004eac:	080069a8 	.word	0x080069a8
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	007a1200 	.word	0x007a1200
 8004eb8:	003d0900 	.word	0x003d0900

08004ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	2000008c 	.word	0x2000008c

08004ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ed4:	f7ff fff2 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4a03      	ldr	r2, [pc, #12]	; (8004ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	080069bc 	.word	0x080069bc

08004ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004efc:	f7ff ffde 	bl	8004ebc <HAL_RCC_GetHCLKFreq>
 8004f00:	4601      	mov	r1, r0
 8004f02:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0adb      	lsrs	r3, r3, #11
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	4a03      	ldr	r2, [pc, #12]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f0e:	5cd3      	ldrb	r3, [r2, r3]
 8004f10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	080069bc 	.word	0x080069bc

08004f20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <RCC_Delay+0x34>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <RCC_Delay+0x38>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0a5b      	lsrs	r3, r3, #9
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f3c:	bf00      	nop
  }
  while (Delay --);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	60fa      	str	r2, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f9      	bne.n	8004f3c <RCC_Delay+0x1c>
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000008c 	.word	0x2000008c
 8004f58:	10624dd3 	.word	0x10624dd3

08004f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d07d      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10d      	bne.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f88:	4b4c      	ldr	r3, [pc, #304]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	4a4b      	ldr	r2, [pc, #300]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f92:	61d3      	str	r3, [r2, #28]
 8004f94:	4b49      	ldr	r3, [pc, #292]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa4:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d118      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb0:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbc:	f7fd fce4 	bl	8002988 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc4:	f7fd fce0 	bl	8002988 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e06d      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd6:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02e      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d027      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005000:	4b2e      	ldr	r3, [pc, #184]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005008:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800500a:	4b2e      	ldr	r3, [pc, #184]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005010:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005016:	4a29      	ldr	r2, [pc, #164]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d014      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fd fcaf 	bl	8002988 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fcab 	bl	8002988 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e036      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0ee      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4917      	ldr	r1, [pc, #92]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	4313      	orrs	r3, r2
 8005060:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005062:	7dfb      	ldrb	r3, [r7, #23]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b14      	ldr	r3, [pc, #80]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005072:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d008      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005080:	4b0e      	ldr	r3, [pc, #56]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	490b      	ldr	r1, [pc, #44]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800508e:	4313      	orrs	r3, r2
 8005090:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800509e:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4904      	ldr	r1, [pc, #16]	; (80050bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40007000 	.word	0x40007000
 80050c4:	42420440 	.word	0x42420440

080050c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e053      	b.n	8005182 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fd f9b7 	bl	8002468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005110:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	ea42 0103 	orr.w	r1, r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	0c1a      	lsrs	r2, r3, #16
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f002 0204 	and.w	r2, r2, #4
 8005160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e01d      	b.n	80051d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7fd fac9 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f000 fa0f 	bl	80055ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b06      	cmp	r3, #6
 8005208:	d007      	beq.n	800521a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d122      	bne.n	8005282 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d11b      	bne.n	8005282 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f06f 0202 	mvn.w	r2, #2
 8005252:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f9a4 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 800526e:	e005      	b.n	800527c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f997 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9a6 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b04      	cmp	r3, #4
 800528e:	d122      	bne.n	80052d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d11b      	bne.n	80052d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0204 	mvn.w	r2, #4
 80052a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f97a 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80052c2:	e005      	b.n	80052d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f96d 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f97c 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d122      	bne.n	800532a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d11b      	bne.n	800532a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f06f 0208 	mvn.w	r2, #8
 80052fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2204      	movs	r2, #4
 8005300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f950 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 8005316:	e005      	b.n	8005324 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f943 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f952 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	2b10      	cmp	r3, #16
 8005336:	d122      	bne.n	800537e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d11b      	bne.n	800537e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f06f 0210 	mvn.w	r2, #16
 800534e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2208      	movs	r2, #8
 8005354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f926 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 800536a:	e005      	b.n	8005378 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f919 	bl	80055a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f928 	bl	80055c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10e      	bne.n	80053aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f06f 0201 	mvn.w	r2, #1
 80053a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fc f989 	bl	80016bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b4:	2b80      	cmp	r3, #128	; 0x80
 80053b6:	d10e      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d107      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa50 	bl	8005876 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ee:	2b40      	cmp	r3, #64	; 0x40
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8ec 	bl	80055da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b20      	cmp	r3, #32
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0220 	mvn.w	r2, #32
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fa1b 	bl	8005864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_ConfigClockSource+0x18>
 800544a:	2302      	movs	r3, #2
 800544c:	e0a6      	b.n	800559c <HAL_TIM_ConfigClockSource+0x166>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800546c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005474:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d067      	beq.n	8005556 <HAL_TIM_ConfigClockSource+0x120>
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d80b      	bhi.n	80054a2 <HAL_TIM_ConfigClockSource+0x6c>
 800548a:	2b10      	cmp	r3, #16
 800548c:	d073      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x140>
 800548e:	2b10      	cmp	r3, #16
 8005490:	d802      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x62>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d06f      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005496:	e078      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005498:	2b20      	cmp	r3, #32
 800549a:	d06c      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x140>
 800549c:	2b30      	cmp	r3, #48	; 0x30
 800549e:	d06a      	beq.n	8005576 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054a0:	e073      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054a2:	2b70      	cmp	r3, #112	; 0x70
 80054a4:	d00d      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x8c>
 80054a6:	2b70      	cmp	r3, #112	; 0x70
 80054a8:	d804      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x7e>
 80054aa:	2b50      	cmp	r3, #80	; 0x50
 80054ac:	d033      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0xe0>
 80054ae:	2b60      	cmp	r3, #96	; 0x60
 80054b0:	d041      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054b2:	e06a      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b8:	d066      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0x152>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	d017      	beq.n	80054f0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80054c0:	e063      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	6899      	ldr	r1, [r3, #8]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f000 f964 	bl	800579e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	609a      	str	r2, [r3, #8]
      break;
 80054ee:	e04c      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6899      	ldr	r1, [r3, #8]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f000 f94d 	bl	800579e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005512:	609a      	str	r2, [r3, #8]
      break;
 8005514:	e039      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6859      	ldr	r1, [r3, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	f000 f8c4 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2150      	movs	r1, #80	; 0x50
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f91b 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005534:	e029      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6859      	ldr	r1, [r3, #4]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	461a      	mov	r2, r3
 8005544:	f000 f8e2 	bl	800570c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2160      	movs	r1, #96	; 0x60
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f90b 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005554:	e019      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	461a      	mov	r2, r3
 8005564:	f000 f8a4 	bl	80056b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2140      	movs	r1, #64	; 0x40
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f8fb 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005574:	e009      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 f8f2 	bl	800576a <TIM_ITRx_SetConfig>
      break;
 8005586:	e000      	b.n	800558a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005588:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a29      	ldr	r2, [pc, #164]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00b      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d007      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <TIM_Base_SetConfig+0xbc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_Base_SetConfig+0x30>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a25      	ldr	r2, [pc, #148]	; (80056ac <TIM_Base_SetConfig+0xc0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d108      	bne.n	800562e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1c      	ldr	r2, [pc, #112]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <TIM_Base_SetConfig+0xbc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0x62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_Base_SetConfig+0xc0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a07      	ldr	r2, [pc, #28]	; (80056a4 <TIM_Base_SetConfig+0xb8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d103      	bne.n	8005694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	615a      	str	r2, [r3, #20]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800

080056b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f023 0201 	bic.w	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f023 030a 	bic.w	r3, r3, #10
 80056ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f023 0210 	bic.w	r2, r3, #16
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005736:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	031b      	lsls	r3, r3, #12
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005748:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800576a:	b480      	push	{r7}
 800576c:	b085      	sub	sp, #20
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 0307 	orr.w	r3, r3, #7
 800578c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800579e:	b480      	push	{r7}
 80057a0:	b087      	sub	sp, #28
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	021a      	lsls	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr

080057dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e032      	b.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr

08005876 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e03f      	b.n	800591a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc ff98 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	; 0x24
 80058b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fa5f 	bl	8005d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005944:	2300      	movs	r3, #0
 8005946:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d008      	beq.n	8005976 <HAL_UART_IRQHandler+0x52>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f98d 	bl	8005c8e <UART_Receive_IT>
      return;
 8005974:	e0cc      	b.n	8005b10 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 80ab 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x1b0>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <HAL_UART_IRQHandler+0x70>
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 80a0 	beq.w	8005ad4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <HAL_UART_IRQHandler+0x90>
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ac:	f043 0201 	orr.w	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_UART_IRQHandler+0xb0>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059cc:	f043 0202 	orr.w	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_UART_IRQHandler+0xd0>
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_UART_IRQHandler+0xf0>
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0c:	f043 0208 	orr.w	r2, r3, #8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d078      	beq.n	8005b0e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_UART_IRQHandler+0x112>
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f92c 	bl	8005c8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bf14      	ite	ne
 8005a44:	2301      	movne	r3, #1
 8005a46:	2300      	moveq	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a50:	f003 0308 	and.w	r3, r3, #8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <HAL_UART_IRQHandler+0x13a>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d031      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f877 	bl	8005b52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a80:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d013      	beq.n	8005ab2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_UART_IRQHandler+0x1f4>)
 8005a90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fd fbc6 	bl	8003228 <HAL_DMA_Abort_IT>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	e00e      	b.n	8005ad0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f844 	bl	8005b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00a      	b.n	8005ad0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f840 	bl	8005b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e006      	b.n	8005ad0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f83c 	bl	8005b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ace:	e01e      	b.n	8005b0e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	bf00      	nop
    return;
 8005ad2:	e01c      	b.n	8005b0e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_UART_IRQHandler+0x1cc>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f863 	bl	8005bb4 <UART_Transmit_IT>
    return;
 8005aee:	e00f      	b.n	8005b10 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_UART_IRQHandler+0x1ec>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f8aa 	bl	8005c5e <UART_EndTransmit_IT>
    return;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005b0e:	bf00      	nop
  }
}
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	08005b8d 	.word	0x08005b8d

08005b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bc80      	pop	{r7}
 8005b2c:	4770      	bx	lr

08005b2e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b36:	bf00      	nop
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr

08005b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b083      	sub	sp, #12
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr

08005b8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ffca 	bl	8005b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b21      	cmp	r3, #33	; 0x21
 8005bc6:	d144      	bne.n	8005c52 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d11a      	bne.n	8005c08 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]
 8005bfa:	e00e      	b.n	8005c1a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]
 8005c06:	e008      	b.n	8005c1a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	1c59      	adds	r1, r3, #1
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	6211      	str	r1, [r2, #32]
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	4619      	mov	r1, r3
 8005c28:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bc80      	pop	{r7}
 8005c5c:	4770      	bx	lr

08005c5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff ff4c 	bl	8005b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b22      	cmp	r3, #34	; 0x22
 8005ca0:	d171      	bne.n	8005d86 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005caa:	d123      	bne.n	8005cf4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10e      	bne.n	8005cd8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8005cd6:	e029      	b.n	8005d2c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf2:	e01b      	b.n	8005d2c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6858      	ldr	r0, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6291      	str	r1, [r2, #40]	; 0x28
 8005d0c:	b2c2      	uxtb	r2, r0
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e00c      	b.n	8005d2c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	1c58      	adds	r0, r3, #1
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	6288      	str	r0, [r1, #40]	; 0x28
 8005d24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4619      	mov	r1, r3
 8005d3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d120      	bne.n	8005d82 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0220 	bic.w	r2, r2, #32
 8005d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	695a      	ldr	r2, [r3, #20]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0201 	bic.w	r2, r2, #1
 8005d6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fed8 	bl	8005b2e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e002      	b.n	8005d88 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005dca:	f023 030c 	bic.w	r3, r3, #12
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a52      	ldr	r2, [pc, #328]	; (8005f3c <UART_SetConfig+0x1ac>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d14e      	bne.n	8005e96 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7ff f87e 	bl	8004ef8 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009a      	lsls	r2, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	4a4a      	ldr	r2, [pc, #296]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005e16:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	0119      	lsls	r1, r3, #4
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	009a      	lsls	r2, r3, #2
 8005e28:	441a      	add	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e34:	4b42      	ldr	r3, [pc, #264]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005e36:	fba3 0302 	umull	r0, r3, r3, r2
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	2064      	movs	r0, #100	; 0x64
 8005e3e:	fb00 f303 	mul.w	r3, r0, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	3332      	adds	r3, #50	; 0x32
 8005e48:	4a3d      	ldr	r2, [pc, #244]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e54:	4419      	add	r1, r3
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009a      	lsls	r2, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e6c:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2064      	movs	r0, #100	; 0x64
 8005e76:	fb00 f303 	mul.w	r3, r0, r3
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	3332      	adds	r3, #50	; 0x32
 8005e80:	4a2f      	ldr	r2, [pc, #188]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	440a      	add	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005e94:	e04d      	b.n	8005f32 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7ff f81b 	bl	8004ed0 <HAL_RCC_GetPCLK1Freq>
 8005e9a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009a      	lsls	r2, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	4a23      	ldr	r2, [pc, #140]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	0119      	lsls	r1, r3, #4
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009a      	lsls	r2, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005ed4:	fba3 0302 	umull	r0, r3, r3, r2
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	2064      	movs	r0, #100	; 0x64
 8005edc:	fb00 f303 	mul.w	r3, r0, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	011b      	lsls	r3, r3, #4
 8005ee4:	3332      	adds	r3, #50	; 0x32
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef2:	4419      	add	r1, r3
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009a      	lsls	r2, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f0a:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005f0c:	fba3 0302 	umull	r0, r3, r3, r2
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	2064      	movs	r0, #100	; 0x64
 8005f14:	fb00 f303 	mul.w	r3, r0, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	3332      	adds	r3, #50	; 0x32
 8005f1e:	4a08      	ldr	r2, [pc, #32]	; (8005f40 <UART_SetConfig+0x1b0>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	440a      	add	r2, r1
 8005f30:	609a      	str	r2, [r3, #8]
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40013800 	.word	0x40013800
 8005f40:	51eb851f 	.word	0x51eb851f

08005f44 <__errno>:
 8005f44:	4b01      	ldr	r3, [pc, #4]	; (8005f4c <__errno+0x8>)
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20000098 	.word	0x20000098

08005f50 <__libc_init_array>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	2500      	movs	r5, #0
 8005f54:	4e0c      	ldr	r6, [pc, #48]	; (8005f88 <__libc_init_array+0x38>)
 8005f56:	4c0d      	ldr	r4, [pc, #52]	; (8005f8c <__libc_init_array+0x3c>)
 8005f58:	1ba4      	subs	r4, r4, r6
 8005f5a:	10a4      	asrs	r4, r4, #2
 8005f5c:	42a5      	cmp	r5, r4
 8005f5e:	d109      	bne.n	8005f74 <__libc_init_array+0x24>
 8005f60:	f000 fc34 	bl	80067cc <_init>
 8005f64:	2500      	movs	r5, #0
 8005f66:	4e0a      	ldr	r6, [pc, #40]	; (8005f90 <__libc_init_array+0x40>)
 8005f68:	4c0a      	ldr	r4, [pc, #40]	; (8005f94 <__libc_init_array+0x44>)
 8005f6a:	1ba4      	subs	r4, r4, r6
 8005f6c:	10a4      	asrs	r4, r4, #2
 8005f6e:	42a5      	cmp	r5, r4
 8005f70:	d105      	bne.n	8005f7e <__libc_init_array+0x2e>
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f78:	4798      	blx	r3
 8005f7a:	3501      	adds	r5, #1
 8005f7c:	e7ee      	b.n	8005f5c <__libc_init_array+0xc>
 8005f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f82:	4798      	blx	r3
 8005f84:	3501      	adds	r5, #1
 8005f86:	e7f2      	b.n	8005f6e <__libc_init_array+0x1e>
 8005f88:	080069f8 	.word	0x080069f8
 8005f8c:	080069f8 	.word	0x080069f8
 8005f90:	080069f8 	.word	0x080069f8
 8005f94:	080069fc 	.word	0x080069fc

08005f98 <memset>:
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4402      	add	r2, r0
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d100      	bne.n	8005fa2 <memset+0xa>
 8005fa0:	4770      	bx	lr
 8005fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa6:	e7f9      	b.n	8005f9c <memset+0x4>

08005fa8 <siprintf>:
 8005fa8:	b40e      	push	{r1, r2, r3}
 8005faa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fae:	b500      	push	{lr}
 8005fb0:	b09c      	sub	sp, #112	; 0x70
 8005fb2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	9006      	str	r0, [sp, #24]
 8005fb8:	9107      	str	r1, [sp, #28]
 8005fba:	9104      	str	r1, [sp, #16]
 8005fbc:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <siprintf+0x38>)
 8005fbe:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <siprintf+0x3c>)
 8005fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fc4:	9105      	str	r1, [sp, #20]
 8005fc6:	6800      	ldr	r0, [r0, #0]
 8005fc8:	a902      	add	r1, sp, #8
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	f000 f866 	bl	800609c <_svfiprintf_r>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	9b02      	ldr	r3, [sp, #8]
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	b01c      	add	sp, #112	; 0x70
 8005fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fdc:	b003      	add	sp, #12
 8005fde:	4770      	bx	lr
 8005fe0:	20000098 	.word	0x20000098
 8005fe4:	ffff0208 	.word	0xffff0208

08005fe8 <__ssputs_r>:
 8005fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fec:	688e      	ldr	r6, [r1, #8]
 8005fee:	4682      	mov	sl, r0
 8005ff0:	429e      	cmp	r6, r3
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	4690      	mov	r8, r2
 8005ff6:	4699      	mov	r9, r3
 8005ff8:	d837      	bhi.n	800606a <__ssputs_r+0x82>
 8005ffa:	898a      	ldrh	r2, [r1, #12]
 8005ffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006000:	d031      	beq.n	8006066 <__ssputs_r+0x7e>
 8006002:	2302      	movs	r3, #2
 8006004:	6825      	ldr	r5, [r4, #0]
 8006006:	6909      	ldr	r1, [r1, #16]
 8006008:	1a6f      	subs	r7, r5, r1
 800600a:	6965      	ldr	r5, [r4, #20]
 800600c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006010:	fb95 f5f3 	sdiv	r5, r5, r3
 8006014:	f109 0301 	add.w	r3, r9, #1
 8006018:	443b      	add	r3, r7
 800601a:	429d      	cmp	r5, r3
 800601c:	bf38      	it	cc
 800601e:	461d      	movcc	r5, r3
 8006020:	0553      	lsls	r3, r2, #21
 8006022:	d530      	bpl.n	8006086 <__ssputs_r+0x9e>
 8006024:	4629      	mov	r1, r5
 8006026:	f000 fb37 	bl	8006698 <_malloc_r>
 800602a:	4606      	mov	r6, r0
 800602c:	b950      	cbnz	r0, 8006044 <__ssputs_r+0x5c>
 800602e:	230c      	movs	r3, #12
 8006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006034:	f8ca 3000 	str.w	r3, [sl]
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603e:	81a3      	strh	r3, [r4, #12]
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	463a      	mov	r2, r7
 8006046:	6921      	ldr	r1, [r4, #16]
 8006048:	f000 fab6 	bl	80065b8 <memcpy>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	6126      	str	r6, [r4, #16]
 800605a:	443e      	add	r6, r7
 800605c:	6026      	str	r6, [r4, #0]
 800605e:	464e      	mov	r6, r9
 8006060:	6165      	str	r5, [r4, #20]
 8006062:	1bed      	subs	r5, r5, r7
 8006064:	60a5      	str	r5, [r4, #8]
 8006066:	454e      	cmp	r6, r9
 8006068:	d900      	bls.n	800606c <__ssputs_r+0x84>
 800606a:	464e      	mov	r6, r9
 800606c:	4632      	mov	r2, r6
 800606e:	4641      	mov	r1, r8
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	f000 faac 	bl	80065ce <memmove>
 8006076:	68a3      	ldr	r3, [r4, #8]
 8006078:	2000      	movs	r0, #0
 800607a:	1b9b      	subs	r3, r3, r6
 800607c:	60a3      	str	r3, [r4, #8]
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	441e      	add	r6, r3
 8006082:	6026      	str	r6, [r4, #0]
 8006084:	e7dc      	b.n	8006040 <__ssputs_r+0x58>
 8006086:	462a      	mov	r2, r5
 8006088:	f000 fb60 	bl	800674c <_realloc_r>
 800608c:	4606      	mov	r6, r0
 800608e:	2800      	cmp	r0, #0
 8006090:	d1e2      	bne.n	8006058 <__ssputs_r+0x70>
 8006092:	6921      	ldr	r1, [r4, #16]
 8006094:	4650      	mov	r0, sl
 8006096:	f000 fab3 	bl	8006600 <_free_r>
 800609a:	e7c8      	b.n	800602e <__ssputs_r+0x46>

0800609c <_svfiprintf_r>:
 800609c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a0:	461d      	mov	r5, r3
 80060a2:	898b      	ldrh	r3, [r1, #12]
 80060a4:	b09d      	sub	sp, #116	; 0x74
 80060a6:	061f      	lsls	r7, r3, #24
 80060a8:	4680      	mov	r8, r0
 80060aa:	460c      	mov	r4, r1
 80060ac:	4616      	mov	r6, r2
 80060ae:	d50f      	bpl.n	80060d0 <_svfiprintf_r+0x34>
 80060b0:	690b      	ldr	r3, [r1, #16]
 80060b2:	b96b      	cbnz	r3, 80060d0 <_svfiprintf_r+0x34>
 80060b4:	2140      	movs	r1, #64	; 0x40
 80060b6:	f000 faef 	bl	8006698 <_malloc_r>
 80060ba:	6020      	str	r0, [r4, #0]
 80060bc:	6120      	str	r0, [r4, #16]
 80060be:	b928      	cbnz	r0, 80060cc <_svfiprintf_r+0x30>
 80060c0:	230c      	movs	r3, #12
 80060c2:	f8c8 3000 	str.w	r3, [r8]
 80060c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060ca:	e0c8      	b.n	800625e <_svfiprintf_r+0x1c2>
 80060cc:	2340      	movs	r3, #64	; 0x40
 80060ce:	6163      	str	r3, [r4, #20]
 80060d0:	2300      	movs	r3, #0
 80060d2:	9309      	str	r3, [sp, #36]	; 0x24
 80060d4:	2320      	movs	r3, #32
 80060d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060da:	2330      	movs	r3, #48	; 0x30
 80060dc:	f04f 0b01 	mov.w	fp, #1
 80060e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e4:	9503      	str	r5, [sp, #12]
 80060e6:	4637      	mov	r7, r6
 80060e8:	463d      	mov	r5, r7
 80060ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060ee:	b10b      	cbz	r3, 80060f4 <_svfiprintf_r+0x58>
 80060f0:	2b25      	cmp	r3, #37	; 0x25
 80060f2:	d13e      	bne.n	8006172 <_svfiprintf_r+0xd6>
 80060f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80060f8:	d00b      	beq.n	8006112 <_svfiprintf_r+0x76>
 80060fa:	4653      	mov	r3, sl
 80060fc:	4632      	mov	r2, r6
 80060fe:	4621      	mov	r1, r4
 8006100:	4640      	mov	r0, r8
 8006102:	f7ff ff71 	bl	8005fe8 <__ssputs_r>
 8006106:	3001      	adds	r0, #1
 8006108:	f000 80a4 	beq.w	8006254 <_svfiprintf_r+0x1b8>
 800610c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800610e:	4453      	add	r3, sl
 8006110:	9309      	str	r3, [sp, #36]	; 0x24
 8006112:	783b      	ldrb	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 809d 	beq.w	8006254 <_svfiprintf_r+0x1b8>
 800611a:	2300      	movs	r3, #0
 800611c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	9307      	str	r3, [sp, #28]
 8006128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800612c:	931a      	str	r3, [sp, #104]	; 0x68
 800612e:	462f      	mov	r7, r5
 8006130:	2205      	movs	r2, #5
 8006132:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006136:	4850      	ldr	r0, [pc, #320]	; (8006278 <_svfiprintf_r+0x1dc>)
 8006138:	f000 fa30 	bl	800659c <memchr>
 800613c:	9b04      	ldr	r3, [sp, #16]
 800613e:	b9d0      	cbnz	r0, 8006176 <_svfiprintf_r+0xda>
 8006140:	06d9      	lsls	r1, r3, #27
 8006142:	bf44      	itt	mi
 8006144:	2220      	movmi	r2, #32
 8006146:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800614a:	071a      	lsls	r2, r3, #28
 800614c:	bf44      	itt	mi
 800614e:	222b      	movmi	r2, #43	; 0x2b
 8006150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006154:	782a      	ldrb	r2, [r5, #0]
 8006156:	2a2a      	cmp	r2, #42	; 0x2a
 8006158:	d015      	beq.n	8006186 <_svfiprintf_r+0xea>
 800615a:	462f      	mov	r7, r5
 800615c:	2000      	movs	r0, #0
 800615e:	250a      	movs	r5, #10
 8006160:	9a07      	ldr	r2, [sp, #28]
 8006162:	4639      	mov	r1, r7
 8006164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006168:	3b30      	subs	r3, #48	; 0x30
 800616a:	2b09      	cmp	r3, #9
 800616c:	d94d      	bls.n	800620a <_svfiprintf_r+0x16e>
 800616e:	b1b8      	cbz	r0, 80061a0 <_svfiprintf_r+0x104>
 8006170:	e00f      	b.n	8006192 <_svfiprintf_r+0xf6>
 8006172:	462f      	mov	r7, r5
 8006174:	e7b8      	b.n	80060e8 <_svfiprintf_r+0x4c>
 8006176:	4a40      	ldr	r2, [pc, #256]	; (8006278 <_svfiprintf_r+0x1dc>)
 8006178:	463d      	mov	r5, r7
 800617a:	1a80      	subs	r0, r0, r2
 800617c:	fa0b f000 	lsl.w	r0, fp, r0
 8006180:	4318      	orrs	r0, r3
 8006182:	9004      	str	r0, [sp, #16]
 8006184:	e7d3      	b.n	800612e <_svfiprintf_r+0x92>
 8006186:	9a03      	ldr	r2, [sp, #12]
 8006188:	1d11      	adds	r1, r2, #4
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	9103      	str	r1, [sp, #12]
 800618e:	2a00      	cmp	r2, #0
 8006190:	db01      	blt.n	8006196 <_svfiprintf_r+0xfa>
 8006192:	9207      	str	r2, [sp, #28]
 8006194:	e004      	b.n	80061a0 <_svfiprintf_r+0x104>
 8006196:	4252      	negs	r2, r2
 8006198:	f043 0302 	orr.w	r3, r3, #2
 800619c:	9207      	str	r2, [sp, #28]
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	783b      	ldrb	r3, [r7, #0]
 80061a2:	2b2e      	cmp	r3, #46	; 0x2e
 80061a4:	d10c      	bne.n	80061c0 <_svfiprintf_r+0x124>
 80061a6:	787b      	ldrb	r3, [r7, #1]
 80061a8:	2b2a      	cmp	r3, #42	; 0x2a
 80061aa:	d133      	bne.n	8006214 <_svfiprintf_r+0x178>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	3702      	adds	r7, #2
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	9203      	str	r2, [sp, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	bfb8      	it	lt
 80061ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	4d2e      	ldr	r5, [pc, #184]	; (800627c <_svfiprintf_r+0x1e0>)
 80061c2:	2203      	movs	r2, #3
 80061c4:	7839      	ldrb	r1, [r7, #0]
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 f9e8 	bl	800659c <memchr>
 80061cc:	b138      	cbz	r0, 80061de <_svfiprintf_r+0x142>
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	1b40      	subs	r0, r0, r5
 80061d2:	fa03 f000 	lsl.w	r0, r3, r0
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	3701      	adds	r7, #1
 80061da:	4303      	orrs	r3, r0
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	7839      	ldrb	r1, [r7, #0]
 80061e0:	2206      	movs	r2, #6
 80061e2:	4827      	ldr	r0, [pc, #156]	; (8006280 <_svfiprintf_r+0x1e4>)
 80061e4:	1c7e      	adds	r6, r7, #1
 80061e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061ea:	f000 f9d7 	bl	800659c <memchr>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d038      	beq.n	8006264 <_svfiprintf_r+0x1c8>
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <_svfiprintf_r+0x1e8>)
 80061f4:	bb13      	cbnz	r3, 800623c <_svfiprintf_r+0x1a0>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	3307      	adds	r3, #7
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	3308      	adds	r3, #8
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	444b      	add	r3, r9
 8006206:	9309      	str	r3, [sp, #36]	; 0x24
 8006208:	e76d      	b.n	80060e6 <_svfiprintf_r+0x4a>
 800620a:	fb05 3202 	mla	r2, r5, r2, r3
 800620e:	2001      	movs	r0, #1
 8006210:	460f      	mov	r7, r1
 8006212:	e7a6      	b.n	8006162 <_svfiprintf_r+0xc6>
 8006214:	2300      	movs	r3, #0
 8006216:	250a      	movs	r5, #10
 8006218:	4619      	mov	r1, r3
 800621a:	3701      	adds	r7, #1
 800621c:	9305      	str	r3, [sp, #20]
 800621e:	4638      	mov	r0, r7
 8006220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006224:	3a30      	subs	r2, #48	; 0x30
 8006226:	2a09      	cmp	r2, #9
 8006228:	d903      	bls.n	8006232 <_svfiprintf_r+0x196>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0c8      	beq.n	80061c0 <_svfiprintf_r+0x124>
 800622e:	9105      	str	r1, [sp, #20]
 8006230:	e7c6      	b.n	80061c0 <_svfiprintf_r+0x124>
 8006232:	fb05 2101 	mla	r1, r5, r1, r2
 8006236:	2301      	movs	r3, #1
 8006238:	4607      	mov	r7, r0
 800623a:	e7f0      	b.n	800621e <_svfiprintf_r+0x182>
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4622      	mov	r2, r4
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <_svfiprintf_r+0x1ec>)
 8006244:	a904      	add	r1, sp, #16
 8006246:	4640      	mov	r0, r8
 8006248:	f3af 8000 	nop.w
 800624c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006250:	4681      	mov	r9, r0
 8006252:	d1d6      	bne.n	8006202 <_svfiprintf_r+0x166>
 8006254:	89a3      	ldrh	r3, [r4, #12]
 8006256:	065b      	lsls	r3, r3, #25
 8006258:	f53f af35 	bmi.w	80060c6 <_svfiprintf_r+0x2a>
 800625c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625e:	b01d      	add	sp, #116	; 0x74
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4622      	mov	r2, r4
 800626a:	4b07      	ldr	r3, [pc, #28]	; (8006288 <_svfiprintf_r+0x1ec>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4640      	mov	r0, r8
 8006270:	f000 f882 	bl	8006378 <_printf_i>
 8006274:	e7ea      	b.n	800624c <_svfiprintf_r+0x1b0>
 8006276:	bf00      	nop
 8006278:	080069c4 	.word	0x080069c4
 800627c:	080069ca 	.word	0x080069ca
 8006280:	080069ce 	.word	0x080069ce
 8006284:	00000000 	.word	0x00000000
 8006288:	08005fe9 	.word	0x08005fe9

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4691      	mov	r9, r2
 8006292:	461f      	mov	r7, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	4606      	mov	r6, r0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfb8      	it	lt
 800629e:	4613      	movlt	r3, r2
 80062a0:	f8c9 3000 	str.w	r3, [r9]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a8:	460c      	mov	r4, r1
 80062aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062ae:	b112      	cbz	r2, 80062b6 <_printf_common+0x2a>
 80062b0:	3301      	adds	r3, #1
 80062b2:	f8c9 3000 	str.w	r3, [r9]
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	0699      	lsls	r1, r3, #26
 80062ba:	bf42      	ittt	mi
 80062bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062c0:	3302      	addmi	r3, #2
 80062c2:	f8c9 3000 	strmi.w	r3, [r9]
 80062c6:	6825      	ldr	r5, [r4, #0]
 80062c8:	f015 0506 	ands.w	r5, r5, #6
 80062cc:	d107      	bne.n	80062de <_printf_common+0x52>
 80062ce:	f104 0a19 	add.w	sl, r4, #25
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	f8d9 2000 	ldr.w	r2, [r9]
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	42ab      	cmp	r3, r5
 80062dc:	dc29      	bgt.n	8006332 <_printf_common+0xa6>
 80062de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062e2:	6822      	ldr	r2, [r4, #0]
 80062e4:	3300      	adds	r3, #0
 80062e6:	bf18      	it	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	0692      	lsls	r2, r2, #26
 80062ec:	d42e      	bmi.n	800634c <_printf_common+0xc0>
 80062ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f2:	4639      	mov	r1, r7
 80062f4:	4630      	mov	r0, r6
 80062f6:	47c0      	blx	r8
 80062f8:	3001      	adds	r0, #1
 80062fa:	d021      	beq.n	8006340 <_printf_common+0xb4>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	68e5      	ldr	r5, [r4, #12]
 8006300:	f003 0306 	and.w	r3, r3, #6
 8006304:	2b04      	cmp	r3, #4
 8006306:	bf18      	it	ne
 8006308:	2500      	movne	r5, #0
 800630a:	f8d9 2000 	ldr.w	r2, [r9]
 800630e:	f04f 0900 	mov.w	r9, #0
 8006312:	bf08      	it	eq
 8006314:	1aad      	subeq	r5, r5, r2
 8006316:	68a3      	ldr	r3, [r4, #8]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	bf08      	it	eq
 800631c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006320:	4293      	cmp	r3, r2
 8006322:	bfc4      	itt	gt
 8006324:	1a9b      	subgt	r3, r3, r2
 8006326:	18ed      	addgt	r5, r5, r3
 8006328:	341a      	adds	r4, #26
 800632a:	454d      	cmp	r5, r9
 800632c:	d11a      	bne.n	8006364 <_printf_common+0xd8>
 800632e:	2000      	movs	r0, #0
 8006330:	e008      	b.n	8006344 <_printf_common+0xb8>
 8006332:	2301      	movs	r3, #1
 8006334:	4652      	mov	r2, sl
 8006336:	4639      	mov	r1, r7
 8006338:	4630      	mov	r0, r6
 800633a:	47c0      	blx	r8
 800633c:	3001      	adds	r0, #1
 800633e:	d103      	bne.n	8006348 <_printf_common+0xbc>
 8006340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	3501      	adds	r5, #1
 800634a:	e7c2      	b.n	80062d2 <_printf_common+0x46>
 800634c:	2030      	movs	r0, #48	; 0x30
 800634e:	18e1      	adds	r1, r4, r3
 8006350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800635a:	4422      	add	r2, r4
 800635c:	3302      	adds	r3, #2
 800635e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006362:	e7c4      	b.n	80062ee <_printf_common+0x62>
 8006364:	2301      	movs	r3, #1
 8006366:	4622      	mov	r2, r4
 8006368:	4639      	mov	r1, r7
 800636a:	4630      	mov	r0, r6
 800636c:	47c0      	blx	r8
 800636e:	3001      	adds	r0, #1
 8006370:	d0e6      	beq.n	8006340 <_printf_common+0xb4>
 8006372:	f109 0901 	add.w	r9, r9, #1
 8006376:	e7d8      	b.n	800632a <_printf_common+0x9e>

08006378 <_printf_i>:
 8006378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800637c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006380:	460c      	mov	r4, r1
 8006382:	7e09      	ldrb	r1, [r1, #24]
 8006384:	b085      	sub	sp, #20
 8006386:	296e      	cmp	r1, #110	; 0x6e
 8006388:	4617      	mov	r7, r2
 800638a:	4606      	mov	r6, r0
 800638c:	4698      	mov	r8, r3
 800638e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006390:	f000 80b3 	beq.w	80064fa <_printf_i+0x182>
 8006394:	d822      	bhi.n	80063dc <_printf_i+0x64>
 8006396:	2963      	cmp	r1, #99	; 0x63
 8006398:	d036      	beq.n	8006408 <_printf_i+0x90>
 800639a:	d80a      	bhi.n	80063b2 <_printf_i+0x3a>
 800639c:	2900      	cmp	r1, #0
 800639e:	f000 80b9 	beq.w	8006514 <_printf_i+0x19c>
 80063a2:	2958      	cmp	r1, #88	; 0x58
 80063a4:	f000 8083 	beq.w	80064ae <_printf_i+0x136>
 80063a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063b0:	e032      	b.n	8006418 <_printf_i+0xa0>
 80063b2:	2964      	cmp	r1, #100	; 0x64
 80063b4:	d001      	beq.n	80063ba <_printf_i+0x42>
 80063b6:	2969      	cmp	r1, #105	; 0x69
 80063b8:	d1f6      	bne.n	80063a8 <_printf_i+0x30>
 80063ba:	6820      	ldr	r0, [r4, #0]
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	0605      	lsls	r5, r0, #24
 80063c0:	f103 0104 	add.w	r1, r3, #4
 80063c4:	d52a      	bpl.n	800641c <_printf_i+0xa4>
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6011      	str	r1, [r2, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	da03      	bge.n	80063d6 <_printf_i+0x5e>
 80063ce:	222d      	movs	r2, #45	; 0x2d
 80063d0:	425b      	negs	r3, r3
 80063d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063d6:	486f      	ldr	r0, [pc, #444]	; (8006594 <_printf_i+0x21c>)
 80063d8:	220a      	movs	r2, #10
 80063da:	e039      	b.n	8006450 <_printf_i+0xd8>
 80063dc:	2973      	cmp	r1, #115	; 0x73
 80063de:	f000 809d 	beq.w	800651c <_printf_i+0x1a4>
 80063e2:	d808      	bhi.n	80063f6 <_printf_i+0x7e>
 80063e4:	296f      	cmp	r1, #111	; 0x6f
 80063e6:	d020      	beq.n	800642a <_printf_i+0xb2>
 80063e8:	2970      	cmp	r1, #112	; 0x70
 80063ea:	d1dd      	bne.n	80063a8 <_printf_i+0x30>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	f043 0320 	orr.w	r3, r3, #32
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	e003      	b.n	80063fe <_printf_i+0x86>
 80063f6:	2975      	cmp	r1, #117	; 0x75
 80063f8:	d017      	beq.n	800642a <_printf_i+0xb2>
 80063fa:	2978      	cmp	r1, #120	; 0x78
 80063fc:	d1d4      	bne.n	80063a8 <_printf_i+0x30>
 80063fe:	2378      	movs	r3, #120	; 0x78
 8006400:	4865      	ldr	r0, [pc, #404]	; (8006598 <_printf_i+0x220>)
 8006402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006406:	e055      	b.n	80064b4 <_printf_i+0x13c>
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640e:	1d19      	adds	r1, r3, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6011      	str	r1, [r2, #0]
 8006414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006418:	2301      	movs	r3, #1
 800641a:	e08c      	b.n	8006536 <_printf_i+0x1be>
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006422:	6011      	str	r1, [r2, #0]
 8006424:	bf18      	it	ne
 8006426:	b21b      	sxthne	r3, r3
 8006428:	e7cf      	b.n	80063ca <_printf_i+0x52>
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	6825      	ldr	r5, [r4, #0]
 800642e:	1d18      	adds	r0, r3, #4
 8006430:	6010      	str	r0, [r2, #0]
 8006432:	0628      	lsls	r0, r5, #24
 8006434:	d501      	bpl.n	800643a <_printf_i+0xc2>
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	e002      	b.n	8006440 <_printf_i+0xc8>
 800643a:	0668      	lsls	r0, r5, #25
 800643c:	d5fb      	bpl.n	8006436 <_printf_i+0xbe>
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	296f      	cmp	r1, #111	; 0x6f
 8006442:	bf14      	ite	ne
 8006444:	220a      	movne	r2, #10
 8006446:	2208      	moveq	r2, #8
 8006448:	4852      	ldr	r0, [pc, #328]	; (8006594 <_printf_i+0x21c>)
 800644a:	2100      	movs	r1, #0
 800644c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006450:	6865      	ldr	r5, [r4, #4]
 8006452:	2d00      	cmp	r5, #0
 8006454:	60a5      	str	r5, [r4, #8]
 8006456:	f2c0 8095 	blt.w	8006584 <_printf_i+0x20c>
 800645a:	6821      	ldr	r1, [r4, #0]
 800645c:	f021 0104 	bic.w	r1, r1, #4
 8006460:	6021      	str	r1, [r4, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d13d      	bne.n	80064e2 <_printf_i+0x16a>
 8006466:	2d00      	cmp	r5, #0
 8006468:	f040 808e 	bne.w	8006588 <_printf_i+0x210>
 800646c:	4665      	mov	r5, ip
 800646e:	2a08      	cmp	r2, #8
 8006470:	d10b      	bne.n	800648a <_printf_i+0x112>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	07db      	lsls	r3, r3, #31
 8006476:	d508      	bpl.n	800648a <_printf_i+0x112>
 8006478:	6923      	ldr	r3, [r4, #16]
 800647a:	6862      	ldr	r2, [r4, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	bfde      	ittt	le
 8006480:	2330      	movle	r3, #48	; 0x30
 8006482:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006486:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800648a:	ebac 0305 	sub.w	r3, ip, r5
 800648e:	6123      	str	r3, [r4, #16]
 8006490:	f8cd 8000 	str.w	r8, [sp]
 8006494:	463b      	mov	r3, r7
 8006496:	aa03      	add	r2, sp, #12
 8006498:	4621      	mov	r1, r4
 800649a:	4630      	mov	r0, r6
 800649c:	f7ff fef6 	bl	800628c <_printf_common>
 80064a0:	3001      	adds	r0, #1
 80064a2:	d14d      	bne.n	8006540 <_printf_i+0x1c8>
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064a8:	b005      	add	sp, #20
 80064aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ae:	4839      	ldr	r0, [pc, #228]	; (8006594 <_printf_i+0x21c>)
 80064b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064b4:	6813      	ldr	r3, [r2, #0]
 80064b6:	6821      	ldr	r1, [r4, #0]
 80064b8:	1d1d      	adds	r5, r3, #4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6015      	str	r5, [r2, #0]
 80064be:	060a      	lsls	r2, r1, #24
 80064c0:	d50b      	bpl.n	80064da <_printf_i+0x162>
 80064c2:	07ca      	lsls	r2, r1, #31
 80064c4:	bf44      	itt	mi
 80064c6:	f041 0120 	orrmi.w	r1, r1, #32
 80064ca:	6021      	strmi	r1, [r4, #0]
 80064cc:	b91b      	cbnz	r3, 80064d6 <_printf_i+0x15e>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	f022 0220 	bic.w	r2, r2, #32
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	2210      	movs	r2, #16
 80064d8:	e7b7      	b.n	800644a <_printf_i+0xd2>
 80064da:	064d      	lsls	r5, r1, #25
 80064dc:	bf48      	it	mi
 80064de:	b29b      	uxthmi	r3, r3
 80064e0:	e7ef      	b.n	80064c2 <_printf_i+0x14a>
 80064e2:	4665      	mov	r5, ip
 80064e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80064e8:	fb02 3311 	mls	r3, r2, r1, r3
 80064ec:	5cc3      	ldrb	r3, [r0, r3]
 80064ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064f2:	460b      	mov	r3, r1
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d1f5      	bne.n	80064e4 <_printf_i+0x16c>
 80064f8:	e7b9      	b.n	800646e <_printf_i+0xf6>
 80064fa:	6813      	ldr	r3, [r2, #0]
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	1d18      	adds	r0, r3, #4
 8006500:	6961      	ldr	r1, [r4, #20]
 8006502:	6010      	str	r0, [r2, #0]
 8006504:	0628      	lsls	r0, r5, #24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	d501      	bpl.n	800650e <_printf_i+0x196>
 800650a:	6019      	str	r1, [r3, #0]
 800650c:	e002      	b.n	8006514 <_printf_i+0x19c>
 800650e:	066a      	lsls	r2, r5, #25
 8006510:	d5fb      	bpl.n	800650a <_printf_i+0x192>
 8006512:	8019      	strh	r1, [r3, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	4665      	mov	r5, ip
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	e7b9      	b.n	8006490 <_printf_i+0x118>
 800651c:	6813      	ldr	r3, [r2, #0]
 800651e:	1d19      	adds	r1, r3, #4
 8006520:	6011      	str	r1, [r2, #0]
 8006522:	681d      	ldr	r5, [r3, #0]
 8006524:	6862      	ldr	r2, [r4, #4]
 8006526:	2100      	movs	r1, #0
 8006528:	4628      	mov	r0, r5
 800652a:	f000 f837 	bl	800659c <memchr>
 800652e:	b108      	cbz	r0, 8006534 <_printf_i+0x1bc>
 8006530:	1b40      	subs	r0, r0, r5
 8006532:	6060      	str	r0, [r4, #4]
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	2300      	movs	r3, #0
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	e7a7      	b.n	8006490 <_printf_i+0x118>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	462a      	mov	r2, r5
 8006544:	4639      	mov	r1, r7
 8006546:	4630      	mov	r0, r6
 8006548:	47c0      	blx	r8
 800654a:	3001      	adds	r0, #1
 800654c:	d0aa      	beq.n	80064a4 <_printf_i+0x12c>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	079b      	lsls	r3, r3, #30
 8006552:	d413      	bmi.n	800657c <_printf_i+0x204>
 8006554:	68e0      	ldr	r0, [r4, #12]
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	4298      	cmp	r0, r3
 800655a:	bfb8      	it	lt
 800655c:	4618      	movlt	r0, r3
 800655e:	e7a3      	b.n	80064a8 <_printf_i+0x130>
 8006560:	2301      	movs	r3, #1
 8006562:	464a      	mov	r2, r9
 8006564:	4639      	mov	r1, r7
 8006566:	4630      	mov	r0, r6
 8006568:	47c0      	blx	r8
 800656a:	3001      	adds	r0, #1
 800656c:	d09a      	beq.n	80064a4 <_printf_i+0x12c>
 800656e:	3501      	adds	r5, #1
 8006570:	68e3      	ldr	r3, [r4, #12]
 8006572:	9a03      	ldr	r2, [sp, #12]
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	42ab      	cmp	r3, r5
 8006578:	dcf2      	bgt.n	8006560 <_printf_i+0x1e8>
 800657a:	e7eb      	b.n	8006554 <_printf_i+0x1dc>
 800657c:	2500      	movs	r5, #0
 800657e:	f104 0919 	add.w	r9, r4, #25
 8006582:	e7f5      	b.n	8006570 <_printf_i+0x1f8>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1ac      	bne.n	80064e2 <_printf_i+0x16a>
 8006588:	7803      	ldrb	r3, [r0, #0]
 800658a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800658e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006592:	e76c      	b.n	800646e <_printf_i+0xf6>
 8006594:	080069d5 	.word	0x080069d5
 8006598:	080069e6 	.word	0x080069e6

0800659c <memchr>:
 800659c:	b510      	push	{r4, lr}
 800659e:	b2c9      	uxtb	r1, r1
 80065a0:	4402      	add	r2, r0
 80065a2:	4290      	cmp	r0, r2
 80065a4:	4603      	mov	r3, r0
 80065a6:	d101      	bne.n	80065ac <memchr+0x10>
 80065a8:	2300      	movs	r3, #0
 80065aa:	e003      	b.n	80065b4 <memchr+0x18>
 80065ac:	781c      	ldrb	r4, [r3, #0]
 80065ae:	3001      	adds	r0, #1
 80065b0:	428c      	cmp	r4, r1
 80065b2:	d1f6      	bne.n	80065a2 <memchr+0x6>
 80065b4:	4618      	mov	r0, r3
 80065b6:	bd10      	pop	{r4, pc}

080065b8 <memcpy>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	440a      	add	r2, r1
 80065be:	4291      	cmp	r1, r2
 80065c0:	d100      	bne.n	80065c4 <memcpy+0xc>
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065cc:	e7f7      	b.n	80065be <memcpy+0x6>

080065ce <memmove>:
 80065ce:	4288      	cmp	r0, r1
 80065d0:	b510      	push	{r4, lr}
 80065d2:	eb01 0302 	add.w	r3, r1, r2
 80065d6:	d807      	bhi.n	80065e8 <memmove+0x1a>
 80065d8:	1e42      	subs	r2, r0, #1
 80065da:	4299      	cmp	r1, r3
 80065dc:	d00a      	beq.n	80065f4 <memmove+0x26>
 80065de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065e6:	e7f8      	b.n	80065da <memmove+0xc>
 80065e8:	4283      	cmp	r3, r0
 80065ea:	d9f5      	bls.n	80065d8 <memmove+0xa>
 80065ec:	1881      	adds	r1, r0, r2
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	42d3      	cmn	r3, r2
 80065f2:	d100      	bne.n	80065f6 <memmove+0x28>
 80065f4:	bd10      	pop	{r4, pc}
 80065f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065fe:	e7f7      	b.n	80065f0 <memmove+0x22>

08006600 <_free_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4605      	mov	r5, r0
 8006604:	2900      	cmp	r1, #0
 8006606:	d043      	beq.n	8006690 <_free_r+0x90>
 8006608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800660c:	1f0c      	subs	r4, r1, #4
 800660e:	2b00      	cmp	r3, #0
 8006610:	bfb8      	it	lt
 8006612:	18e4      	addlt	r4, r4, r3
 8006614:	f000 f8d0 	bl	80067b8 <__malloc_lock>
 8006618:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <_free_r+0x94>)
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	4610      	mov	r0, r2
 800661e:	b933      	cbnz	r3, 800662e <_free_r+0x2e>
 8006620:	6063      	str	r3, [r4, #4]
 8006622:	6014      	str	r4, [r2, #0]
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800662a:	f000 b8c6 	b.w	80067ba <__malloc_unlock>
 800662e:	42a3      	cmp	r3, r4
 8006630:	d90b      	bls.n	800664a <_free_r+0x4a>
 8006632:	6821      	ldr	r1, [r4, #0]
 8006634:	1862      	adds	r2, r4, r1
 8006636:	4293      	cmp	r3, r2
 8006638:	bf01      	itttt	eq
 800663a:	681a      	ldreq	r2, [r3, #0]
 800663c:	685b      	ldreq	r3, [r3, #4]
 800663e:	1852      	addeq	r2, r2, r1
 8006640:	6022      	streq	r2, [r4, #0]
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	6004      	str	r4, [r0, #0]
 8006646:	e7ed      	b.n	8006624 <_free_r+0x24>
 8006648:	4613      	mov	r3, r2
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	b10a      	cbz	r2, 8006652 <_free_r+0x52>
 800664e:	42a2      	cmp	r2, r4
 8006650:	d9fa      	bls.n	8006648 <_free_r+0x48>
 8006652:	6819      	ldr	r1, [r3, #0]
 8006654:	1858      	adds	r0, r3, r1
 8006656:	42a0      	cmp	r0, r4
 8006658:	d10b      	bne.n	8006672 <_free_r+0x72>
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	4401      	add	r1, r0
 800665e:	1858      	adds	r0, r3, r1
 8006660:	4282      	cmp	r2, r0
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	d1de      	bne.n	8006624 <_free_r+0x24>
 8006666:	6810      	ldr	r0, [r2, #0]
 8006668:	6852      	ldr	r2, [r2, #4]
 800666a:	4401      	add	r1, r0
 800666c:	6019      	str	r1, [r3, #0]
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e7d8      	b.n	8006624 <_free_r+0x24>
 8006672:	d902      	bls.n	800667a <_free_r+0x7a>
 8006674:	230c      	movs	r3, #12
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	e7d4      	b.n	8006624 <_free_r+0x24>
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	1821      	adds	r1, r4, r0
 800667e:	428a      	cmp	r2, r1
 8006680:	bf01      	itttt	eq
 8006682:	6811      	ldreq	r1, [r2, #0]
 8006684:	6852      	ldreq	r2, [r2, #4]
 8006686:	1809      	addeq	r1, r1, r0
 8006688:	6021      	streq	r1, [r4, #0]
 800668a:	6062      	str	r2, [r4, #4]
 800668c:	605c      	str	r4, [r3, #4]
 800668e:	e7c9      	b.n	8006624 <_free_r+0x24>
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	20000168 	.word	0x20000168

08006698 <_malloc_r>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	1ccd      	adds	r5, r1, #3
 800669c:	f025 0503 	bic.w	r5, r5, #3
 80066a0:	3508      	adds	r5, #8
 80066a2:	2d0c      	cmp	r5, #12
 80066a4:	bf38      	it	cc
 80066a6:	250c      	movcc	r5, #12
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	4606      	mov	r6, r0
 80066ac:	db01      	blt.n	80066b2 <_malloc_r+0x1a>
 80066ae:	42a9      	cmp	r1, r5
 80066b0:	d903      	bls.n	80066ba <_malloc_r+0x22>
 80066b2:	230c      	movs	r3, #12
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	2000      	movs	r0, #0
 80066b8:	bd70      	pop	{r4, r5, r6, pc}
 80066ba:	f000 f87d 	bl	80067b8 <__malloc_lock>
 80066be:	4a21      	ldr	r2, [pc, #132]	; (8006744 <_malloc_r+0xac>)
 80066c0:	6814      	ldr	r4, [r2, #0]
 80066c2:	4621      	mov	r1, r4
 80066c4:	b991      	cbnz	r1, 80066ec <_malloc_r+0x54>
 80066c6:	4c20      	ldr	r4, [pc, #128]	; (8006748 <_malloc_r+0xb0>)
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	b91b      	cbnz	r3, 80066d4 <_malloc_r+0x3c>
 80066cc:	4630      	mov	r0, r6
 80066ce:	f000 f863 	bl	8006798 <_sbrk_r>
 80066d2:	6020      	str	r0, [r4, #0]
 80066d4:	4629      	mov	r1, r5
 80066d6:	4630      	mov	r0, r6
 80066d8:	f000 f85e 	bl	8006798 <_sbrk_r>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d124      	bne.n	800672a <_malloc_r+0x92>
 80066e0:	230c      	movs	r3, #12
 80066e2:	4630      	mov	r0, r6
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	f000 f868 	bl	80067ba <__malloc_unlock>
 80066ea:	e7e4      	b.n	80066b6 <_malloc_r+0x1e>
 80066ec:	680b      	ldr	r3, [r1, #0]
 80066ee:	1b5b      	subs	r3, r3, r5
 80066f0:	d418      	bmi.n	8006724 <_malloc_r+0x8c>
 80066f2:	2b0b      	cmp	r3, #11
 80066f4:	d90f      	bls.n	8006716 <_malloc_r+0x7e>
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	18cc      	adds	r4, r1, r3
 80066fa:	50cd      	str	r5, [r1, r3]
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 f85c 	bl	80067ba <__malloc_unlock>
 8006702:	f104 000b 	add.w	r0, r4, #11
 8006706:	1d23      	adds	r3, r4, #4
 8006708:	f020 0007 	bic.w	r0, r0, #7
 800670c:	1ac3      	subs	r3, r0, r3
 800670e:	d0d3      	beq.n	80066b8 <_malloc_r+0x20>
 8006710:	425a      	negs	r2, r3
 8006712:	50e2      	str	r2, [r4, r3]
 8006714:	e7d0      	b.n	80066b8 <_malloc_r+0x20>
 8006716:	684b      	ldr	r3, [r1, #4]
 8006718:	428c      	cmp	r4, r1
 800671a:	bf16      	itet	ne
 800671c:	6063      	strne	r3, [r4, #4]
 800671e:	6013      	streq	r3, [r2, #0]
 8006720:	460c      	movne	r4, r1
 8006722:	e7eb      	b.n	80066fc <_malloc_r+0x64>
 8006724:	460c      	mov	r4, r1
 8006726:	6849      	ldr	r1, [r1, #4]
 8006728:	e7cc      	b.n	80066c4 <_malloc_r+0x2c>
 800672a:	1cc4      	adds	r4, r0, #3
 800672c:	f024 0403 	bic.w	r4, r4, #3
 8006730:	42a0      	cmp	r0, r4
 8006732:	d005      	beq.n	8006740 <_malloc_r+0xa8>
 8006734:	1a21      	subs	r1, r4, r0
 8006736:	4630      	mov	r0, r6
 8006738:	f000 f82e 	bl	8006798 <_sbrk_r>
 800673c:	3001      	adds	r0, #1
 800673e:	d0cf      	beq.n	80066e0 <_malloc_r+0x48>
 8006740:	6025      	str	r5, [r4, #0]
 8006742:	e7db      	b.n	80066fc <_malloc_r+0x64>
 8006744:	20000168 	.word	0x20000168
 8006748:	2000016c 	.word	0x2000016c

0800674c <_realloc_r>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	4607      	mov	r7, r0
 8006750:	4614      	mov	r4, r2
 8006752:	460e      	mov	r6, r1
 8006754:	b921      	cbnz	r1, 8006760 <_realloc_r+0x14>
 8006756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800675a:	4611      	mov	r1, r2
 800675c:	f7ff bf9c 	b.w	8006698 <_malloc_r>
 8006760:	b922      	cbnz	r2, 800676c <_realloc_r+0x20>
 8006762:	f7ff ff4d 	bl	8006600 <_free_r>
 8006766:	4625      	mov	r5, r4
 8006768:	4628      	mov	r0, r5
 800676a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800676c:	f000 f826 	bl	80067bc <_malloc_usable_size_r>
 8006770:	42a0      	cmp	r0, r4
 8006772:	d20f      	bcs.n	8006794 <_realloc_r+0x48>
 8006774:	4621      	mov	r1, r4
 8006776:	4638      	mov	r0, r7
 8006778:	f7ff ff8e 	bl	8006698 <_malloc_r>
 800677c:	4605      	mov	r5, r0
 800677e:	2800      	cmp	r0, #0
 8006780:	d0f2      	beq.n	8006768 <_realloc_r+0x1c>
 8006782:	4631      	mov	r1, r6
 8006784:	4622      	mov	r2, r4
 8006786:	f7ff ff17 	bl	80065b8 <memcpy>
 800678a:	4631      	mov	r1, r6
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff ff37 	bl	8006600 <_free_r>
 8006792:	e7e9      	b.n	8006768 <_realloc_r+0x1c>
 8006794:	4635      	mov	r5, r6
 8006796:	e7e7      	b.n	8006768 <_realloc_r+0x1c>

08006798 <_sbrk_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	2300      	movs	r3, #0
 800679c:	4c05      	ldr	r4, [pc, #20]	; (80067b4 <_sbrk_r+0x1c>)
 800679e:	4605      	mov	r5, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	6023      	str	r3, [r4, #0]
 80067a4:	f7fb ff18 	bl	80025d8 <_sbrk>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_sbrk_r+0x1a>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_sbrk_r+0x1a>
 80067b0:	602b      	str	r3, [r5, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20000338 	.word	0x20000338

080067b8 <__malloc_lock>:
 80067b8:	4770      	bx	lr

080067ba <__malloc_unlock>:
 80067ba:	4770      	bx	lr

080067bc <_malloc_usable_size_r>:
 80067bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c0:	1f18      	subs	r0, r3, #4
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfbc      	itt	lt
 80067c6:	580b      	ldrlt	r3, [r1, r0]
 80067c8:	18c0      	addlt	r0, r0, r3
 80067ca:	4770      	bx	lr

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
